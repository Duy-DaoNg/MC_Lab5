
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000723c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08007350  08007350  00017350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007804  08007804  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007804  08007804  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007804  08007804  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007804  08007804  00017804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007808  08007808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800780c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  200001e4  080079f0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  080079f0  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0b1  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002491  00000000  00000000  0002f2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00031750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  000325d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191b2  00000000  00000000  00033368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107e9  00000000  00000000  0004c51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ecec  00000000  00000000  0005cd03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb9ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc0  00000000  00000000  000eba44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007334 	.word	0x08007334

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007334 	.word	0x08007334

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <setTimer1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int timer1Counter = 1;
int timer1Flag = 0;
void setTimer1(int duration){
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	timer1Counter = duration;
 8000a90:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <setTimer1+0x20>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
	timer1Flag = 0;
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <setTimer1+0x24>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000200 	.word	0x20000200

08000ab0 <timerRun>:
void timerRun(){
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	if(timer1Counter > 0){
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <timerRun+0x2c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	dd0b      	ble.n	8000ad4 <timerRun+0x24>
		timer1Counter--;
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <timerRun+0x2c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	4a06      	ldr	r2, [pc, #24]	; (8000adc <timerRun+0x2c>)
 8000ac4:	6013      	str	r3, [r2, #0]
		if(timer1Counter <= 0){
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <timerRun+0x2c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	dc02      	bgt.n	8000ad4 <timerRun+0x24>
			timer1Flag = 1;
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <timerRun+0x30>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000200 	.word	0x20000200

08000ae4 <uart_communication_fsm>:
//char Sensory_Data[20];
uint32_t ADC_value;
char str_transmit[30];
//char RST_Code[] = "!RST#";
//char Success_Response[] = "!OK#";
void uart_communication_fsm(){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	switch(command_flag){
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <uart_communication_fsm+0x94>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d006      	beq.n	8000afe <uart_communication_fsm+0x1a>
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	dc3a      	bgt.n	8000b6a <uart_communication_fsm+0x86>
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d03a      	beq.n	8000b6e <uart_communication_fsm+0x8a>
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d026      	beq.n	8000b4a <uart_communication_fsm+0x66>
	case OK_COMMAND:
		HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "ok_COMMAND\r\n"), 1000 );
		command_flag = NONE_COMMAND;
		break;
	default:
		break;
 8000afc:	e035      	b.n	8000b6a <uart_communication_fsm+0x86>
		if(timer1Flag){
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <uart_communication_fsm+0x98>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d035      	beq.n	8000b72 <uart_communication_fsm+0x8e>
		  HAL_ADC_Start(&hadc1);
 8000b06:	481e      	ldr	r0, [pc, #120]	; (8000b80 <uart_communication_fsm+0x9c>)
 8000b08:	f000 fefc 	bl	8001904 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 300);
 8000b0c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000b10:	481b      	ldr	r0, [pc, #108]	; (8000b80 <uart_communication_fsm+0x9c>)
 8000b12:	f000 ffa5 	bl	8001a60 <HAL_ADC_PollForConversion>
		  ADC_value = HAL_ADC_GetValue(&hadc1);
 8000b16:	481a      	ldr	r0, [pc, #104]	; (8000b80 <uart_communication_fsm+0x9c>)
 8000b18:	f001 f8a8 	bl	8001c6c <HAL_ADC_GetValue>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <uart_communication_fsm+0xa0>)
 8000b20:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "!ADC=%d#\r\n", (int)ADC_value), 1000 );
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <uart_communication_fsm+0xa0>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	4917      	ldr	r1, [pc, #92]	; (8000b88 <uart_communication_fsm+0xa4>)
 8000b2a:	4818      	ldr	r0, [pc, #96]	; (8000b8c <uart_communication_fsm+0xa8>)
 8000b2c:	f004 f9c8 	bl	8004ec0 <siprintf>
 8000b30:	4603      	mov	r3, r0
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b38:	4914      	ldr	r1, [pc, #80]	; (8000b8c <uart_communication_fsm+0xa8>)
 8000b3a:	4815      	ldr	r0, [pc, #84]	; (8000b90 <uart_communication_fsm+0xac>)
 8000b3c:	f003 f843 	bl	8003bc6 <HAL_UART_Transmit>
		  setTimer1(300);
 8000b40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b44:	f7ff ffa0 	bl	8000a88 <setTimer1>
		break;
 8000b48:	e013      	b.n	8000b72 <uart_communication_fsm+0x8e>
		HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "ok_COMMAND\r\n"), 1000 );
 8000b4a:	4912      	ldr	r1, [pc, #72]	; (8000b94 <uart_communication_fsm+0xb0>)
 8000b4c:	480f      	ldr	r0, [pc, #60]	; (8000b8c <uart_communication_fsm+0xa8>)
 8000b4e:	f004 f9b7 	bl	8004ec0 <siprintf>
 8000b52:	4603      	mov	r3, r0
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5a:	490c      	ldr	r1, [pc, #48]	; (8000b8c <uart_communication_fsm+0xa8>)
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <uart_communication_fsm+0xac>)
 8000b5e:	f003 f832 	bl	8003bc6 <HAL_UART_Transmit>
		command_flag = NONE_COMMAND;
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <uart_communication_fsm+0x94>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
		break;
 8000b68:	e004      	b.n	8000b74 <uart_communication_fsm+0x90>
		break;
 8000b6a:	bf00      	nop
 8000b6c:	e002      	b.n	8000b74 <uart_communication_fsm+0x90>
		break;
 8000b6e:	bf00      	nop
 8000b70:	e000      	b.n	8000b74 <uart_communication_fsm+0x90>
		break;
 8000b72:	bf00      	nop
	}
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000208 	.word	0x20000208
 8000b7c:	20000200 	.word	0x20000200
 8000b80:	20000244 	.word	0x20000244
 8000b84:	20000240 	.word	0x20000240
 8000b88:	08007350 	.word	0x08007350
 8000b8c:	20000218 	.word	0x20000218
 8000b90:	200002dc 	.word	0x200002dc
 8000b94:	0800735c 	.word	0x0800735c

08000b98 <command_parser_fsm>:
void command_parser_fsm (uint8_t index_buffer){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	if(index_buffer == 0){
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d101      	bne.n	8000bac <command_parser_fsm+0x14>
		index_buffer = 30;
 8000ba8:	231e      	movs	r3, #30
 8000baa:	71fb      	strb	r3, [r7, #7]
	}
	switch(command_parser_state){
 8000bac:	4bac      	ldr	r3, [pc, #688]	; (8000e60 <command_parser_fsm+0x2c8>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b21      	cmp	r3, #33	; 0x21
 8000bb2:	d023      	beq.n	8000bfc <command_parser_fsm+0x64>
 8000bb4:	2b21      	cmp	r3, #33	; 0x21
 8000bb6:	f2c0 812c 	blt.w	8000e12 <command_parser_fsm+0x27a>
 8000bba:	2b54      	cmp	r3, #84	; 0x54
 8000bbc:	f300 8129 	bgt.w	8000e12 <command_parser_fsm+0x27a>
 8000bc0:	2b4b      	cmp	r3, #75	; 0x4b
 8000bc2:	f2c0 8126 	blt.w	8000e12 <command_parser_fsm+0x27a>
 8000bc6:	3b4b      	subs	r3, #75	; 0x4b
 8000bc8:	2b09      	cmp	r3, #9
 8000bca:	f200 8122 	bhi.w	8000e12 <command_parser_fsm+0x27a>
 8000bce:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <command_parser_fsm+0x3c>)
 8000bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd4:	08000db9 	.word	0x08000db9
 8000bd8:	08000e13 	.word	0x08000e13
 8000bdc:	08000e13 	.word	0x08000e13
 8000be0:	08000e13 	.word	0x08000e13
 8000be4:	08000d6d 	.word	0x08000d6d
 8000be8:	08000e13 	.word	0x08000e13
 8000bec:	08000e13 	.word	0x08000e13
 8000bf0:	08000c75 	.word	0x08000c75
 8000bf4:	08000cc1 	.word	0x08000cc1
 8000bf8:	08000d0d 	.word	0x08000d0d
	case '!':
		if(buffer[index_buffer-1] == char_R){
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	4a98      	ldr	r2, [pc, #608]	; (8000e64 <command_parser_fsm+0x2cc>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	2b52      	cmp	r3, #82	; 0x52
 8000c06:	d10f      	bne.n	8000c28 <command_parser_fsm+0x90>
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: R\r\n"), 1000 );
 8000c08:	4997      	ldr	r1, [pc, #604]	; (8000e68 <command_parser_fsm+0x2d0>)
 8000c0a:	4898      	ldr	r0, [pc, #608]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000c0c:	f004 f958 	bl	8004ec0 <siprintf>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c18:	4994      	ldr	r1, [pc, #592]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000c1a:	4895      	ldr	r0, [pc, #596]	; (8000e70 <command_parser_fsm+0x2d8>)
 8000c1c:	f002 ffd3 	bl	8003bc6 <HAL_UART_Transmit>
			command_parser_state = 'R';
 8000c20:	4b8f      	ldr	r3, [pc, #572]	; (8000e60 <command_parser_fsm+0x2c8>)
 8000c22:	2252      	movs	r2, #82	; 0x52
 8000c24:	701a      	strb	r2, [r3, #0]
		}
		else{
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: Default\r\n"), 1000 );
			command_parser_state = '1';
		}
		break;
 8000c26:	e117      	b.n	8000e58 <command_parser_fsm+0x2c0>
		else if(buffer[index_buffer-1] == char_O){
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	4a8d      	ldr	r2, [pc, #564]	; (8000e64 <command_parser_fsm+0x2cc>)
 8000c2e:	5cd3      	ldrb	r3, [r2, r3]
 8000c30:	2b4f      	cmp	r3, #79	; 0x4f
 8000c32:	d10f      	bne.n	8000c54 <command_parser_fsm+0xbc>
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: O\r\n"), 1000 );
 8000c34:	498f      	ldr	r1, [pc, #572]	; (8000e74 <command_parser_fsm+0x2dc>)
 8000c36:	488d      	ldr	r0, [pc, #564]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000c38:	f004 f942 	bl	8004ec0 <siprintf>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c44:	4989      	ldr	r1, [pc, #548]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000c46:	488a      	ldr	r0, [pc, #552]	; (8000e70 <command_parser_fsm+0x2d8>)
 8000c48:	f002 ffbd 	bl	8003bc6 <HAL_UART_Transmit>
			command_parser_state = 'O';
 8000c4c:	4b84      	ldr	r3, [pc, #528]	; (8000e60 <command_parser_fsm+0x2c8>)
 8000c4e:	224f      	movs	r2, #79	; 0x4f
 8000c50:	701a      	strb	r2, [r3, #0]
		break;
 8000c52:	e101      	b.n	8000e58 <command_parser_fsm+0x2c0>
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: Default\r\n"), 1000 );
 8000c54:	4988      	ldr	r1, [pc, #544]	; (8000e78 <command_parser_fsm+0x2e0>)
 8000c56:	4885      	ldr	r0, [pc, #532]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000c58:	f004 f932 	bl	8004ec0 <siprintf>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c64:	4981      	ldr	r1, [pc, #516]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000c66:	4882      	ldr	r0, [pc, #520]	; (8000e70 <command_parser_fsm+0x2d8>)
 8000c68:	f002 ffad 	bl	8003bc6 <HAL_UART_Transmit>
			command_parser_state = '1';
 8000c6c:	4b7c      	ldr	r3, [pc, #496]	; (8000e60 <command_parser_fsm+0x2c8>)
 8000c6e:	2231      	movs	r2, #49	; 0x31
 8000c70:	701a      	strb	r2, [r3, #0]
		break;
 8000c72:	e0f1      	b.n	8000e58 <command_parser_fsm+0x2c0>
	case 'R':
		if(buffer[index_buffer-1] == char_S){
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	4a7a      	ldr	r2, [pc, #488]	; (8000e64 <command_parser_fsm+0x2cc>)
 8000c7a:	5cd3      	ldrb	r3, [r2, r3]
 8000c7c:	2b53      	cmp	r3, #83	; 0x53
 8000c7e:	d10f      	bne.n	8000ca0 <command_parser_fsm+0x108>
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: S\r\n"), 1000 );
 8000c80:	497e      	ldr	r1, [pc, #504]	; (8000e7c <command_parser_fsm+0x2e4>)
 8000c82:	487a      	ldr	r0, [pc, #488]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000c84:	f004 f91c 	bl	8004ec0 <siprintf>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c90:	4976      	ldr	r1, [pc, #472]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000c92:	4877      	ldr	r0, [pc, #476]	; (8000e70 <command_parser_fsm+0x2d8>)
 8000c94:	f002 ff97 	bl	8003bc6 <HAL_UART_Transmit>
			command_parser_state = 'S';
 8000c98:	4b71      	ldr	r3, [pc, #452]	; (8000e60 <command_parser_fsm+0x2c8>)
 8000c9a:	2253      	movs	r2, #83	; 0x53
 8000c9c:	701a      	strb	r2, [r3, #0]
		}
		else{
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: Default\r\n"), 1000 );
			command_parser_state = '1';
		}
		break;
 8000c9e:	e0db      	b.n	8000e58 <command_parser_fsm+0x2c0>
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: Default\r\n"), 1000 );
 8000ca0:	4975      	ldr	r1, [pc, #468]	; (8000e78 <command_parser_fsm+0x2e0>)
 8000ca2:	4872      	ldr	r0, [pc, #456]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000ca4:	f004 f90c 	bl	8004ec0 <siprintf>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb0:	496e      	ldr	r1, [pc, #440]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000cb2:	486f      	ldr	r0, [pc, #444]	; (8000e70 <command_parser_fsm+0x2d8>)
 8000cb4:	f002 ff87 	bl	8003bc6 <HAL_UART_Transmit>
			command_parser_state = '1';
 8000cb8:	4b69      	ldr	r3, [pc, #420]	; (8000e60 <command_parser_fsm+0x2c8>)
 8000cba:	2231      	movs	r2, #49	; 0x31
 8000cbc:	701a      	strb	r2, [r3, #0]
		break;
 8000cbe:	e0cb      	b.n	8000e58 <command_parser_fsm+0x2c0>
	case 'S':
		if(buffer[index_buffer-1] == char_T){
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	4a67      	ldr	r2, [pc, #412]	; (8000e64 <command_parser_fsm+0x2cc>)
 8000cc6:	5cd3      	ldrb	r3, [r2, r3]
 8000cc8:	2b54      	cmp	r3, #84	; 0x54
 8000cca:	d10f      	bne.n	8000cec <command_parser_fsm+0x154>
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: T\r\n"), 1000 );
 8000ccc:	496c      	ldr	r1, [pc, #432]	; (8000e80 <command_parser_fsm+0x2e8>)
 8000cce:	4867      	ldr	r0, [pc, #412]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000cd0:	f004 f8f6 	bl	8004ec0 <siprintf>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cdc:	4963      	ldr	r1, [pc, #396]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000cde:	4864      	ldr	r0, [pc, #400]	; (8000e70 <command_parser_fsm+0x2d8>)
 8000ce0:	f002 ff71 	bl	8003bc6 <HAL_UART_Transmit>
			command_parser_state = 'T';
 8000ce4:	4b5e      	ldr	r3, [pc, #376]	; (8000e60 <command_parser_fsm+0x2c8>)
 8000ce6:	2254      	movs	r2, #84	; 0x54
 8000ce8:	701a      	strb	r2, [r3, #0]
		}
		else{
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: Default\r\n"), 1000 );
			command_parser_state = '1';
		}
		break;
 8000cea:	e0b5      	b.n	8000e58 <command_parser_fsm+0x2c0>
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: Default\r\n"), 1000 );
 8000cec:	4962      	ldr	r1, [pc, #392]	; (8000e78 <command_parser_fsm+0x2e0>)
 8000cee:	485f      	ldr	r0, [pc, #380]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000cf0:	f004 f8e6 	bl	8004ec0 <siprintf>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfc:	495b      	ldr	r1, [pc, #364]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000cfe:	485c      	ldr	r0, [pc, #368]	; (8000e70 <command_parser_fsm+0x2d8>)
 8000d00:	f002 ff61 	bl	8003bc6 <HAL_UART_Transmit>
			command_parser_state = '1';
 8000d04:	4b56      	ldr	r3, [pc, #344]	; (8000e60 <command_parser_fsm+0x2c8>)
 8000d06:	2231      	movs	r2, #49	; 0x31
 8000d08:	701a      	strb	r2, [r3, #0]
		break;
 8000d0a:	e0a5      	b.n	8000e58 <command_parser_fsm+0x2c0>
	case 'T':
		if(buffer[index_buffer-1] == char_pound){
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	4a54      	ldr	r2, [pc, #336]	; (8000e64 <command_parser_fsm+0x2cc>)
 8000d12:	5cd3      	ldrb	r3, [r2, r3]
 8000d14:	2b23      	cmp	r3, #35	; 0x23
 8000d16:	d119      	bne.n	8000d4c <command_parser_fsm+0x1b4>
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: #\r\n"), 1000 );
 8000d18:	495a      	ldr	r1, [pc, #360]	; (8000e84 <command_parser_fsm+0x2ec>)
 8000d1a:	4854      	ldr	r0, [pc, #336]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000d1c:	f004 f8d0 	bl	8004ec0 <siprintf>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d28:	4950      	ldr	r1, [pc, #320]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000d2a:	4851      	ldr	r0, [pc, #324]	; (8000e70 <command_parser_fsm+0x2d8>)
 8000d2c:	f002 ff4b 	bl	8003bc6 <HAL_UART_Transmit>
			command_flag = RST_COMMAND;
 8000d30:	4b55      	ldr	r3, [pc, #340]	; (8000e88 <command_parser_fsm+0x2f0>)
 8000d32:	2202      	movs	r2, #2
 8000d34:	601a      	str	r2, [r3, #0]
			sprintf(command_data, "RST");
 8000d36:	4955      	ldr	r1, [pc, #340]	; (8000e8c <command_parser_fsm+0x2f4>)
 8000d38:	4855      	ldr	r0, [pc, #340]	; (8000e90 <command_parser_fsm+0x2f8>)
 8000d3a:	f004 f8c1 	bl	8004ec0 <siprintf>
			command_parser_state = '1';
 8000d3e:	4b48      	ldr	r3, [pc, #288]	; (8000e60 <command_parser_fsm+0x2c8>)
 8000d40:	2231      	movs	r2, #49	; 0x31
 8000d42:	701a      	strb	r2, [r3, #0]
			setTimer1(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f7ff fe9f 	bl	8000a88 <setTimer1>
		}
		else{
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: Default\r\n"), 1000 );
			command_parser_state = '1';
		}
		break;
 8000d4a:	e085      	b.n	8000e58 <command_parser_fsm+0x2c0>
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: Default\r\n"), 1000 );
 8000d4c:	494a      	ldr	r1, [pc, #296]	; (8000e78 <command_parser_fsm+0x2e0>)
 8000d4e:	4847      	ldr	r0, [pc, #284]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000d50:	f004 f8b6 	bl	8004ec0 <siprintf>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5c:	4943      	ldr	r1, [pc, #268]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000d5e:	4844      	ldr	r0, [pc, #272]	; (8000e70 <command_parser_fsm+0x2d8>)
 8000d60:	f002 ff31 	bl	8003bc6 <HAL_UART_Transmit>
			command_parser_state = '1';
 8000d64:	4b3e      	ldr	r3, [pc, #248]	; (8000e60 <command_parser_fsm+0x2c8>)
 8000d66:	2231      	movs	r2, #49	; 0x31
 8000d68:	701a      	strb	r2, [r3, #0]
		break;
 8000d6a:	e075      	b.n	8000e58 <command_parser_fsm+0x2c0>
	case 'O':
		if(buffer[index_buffer-1] == char_K){
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	4a3c      	ldr	r2, [pc, #240]	; (8000e64 <command_parser_fsm+0x2cc>)
 8000d72:	5cd3      	ldrb	r3, [r2, r3]
 8000d74:	2b4b      	cmp	r3, #75	; 0x4b
 8000d76:	d10f      	bne.n	8000d98 <command_parser_fsm+0x200>
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: K\r\n"), 1000 );
 8000d78:	4946      	ldr	r1, [pc, #280]	; (8000e94 <command_parser_fsm+0x2fc>)
 8000d7a:	483c      	ldr	r0, [pc, #240]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000d7c:	f004 f8a0 	bl	8004ec0 <siprintf>
 8000d80:	4603      	mov	r3, r0
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d88:	4938      	ldr	r1, [pc, #224]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000d8a:	4839      	ldr	r0, [pc, #228]	; (8000e70 <command_parser_fsm+0x2d8>)
 8000d8c:	f002 ff1b 	bl	8003bc6 <HAL_UART_Transmit>
			command_parser_state = 'K';
 8000d90:	4b33      	ldr	r3, [pc, #204]	; (8000e60 <command_parser_fsm+0x2c8>)
 8000d92:	224b      	movs	r2, #75	; 0x4b
 8000d94:	701a      	strb	r2, [r3, #0]
		}
		else{
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: Default\r\n"), 1000 );
			command_parser_state = '1';
		}
		break;
 8000d96:	e05f      	b.n	8000e58 <command_parser_fsm+0x2c0>
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: Default\r\n"), 1000 );
 8000d98:	4937      	ldr	r1, [pc, #220]	; (8000e78 <command_parser_fsm+0x2e0>)
 8000d9a:	4834      	ldr	r0, [pc, #208]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000d9c:	f004 f890 	bl	8004ec0 <siprintf>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da8:	4930      	ldr	r1, [pc, #192]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000daa:	4831      	ldr	r0, [pc, #196]	; (8000e70 <command_parser_fsm+0x2d8>)
 8000dac:	f002 ff0b 	bl	8003bc6 <HAL_UART_Transmit>
			command_parser_state = '1';
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <command_parser_fsm+0x2c8>)
 8000db2:	2231      	movs	r2, #49	; 0x31
 8000db4:	701a      	strb	r2, [r3, #0]
		break;
 8000db6:	e04f      	b.n	8000e58 <command_parser_fsm+0x2c0>
	case 'K':
		if(buffer[index_buffer-1] == char_pound){
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	4a29      	ldr	r2, [pc, #164]	; (8000e64 <command_parser_fsm+0x2cc>)
 8000dbe:	5cd3      	ldrb	r3, [r2, r3]
 8000dc0:	2b23      	cmp	r3, #35	; 0x23
 8000dc2:	d116      	bne.n	8000df2 <command_parser_fsm+0x25a>
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: #\r\n"), 1000 );
 8000dc4:	492f      	ldr	r1, [pc, #188]	; (8000e84 <command_parser_fsm+0x2ec>)
 8000dc6:	4829      	ldr	r0, [pc, #164]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000dc8:	f004 f87a 	bl	8004ec0 <siprintf>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd4:	4925      	ldr	r1, [pc, #148]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000dd6:	4826      	ldr	r0, [pc, #152]	; (8000e70 <command_parser_fsm+0x2d8>)
 8000dd8:	f002 fef5 	bl	8003bc6 <HAL_UART_Transmit>
			command_flag = OK_COMMAND;
 8000ddc:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <command_parser_fsm+0x2f0>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
			sprintf(command_data, "OK");
 8000de2:	492d      	ldr	r1, [pc, #180]	; (8000e98 <command_parser_fsm+0x300>)
 8000de4:	482a      	ldr	r0, [pc, #168]	; (8000e90 <command_parser_fsm+0x2f8>)
 8000de6:	f004 f86b 	bl	8004ec0 <siprintf>
			command_parser_state = '1';
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <command_parser_fsm+0x2c8>)
 8000dec:	2231      	movs	r2, #49	; 0x31
 8000dee:	701a      	strb	r2, [r3, #0]
		}
		else{
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: Default\r\n"), 1000 );
			command_parser_state = '1';
		}
		break;
 8000df0:	e032      	b.n	8000e58 <command_parser_fsm+0x2c0>
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: Default\r\n"), 1000 );
 8000df2:	4921      	ldr	r1, [pc, #132]	; (8000e78 <command_parser_fsm+0x2e0>)
 8000df4:	481d      	ldr	r0, [pc, #116]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000df6:	f004 f863 	bl	8004ec0 <siprintf>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	491a      	ldr	r1, [pc, #104]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000e04:	481a      	ldr	r0, [pc, #104]	; (8000e70 <command_parser_fsm+0x2d8>)
 8000e06:	f002 fede 	bl	8003bc6 <HAL_UART_Transmit>
			command_parser_state = '1';
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <command_parser_fsm+0x2c8>)
 8000e0c:	2231      	movs	r2, #49	; 0x31
 8000e0e:	701a      	strb	r2, [r3, #0]
		break;
 8000e10:	e022      	b.n	8000e58 <command_parser_fsm+0x2c0>
	default:
		if(buffer[index_buffer-1] == char_exc_mark){
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <command_parser_fsm+0x2cc>)
 8000e18:	5cd3      	ldrb	r3, [r2, r3]
 8000e1a:	2b21      	cmp	r3, #33	; 0x21
 8000e1c:	d10f      	bne.n	8000e3e <command_parser_fsm+0x2a6>
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "MOVE: !\r\n"), 1000 );
 8000e1e:	491f      	ldr	r1, [pc, #124]	; (8000e9c <command_parser_fsm+0x304>)
 8000e20:	4812      	ldr	r0, [pc, #72]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000e22:	f004 f84d 	bl	8004ec0 <siprintf>
 8000e26:	4603      	mov	r3, r0
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	490f      	ldr	r1, [pc, #60]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000e30:	480f      	ldr	r0, [pc, #60]	; (8000e70 <command_parser_fsm+0x2d8>)
 8000e32:	f002 fec8 	bl	8003bc6 <HAL_UART_Transmit>
			command_parser_state = '!';
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <command_parser_fsm+0x2c8>)
 8000e38:	2221      	movs	r2, #33	; 0x21
 8000e3a:	701a      	strb	r2, [r3, #0]
		}
		else{
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "In: Default\r\n"), 1000 );
		}
		break;
 8000e3c:	e00b      	b.n	8000e56 <command_parser_fsm+0x2be>
			HAL_UART_Transmit(&huart2, (void *) str_transmit, sprintf(str_transmit, "In: Default\r\n"), 1000 );
 8000e3e:	4918      	ldr	r1, [pc, #96]	; (8000ea0 <command_parser_fsm+0x308>)
 8000e40:	480a      	ldr	r0, [pc, #40]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000e42:	f004 f83d 	bl	8004ec0 <siprintf>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	4907      	ldr	r1, [pc, #28]	; (8000e6c <command_parser_fsm+0x2d4>)
 8000e50:	4807      	ldr	r0, [pc, #28]	; (8000e70 <command_parser_fsm+0x2d8>)
 8000e52:	f002 feb8 	bl	8003bc6 <HAL_UART_Transmit>
		break;
 8000e56:	bf00      	nop
	}
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000004 	.word	0x20000004
 8000e64:	20000274 	.word	0x20000274
 8000e68:	0800736c 	.word	0x0800736c
 8000e6c:	20000218 	.word	0x20000218
 8000e70:	200002dc 	.word	0x200002dc
 8000e74:	08007378 	.word	0x08007378
 8000e78:	08007384 	.word	0x08007384
 8000e7c:	08007394 	.word	0x08007394
 8000e80:	080073a0 	.word	0x080073a0
 8000e84:	080073ac 	.word	0x080073ac
 8000e88:	20000208 	.word	0x20000208
 8000e8c:	080073b8 	.word	0x080073b8
 8000e90:	20000238 	.word	0x20000238
 8000e94:	080073bc 	.word	0x080073bc
 8000e98:	080073c8 	.word	0x080073c8
 8000e9c:	080073cc 	.word	0x080073cc
 8000ea0:	080073d8 	.word	0x080073d8

08000ea4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART2){
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a10      	ldr	r2, [pc, #64]	; (8000ef4 <HAL_UART_RxCpltCallback+0x50>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d119      	bne.n	8000eea <HAL_UART_RxCpltCallback+0x46>
		buffer[index_buffer++] = temp;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <HAL_UART_RxCpltCallback+0x54>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	b2d1      	uxtb	r1, r2
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <HAL_UART_RxCpltCallback+0x54>)
 8000ec0:	7011      	strb	r1, [r2, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_UART_RxCpltCallback+0x58>)
 8000ec6:	7819      	ldrb	r1, [r3, #0]
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <HAL_UART_RxCpltCallback+0x5c>)
 8000eca:	5499      	strb	r1, [r3, r2]

		if(index_buffer == 30) index_buffer = 0;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_UART_RxCpltCallback+0x54>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b1e      	cmp	r3, #30
 8000ed2:	d102      	bne.n	8000eda <HAL_UART_RxCpltCallback+0x36>
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_UART_RxCpltCallback+0x54>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_UART_RxCpltCallback+0x60>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2 , &temp , 1) ;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4906      	ldr	r1, [pc, #24]	; (8000efc <HAL_UART_RxCpltCallback+0x58>)
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <HAL_UART_RxCpltCallback+0x64>)
 8000ee6:	f002 ff00 	bl	8003cea <HAL_UART_Receive_IT>
	}
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40004400 	.word	0x40004400
 8000ef8:	20000205 	.word	0x20000205
 8000efc:	20000204 	.word	0x20000204
 8000f00:	20000274 	.word	0x20000274
 8000f04:	20000206 	.word	0x20000206
 8000f08:	200002dc 	.word	0x200002dc

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f10:	f000 fb9a 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f14:	f000 f834 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f18:	f000 f936 	bl	8001188 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f1c:	f000 f880 	bl	8001020 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f20:	f000 f908 	bl	8001134 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f24:	f000 f8ba 	bl	800109c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f28:	480f      	ldr	r0, [pc, #60]	; (8000f68 <main+0x5c>)
 8000f2a:	f002 fa6b 	bl	8003404 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (&huart2 , &temp , 1) ;
 8000f2e:	2201      	movs	r2, #1
 8000f30:	490e      	ldr	r1, [pc, #56]	; (8000f6c <main+0x60>)
 8000f32:	480f      	ldr	r0, [pc, #60]	; (8000f70 <main+0x64>)
 8000f34:	f002 fed9 	bl	8003cea <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000f38:	2120      	movs	r1, #32
 8000f3a:	480e      	ldr	r0, [pc, #56]	; (8000f74 <main+0x68>)
 8000f3c:	f001 fc64 	bl	8002808 <HAL_GPIO_TogglePin>
	  if(buffer_flag == 1){
 8000f40:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <main+0x6c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d107      	bne.n	8000f58 <main+0x4c>
		  command_parser_fsm(index_buffer);
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <main+0x70>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fe23 	bl	8000b98 <command_parser_fsm>
		  buffer_flag = 0;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <main+0x6c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
	  }
	  uart_communication_fsm();
 8000f58:	f7ff fdc4 	bl	8000ae4 <uart_communication_fsm>

	  HAL_Delay(500);
 8000f5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f60:	f000 fbd4 	bl	800170c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000f64:	e7e8      	b.n	8000f38 <main+0x2c>
 8000f66:	bf00      	nop
 8000f68:	20000294 	.word	0x20000294
 8000f6c:	20000204 	.word	0x20000204
 8000f70:	200002dc 	.word	0x200002dc
 8000f74:	40010800 	.word	0x40010800
 8000f78:	20000206 	.word	0x20000206
 8000f7c:	20000205 	.word	0x20000205

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b094      	sub	sp, #80	; 0x50
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f8a:	2228      	movs	r2, #40	; 0x28
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f003 fb2e 	bl	80045f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb8:	2310      	movs	r3, #16
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f001 fc39 	bl	800283c <HAL_RCC_OscConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000fd0:	f000 f916 	bl	8001200 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 fea4 	bl	8002d3c <HAL_RCC_ClockConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ffa:	f000 f901 	bl	8001200 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ffe:	2302      	movs	r3, #2
 8001000:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	4618      	mov	r0, r3
 800100a:	f002 f831 	bl	8003070 <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001014:	f000 f8f4 	bl	8001200 <Error_Handler>
  }
}
 8001018:	bf00      	nop
 800101a:	3750      	adds	r7, #80	; 0x50
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_ADC1_Init+0x74>)
 8001032:	4a19      	ldr	r2, [pc, #100]	; (8001098 <MX_ADC1_Init+0x78>)
 8001034:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_ADC1_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_ADC1_Init+0x74>)
 800103e:	2201      	movs	r2, #1
 8001040:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_ADC1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_ADC1_Init+0x74>)
 800104a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800104e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_ADC1_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_ADC1_Init+0x74>)
 8001058:	2201      	movs	r2, #1
 800105a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <MX_ADC1_Init+0x74>)
 800105e:	f000 fb79 	bl	8001754 <HAL_ADC_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001068:	f000 f8ca 	bl	8001200 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001070:	2301      	movs	r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_ADC1_Init+0x74>)
 800107e:	f000 fed7 	bl	8001e30 <HAL_ADC_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001088:	f000 f8ba 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000244 	.word	0x20000244
 8001098:	40012400 	.word	0x40012400

0800109c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_TIM2_Init+0x94>)
 80010ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_TIM2_Init+0x94>)
 80010c2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_TIM2_Init+0x94>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_TIM2_Init+0x94>)
 80010d0:	2209      	movs	r2, #9
 80010d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_TIM2_Init+0x94>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_TIM2_Init+0x94>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e0:	4813      	ldr	r0, [pc, #76]	; (8001130 <MX_TIM2_Init+0x94>)
 80010e2:	f002 f93f 	bl	8003364 <HAL_TIM_Base_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010ec:	f000 f888 	bl	8001200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	4619      	mov	r1, r3
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <MX_TIM2_Init+0x94>)
 80010fe:	f002 fad5 	bl	80036ac <HAL_TIM_ConfigClockSource>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001108:	f000 f87a 	bl	8001200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_TIM2_Init+0x94>)
 800111a:	f002 fc9d 	bl	8003a58 <HAL_TIMEx_MasterConfigSynchronization>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001124:	f000 f86c 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000294 	.word	0x20000294

08001134 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <MX_USART2_UART_Init+0x50>)
 800113c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001140:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001144:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800116c:	f002 fcde 	bl	8003b2c <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001176:	f000 f843 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200002dc 	.word	0x200002dc
 8001184:	40004400 	.word	0x40004400

08001188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_GPIO_Init+0x5c>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <MX_GPIO_Init+0x5c>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_GPIO_Init+0x5c>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2120      	movs	r1, #32
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <MX_GPIO_Init+0x60>)
 80011ba:	f001 fb0d 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80011be:	2320      	movs	r3, #32
 80011c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2302      	movs	r3, #2
 80011cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	4619      	mov	r1, r3
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_GPIO_Init+0x60>)
 80011d6:	f001 f985 	bl	80024e4 <HAL_GPIO_Init>

}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010800 	.word	0x40010800

080011ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	timerRun();
 80011f4:	f7ff fc5c 	bl	8000ab0 <timerRun>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001208:	e7fe      	b.n	8001208 <Error_Handler+0x8>
	...

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_MspInit+0x5c>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	4a14      	ldr	r2, [pc, #80]	; (8001268 <HAL_MspInit+0x5c>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6193      	str	r3, [r2, #24]
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_MspInit+0x5c>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_MspInit+0x5c>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <HAL_MspInit+0x5c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	61d3      	str	r3, [r2, #28]
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_MspInit+0x5c>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_MspInit+0x60>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_MspInit+0x60>)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	40021000 	.word	0x40021000
 800126c:	40010000 	.word	0x40010000

08001270 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a18      	ldr	r2, [pc, #96]	; (80012ec <HAL_ADC_MspInit+0x7c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d129      	bne.n	80012e4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_ADC_MspInit+0x80>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <HAL_ADC_MspInit+0x80>)
 8001296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_ADC_MspInit+0x80>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_ADC_MspInit+0x80>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_ADC_MspInit+0x80>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_ADC_MspInit+0x80>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012c0:	2301      	movs	r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c4:	2303      	movs	r3, #3
 80012c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	4809      	ldr	r0, [pc, #36]	; (80012f4 <HAL_ADC_MspInit+0x84>)
 80012d0:	f001 f908 	bl	80024e4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	2012      	movs	r0, #18
 80012da:	f001 f81c 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012de:	2012      	movs	r0, #18
 80012e0:	f001 f835 	bl	800234e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012e4:	bf00      	nop
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40012400 	.word	0x40012400
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010800 	.word	0x40010800

080012f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001308:	d113      	bne.n	8001332 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_TIM_Base_MspInit+0x44>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <HAL_TIM_Base_MspInit+0x44>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	61d3      	str	r3, [r2, #28]
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_TIM_Base_MspInit+0x44>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	201c      	movs	r0, #28
 8001328:	f000 fff5 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800132c:	201c      	movs	r0, #28
 800132e:	f001 f80e 	bl	800234e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000

08001340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a1f      	ldr	r2, [pc, #124]	; (80013d8 <HAL_UART_MspInit+0x98>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d137      	bne.n	80013d0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <HAL_UART_MspInit+0x9c>)
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_UART_MspInit+0x9c>)
 8001366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136a:	61d3      	str	r3, [r2, #28]
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_UART_MspInit+0x9c>)
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_UART_MspInit+0x9c>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a17      	ldr	r2, [pc, #92]	; (80013dc <HAL_UART_MspInit+0x9c>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_UART_MspInit+0x9c>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001390:	2304      	movs	r3, #4
 8001392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	480f      	ldr	r0, [pc, #60]	; (80013e0 <HAL_UART_MspInit+0xa0>)
 80013a4:	f001 f89e 	bl	80024e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013a8:	2308      	movs	r3, #8
 80013aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	4809      	ldr	r0, [pc, #36]	; (80013e0 <HAL_UART_MspInit+0xa0>)
 80013bc:	f001 f892 	bl	80024e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	2026      	movs	r0, #38	; 0x26
 80013c6:	f000 ffa6 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013ca:	2026      	movs	r0, #38	; 0x26
 80013cc:	f000 ffbf 	bl	800234e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40004400 	.word	0x40004400
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010800 	.word	0x40010800

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142a:	f000 f953 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <ADC1_2_IRQHandler+0x10>)
 800143a:	f000 fc23 	bl	8001c84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000244 	.word	0x20000244

08001448 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <TIM2_IRQHandler+0x10>)
 800144e:	f002 f825 	bl	800349c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000294 	.word	0x20000294

0800145c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <USART2_IRQHandler+0x10>)
 8001462:	f002 fc73 	bl	8003d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200002dc 	.word	0x200002dc

08001470 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	return 1;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <_kill>:

int _kill(int pid, int sig)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001488:	f003 f888 	bl	800459c <__errno>
 800148c:	4603      	mov	r3, r0
 800148e:	2216      	movs	r2, #22
 8001490:	601a      	str	r2, [r3, #0]
	return -1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_exit>:

void _exit (int status)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014a6:	f04f 31ff 	mov.w	r1, #4294967295
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffe7 	bl	800147e <_kill>
	while (1) {}		/* Make sure we hang here */
 80014b0:	e7fe      	b.n	80014b0 <_exit+0x12>

080014b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e00a      	b.n	80014da <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014c4:	f3af 8000 	nop.w
 80014c8:	4601      	mov	r1, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	60ba      	str	r2, [r7, #8]
 80014d0:	b2ca      	uxtb	r2, r1
 80014d2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3301      	adds	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	dbf0      	blt.n	80014c4 <_read+0x12>
	}

return len;
 80014e2:	687b      	ldr	r3, [r7, #4]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e009      	b.n	8001512 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	60ba      	str	r2, [r7, #8]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	429a      	cmp	r2, r3
 8001518:	dbf1      	blt.n	80014fe <_write+0x12>
	}
	return len;
 800151a:	687b      	ldr	r3, [r7, #4]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_close>:

int _close(int file)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	return -1;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154a:	605a      	str	r2, [r3, #4]
	return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <_isatty>:

int _isatty(int file)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	return 1;
 8001560:	2301      	movs	r3, #1
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
	return 0;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f002 fff2 	bl	800459c <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20002800 	.word	0x20002800
 80015e4:	00000400 	.word	0x00000400
 80015e8:	2000020c 	.word	0x2000020c
 80015ec:	20000338 	.word	0x20000338

080015f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fe:	490d      	ldr	r1, [pc, #52]	; (8001634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001614:	4c0a      	ldr	r4, [pc, #40]	; (8001640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001622:	f7ff ffe5 	bl	80015f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001626:	f002 ffbf 	bl	80045a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162a:	f7ff fc6f 	bl	8000f0c <main>
  bx lr
 800162e:	4770      	bx	lr
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001638:	0800780c 	.word	0x0800780c
  ldr r2, =_sbss
 800163c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001640:	20000334 	.word	0x20000334

08001644 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <CAN1_RX1_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_Init+0x28>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_Init+0x28>)
 8001652:	f043 0310 	orr.w	r3, r3, #16
 8001656:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001658:	2003      	movs	r0, #3
 800165a:	f000 fe51 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165e:	200f      	movs	r0, #15
 8001660:	f000 f808 	bl	8001674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001664:	f7ff fdd2 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40022000 	.word	0x40022000

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x54>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x58>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168a:	fbb3 f3f1 	udiv	r3, r3, r1
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fe69 	bl	800236a <HAL_SYSTICK_Config>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e00e      	b.n	80016c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d80a      	bhi.n	80016be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f000 fe31 	bl	8002316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b4:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_InitTick+0x5c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000010 	.word	0x20000010
 80016d0:	2000000c 	.word	0x2000000c

080016d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_IncTick+0x1c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_IncTick+0x20>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a03      	ldr	r2, [pc, #12]	; (80016f4 <HAL_IncTick+0x20>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	20000010 	.word	0x20000010
 80016f4:	20000320 	.word	0x20000320

080016f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b02      	ldr	r3, [pc, #8]	; (8001708 <HAL_GetTick+0x10>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	20000320 	.word	0x20000320

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff fff0 	bl	80016f8 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffe0 	bl	80016f8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000010 	.word	0x20000010

08001754 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0be      	b.n	80018f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	2b00      	cmp	r3, #0
 8001782:	d109      	bne.n	8001798 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fd6c 	bl	8001270 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 fc9b 	bl	80020d4 <ADC_ConversionStop_Disable>
 800179e:	4603      	mov	r3, r0
 80017a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 8099 	bne.w	80018e2 <HAL_ADC_Init+0x18e>
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f040 8095 	bne.w	80018e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017c0:	f023 0302 	bic.w	r3, r3, #2
 80017c4:	f043 0202 	orr.w	r2, r3, #2
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7b1b      	ldrb	r3, [r3, #12]
 80017da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017ec:	d003      	beq.n	80017f6 <HAL_ADC_Init+0xa2>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d102      	bne.n	80017fc <HAL_ADC_Init+0xa8>
 80017f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fa:	e000      	b.n	80017fe <HAL_ADC_Init+0xaa>
 80017fc:	2300      	movs	r3, #0
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7d1b      	ldrb	r3, [r3, #20]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d119      	bne.n	8001840 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	7b1b      	ldrb	r3, [r3, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d109      	bne.n	8001828 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	3b01      	subs	r3, #1
 800181a:	035a      	lsls	r2, r3, #13
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	e00b      	b.n	8001840 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	f043 0220 	orr.w	r2, r3, #32
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	f043 0201 	orr.w	r2, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	430a      	orrs	r2, r1
 8001852:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	4b28      	ldr	r3, [pc, #160]	; (80018fc <HAL_ADC_Init+0x1a8>)
 800185c:	4013      	ands	r3, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	68b9      	ldr	r1, [r7, #8]
 8001864:	430b      	orrs	r3, r1
 8001866:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001870:	d003      	beq.n	800187a <HAL_ADC_Init+0x126>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d104      	bne.n	8001884 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	3b01      	subs	r3, #1
 8001880:	051b      	lsls	r3, r3, #20
 8001882:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	430a      	orrs	r2, r1
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_ADC_Init+0x1ac>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d10b      	bne.n	80018c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b2:	f023 0303 	bic.w	r3, r3, #3
 80018b6:	f043 0201 	orr.w	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018be:	e018      	b.n	80018f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	f023 0312 	bic.w	r3, r3, #18
 80018c8:	f043 0210 	orr.w	r2, r3, #16
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	f043 0201 	orr.w	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018e0:	e007      	b.n	80018f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	f043 0210 	orr.w	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	ffe1f7fd 	.word	0xffe1f7fd
 8001900:	ff1f0efe 	.word	0xff1f0efe

08001904 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_ADC_Start+0x1a>
 800191a:	2302      	movs	r3, #2
 800191c:	e098      	b.n	8001a50 <HAL_ADC_Start+0x14c>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 fb7a 	bl	8002020 <ADC_Enable>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f040 8087 	bne.w	8001a46 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a41      	ldr	r2, [pc, #260]	; (8001a58 <HAL_ADC_Start+0x154>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d105      	bne.n	8001962 <HAL_ADC_Start+0x5e>
 8001956:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <HAL_ADC_Start+0x158>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d115      	bne.n	800198e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d026      	beq.n	80019ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001984:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800198c:	e01d      	b.n	80019ca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a2f      	ldr	r2, [pc, #188]	; (8001a5c <HAL_ADC_Start+0x158>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d004      	beq.n	80019ae <HAL_ADC_Start+0xaa>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a2b      	ldr	r2, [pc, #172]	; (8001a58 <HAL_ADC_Start+0x154>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d10d      	bne.n	80019ca <HAL_ADC_Start+0xc6>
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_ADC_Start+0x158>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d006      	beq.n	80019e4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	f023 0206 	bic.w	r2, r3, #6
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80019e2:	e002      	b.n	80019ea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f06f 0202 	mvn.w	r2, #2
 80019fa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a06:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a0a:	d113      	bne.n	8001a34 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a10:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <HAL_ADC_Start+0x154>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d105      	bne.n	8001a22 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_ADC_Start+0x158>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d108      	bne.n	8001a34 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	e00c      	b.n	8001a4e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	e003      	b.n	8001a4e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40012800 	.word	0x40012800
 8001a5c:	40012400 	.word	0x40012400

08001a60 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a76:	f7ff fe3f 	bl	80016f8 <HAL_GetTick>
 8001a7a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	f043 0220 	orr.w	r2, r3, #32
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0d3      	b.n	8001c4a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d131      	bne.n	8001b14 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d12a      	bne.n	8001b14 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001abe:	e021      	b.n	8001b04 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac6:	d01d      	beq.n	8001b04 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d007      	beq.n	8001ade <HAL_ADC_PollForConversion+0x7e>
 8001ace:	f7ff fe13 	bl	80016f8 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d212      	bcs.n	8001b04 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10b      	bne.n	8001b04 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f043 0204 	orr.w	r2, r3, #4
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e0a2      	b.n	8001c4a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0d6      	beq.n	8001ac0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b12:	e070      	b.n	8001bf6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001b14:	4b4f      	ldr	r3, [pc, #316]	; (8001c54 <HAL_ADC_PollForConversion+0x1f4>)
 8001b16:	681c      	ldr	r4, [r3, #0]
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f001 fb5f 	bl	80031dc <HAL_RCCEx_GetPeriphCLKFreq>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6919      	ldr	r1, [r3, #16]
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <HAL_ADC_PollForConversion+0x1f8>)
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d118      	bne.n	8001b64 <HAL_ADC_PollForConversion+0x104>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68d9      	ldr	r1, [r3, #12]
 8001b38:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <HAL_ADC_PollForConversion+0x1fc>)
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d111      	bne.n	8001b64 <HAL_ADC_PollForConversion+0x104>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6919      	ldr	r1, [r3, #16]
 8001b46:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <HAL_ADC_PollForConversion+0x200>)
 8001b48:	400b      	ands	r3, r1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d108      	bne.n	8001b60 <HAL_ADC_PollForConversion+0x100>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68d9      	ldr	r1, [r3, #12]
 8001b54:	4b43      	ldr	r3, [pc, #268]	; (8001c64 <HAL_ADC_PollForConversion+0x204>)
 8001b56:	400b      	ands	r3, r1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADC_PollForConversion+0x100>
 8001b5c:	2314      	movs	r3, #20
 8001b5e:	e020      	b.n	8001ba2 <HAL_ADC_PollForConversion+0x142>
 8001b60:	2329      	movs	r3, #41	; 0x29
 8001b62:	e01e      	b.n	8001ba2 <HAL_ADC_PollForConversion+0x142>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6919      	ldr	r1, [r3, #16]
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <HAL_ADC_PollForConversion+0x200>)
 8001b6c:	400b      	ands	r3, r1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_ADC_PollForConversion+0x120>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68d9      	ldr	r1, [r3, #12]
 8001b78:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <HAL_ADC_PollForConversion+0x204>)
 8001b7a:	400b      	ands	r3, r1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00d      	beq.n	8001b9c <HAL_ADC_PollForConversion+0x13c>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6919      	ldr	r1, [r3, #16]
 8001b86:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <HAL_ADC_PollForConversion+0x208>)
 8001b88:	400b      	ands	r3, r1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d108      	bne.n	8001ba0 <HAL_ADC_PollForConversion+0x140>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68d9      	ldr	r1, [r3, #12]
 8001b94:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <HAL_ADC_PollForConversion+0x208>)
 8001b96:	400b      	ands	r3, r1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_PollForConversion+0x140>
 8001b9c:	2354      	movs	r3, #84	; 0x54
 8001b9e:	e000      	b.n	8001ba2 <HAL_ADC_PollForConversion+0x142>
 8001ba0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001ba2:	fb02 f303 	mul.w	r3, r2, r3
 8001ba6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ba8:	e021      	b.n	8001bee <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb0:	d01a      	beq.n	8001be8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <HAL_ADC_PollForConversion+0x168>
 8001bb8:	f7ff fd9e 	bl	80016f8 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d20f      	bcs.n	8001be8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d90b      	bls.n	8001be8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	f043 0204 	orr.w	r2, r3, #4
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e030      	b.n	8001c4a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3301      	adds	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d8d9      	bhi.n	8001baa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f06f 0212 	mvn.w	r2, #18
 8001bfe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c1a:	d115      	bne.n	8001c48 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d111      	bne.n	8001c48 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d105      	bne.n	8001c48 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd90      	pop	{r4, r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008
 8001c58:	24924924 	.word	0x24924924
 8001c5c:	00924924 	.word	0x00924924
 8001c60:	12492492 	.word	0x12492492
 8001c64:	00492492 	.word	0x00492492
 8001c68:	00249249 	.word	0x00249249

08001c6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d140      	bne.n	8001d1c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d139      	bne.n	8001d1c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cce:	d11d      	bne.n	8001d0c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d119      	bne.n	8001d0c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0220 	bic.w	r2, r2, #32
 8001ce6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f87c 	bl	8001e0a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f06f 0212 	mvn.w	r2, #18
 8001d1a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d26:	2b80      	cmp	r3, #128	; 0x80
 8001d28:	d14f      	bne.n	8001dca <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d148      	bne.n	8001dca <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001d5a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001d5e:	d012      	beq.n	8001d86 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d125      	bne.n	8001dba <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001d78:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d7c:	d11d      	bne.n	8001dba <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d119      	bne.n	8001dba <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d94:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d105      	bne.n	8001dba <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f9cb 	bl	8002156 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 020c 	mvn.w	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd4:	2b40      	cmp	r3, #64	; 0x40
 8001dd6:	d114      	bne.n	8001e02 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d10d      	bne.n	8001e02 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f812 	bl	8001e1c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0201 	mvn.w	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x20>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e0dc      	b.n	800200a <HAL_ADC_ConfigChannel+0x1da>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	d81c      	bhi.n	8001e9a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b05      	subs	r3, #5
 8001e72:	221f      	movs	r2, #31
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4019      	ands	r1, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b05      	subs	r3, #5
 8001e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	635a      	str	r2, [r3, #52]	; 0x34
 8001e98:	e03c      	b.n	8001f14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d81c      	bhi.n	8001edc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3b23      	subs	r3, #35	; 0x23
 8001eb4:	221f      	movs	r2, #31
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	4019      	ands	r1, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b23      	subs	r3, #35	; 0x23
 8001ece:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eda:	e01b      	b.n	8001f14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	3b41      	subs	r3, #65	; 0x41
 8001eee:	221f      	movs	r2, #31
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	4019      	ands	r1, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	3b41      	subs	r3, #65	; 0x41
 8001f08:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b09      	cmp	r3, #9
 8001f1a:	d91c      	bls.n	8001f56 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68d9      	ldr	r1, [r3, #12]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b1e      	subs	r3, #30
 8001f2e:	2207      	movs	r2, #7
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	4019      	ands	r1, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6898      	ldr	r0, [r3, #8]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	3b1e      	subs	r3, #30
 8001f48:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	60da      	str	r2, [r3, #12]
 8001f54:	e019      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6919      	ldr	r1, [r3, #16]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	2207      	movs	r2, #7
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	4019      	ands	r1, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6898      	ldr	r0, [r3, #8]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d003      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f96:	2b11      	cmp	r3, #17
 8001f98:	d132      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <HAL_ADC_ConfigChannel+0x1e4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d125      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d126      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fc0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b10      	cmp	r3, #16
 8001fc8:	d11a      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a13      	ldr	r2, [pc, #76]	; (800201c <HAL_ADC_ConfigChannel+0x1ec>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	0c9a      	lsrs	r2, r3, #18
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fe0:	e002      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f9      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x1b2>
 8001fee:	e007      	b.n	8002000 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	f043 0220 	orr.w	r2, r3, #32
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40012400 	.word	0x40012400
 8002018:	20000008 	.word	0x20000008
 800201c:	431bde83 	.word	0x431bde83

08002020 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d040      	beq.n	80020c0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800204e:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <ADC_Enable+0xac>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <ADC_Enable+0xb0>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	0c9b      	lsrs	r3, r3, #18
 800205a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800205c:	e002      	b.n	8002064 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	3b01      	subs	r3, #1
 8002062:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f9      	bne.n	800205e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800206a:	f7ff fb45 	bl	80016f8 <HAL_GetTick>
 800206e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002070:	e01f      	b.n	80020b2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002072:	f7ff fb41 	bl	80016f8 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d918      	bls.n	80020b2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d011      	beq.n	80020b2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	f043 0210 	orr.w	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e007      	b.n	80020c2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d1d8      	bne.n	8002072 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000008 	.word	0x20000008
 80020d0:	431bde83 	.word	0x431bde83

080020d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d12e      	bne.n	800214c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0201 	bic.w	r2, r2, #1
 80020fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020fe:	f7ff fafb 	bl	80016f8 <HAL_GetTick>
 8002102:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002104:	e01b      	b.n	800213e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002106:	f7ff faf7 	bl	80016f8 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d914      	bls.n	800213e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d10d      	bne.n	800213e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	f043 0210 	orr.w	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e007      	b.n	800214e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d0dc      	beq.n	8002106 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4906      	ldr	r1, [pc, #24]	; (8002200 <__NVIC_EnableIRQ+0x34>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100

08002204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	6039      	str	r1, [r7, #0]
 800220e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	db0a      	blt.n	800222e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	490c      	ldr	r1, [pc, #48]	; (8002250 <__NVIC_SetPriority+0x4c>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	0112      	lsls	r2, r2, #4
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	440b      	add	r3, r1
 8002228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800222c:	e00a      	b.n	8002244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4908      	ldr	r1, [pc, #32]	; (8002254 <__NVIC_SetPriority+0x50>)
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	3b04      	subs	r3, #4
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	440b      	add	r3, r1
 8002242:	761a      	strb	r2, [r3, #24]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f1c3 0307 	rsb	r3, r3, #7
 8002272:	2b04      	cmp	r3, #4
 8002274:	bf28      	it	cs
 8002276:	2304      	movcs	r3, #4
 8002278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3304      	adds	r3, #4
 800227e:	2b06      	cmp	r3, #6
 8002280:	d902      	bls.n	8002288 <NVIC_EncodePriority+0x30>
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3b03      	subs	r3, #3
 8002286:	e000      	b.n	800228a <NVIC_EncodePriority+0x32>
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	f04f 32ff 	mov.w	r2, #4294967295
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43da      	mvns	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	401a      	ands	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a0:	f04f 31ff 	mov.w	r1, #4294967295
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	43d9      	mvns	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	4313      	orrs	r3, r2
         );
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022cc:	d301      	bcc.n	80022d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00f      	b.n	80022f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <SysTick_Config+0x40>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022da:	210f      	movs	r1, #15
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f7ff ff90 	bl	8002204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SysTick_Config+0x40>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <SysTick_Config+0x40>)
 80022ec:	2207      	movs	r2, #7
 80022ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	e000e010 	.word	0xe000e010

08002300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff2d 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002328:	f7ff ff42 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 800232c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff ff90 	bl	8002258 <NVIC_EncodePriority>
 8002338:	4602      	mov	r2, r0
 800233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff5f 	bl	8002204 <__NVIC_SetPriority>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff35 	bl	80021cc <__NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ffa2 	bl	80022bc <SysTick_Config>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002394:	2b02      	cmp	r3, #2
 8002396:	d008      	beq.n	80023aa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2204      	movs	r2, #4
 800239c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e020      	b.n	80023ec <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 020e 	bic.w	r2, r2, #14
 80023b8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0201 	bic.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f202 	lsl.w	r2, r1, r2
 80023d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
	...

080023f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800240a:	2b02      	cmp	r3, #2
 800240c:	d005      	beq.n	800241a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2204      	movs	r2, #4
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	e051      	b.n	80024be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 020e 	bic.w	r2, r2, #14
 8002428:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a22      	ldr	r2, [pc, #136]	; (80024c8 <HAL_DMA_Abort_IT+0xd0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d029      	beq.n	8002498 <HAL_DMA_Abort_IT+0xa0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a20      	ldr	r2, [pc, #128]	; (80024cc <HAL_DMA_Abort_IT+0xd4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d022      	beq.n	8002494 <HAL_DMA_Abort_IT+0x9c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1f      	ldr	r2, [pc, #124]	; (80024d0 <HAL_DMA_Abort_IT+0xd8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d01a      	beq.n	800248e <HAL_DMA_Abort_IT+0x96>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_DMA_Abort_IT+0xdc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d012      	beq.n	8002488 <HAL_DMA_Abort_IT+0x90>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1c      	ldr	r2, [pc, #112]	; (80024d8 <HAL_DMA_Abort_IT+0xe0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00a      	beq.n	8002482 <HAL_DMA_Abort_IT+0x8a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a1a      	ldr	r2, [pc, #104]	; (80024dc <HAL_DMA_Abort_IT+0xe4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d102      	bne.n	800247c <HAL_DMA_Abort_IT+0x84>
 8002476:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800247a:	e00e      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 800247c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002480:	e00b      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 8002482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002486:	e008      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 8002488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248c:	e005      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 800248e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002492:	e002      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 8002494:	2310      	movs	r3, #16
 8002496:	e000      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 8002498:	2301      	movs	r3, #1
 800249a:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <HAL_DMA_Abort_IT+0xe8>)
 800249c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
    } 
  }
  return status;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40020008 	.word	0x40020008
 80024cc:	4002001c 	.word	0x4002001c
 80024d0:	40020030 	.word	0x40020030
 80024d4:	40020044 	.word	0x40020044
 80024d8:	40020058 	.word	0x40020058
 80024dc:	4002006c 	.word	0x4002006c
 80024e0:	40020000 	.word	0x40020000

080024e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b08b      	sub	sp, #44	; 0x2c
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f6:	e148      	b.n	800278a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024f8:	2201      	movs	r2, #1
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	429a      	cmp	r2, r3
 8002512:	f040 8137 	bne.w	8002784 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	4aa3      	ldr	r2, [pc, #652]	; (80027a8 <HAL_GPIO_Init+0x2c4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d05e      	beq.n	80025de <HAL_GPIO_Init+0xfa>
 8002520:	4aa1      	ldr	r2, [pc, #644]	; (80027a8 <HAL_GPIO_Init+0x2c4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d875      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 8002526:	4aa1      	ldr	r2, [pc, #644]	; (80027ac <HAL_GPIO_Init+0x2c8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d058      	beq.n	80025de <HAL_GPIO_Init+0xfa>
 800252c:	4a9f      	ldr	r2, [pc, #636]	; (80027ac <HAL_GPIO_Init+0x2c8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d86f      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 8002532:	4a9f      	ldr	r2, [pc, #636]	; (80027b0 <HAL_GPIO_Init+0x2cc>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d052      	beq.n	80025de <HAL_GPIO_Init+0xfa>
 8002538:	4a9d      	ldr	r2, [pc, #628]	; (80027b0 <HAL_GPIO_Init+0x2cc>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d869      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 800253e:	4a9d      	ldr	r2, [pc, #628]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d04c      	beq.n	80025de <HAL_GPIO_Init+0xfa>
 8002544:	4a9b      	ldr	r2, [pc, #620]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d863      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 800254a:	4a9b      	ldr	r2, [pc, #620]	; (80027b8 <HAL_GPIO_Init+0x2d4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d046      	beq.n	80025de <HAL_GPIO_Init+0xfa>
 8002550:	4a99      	ldr	r2, [pc, #612]	; (80027b8 <HAL_GPIO_Init+0x2d4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d85d      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 8002556:	2b12      	cmp	r3, #18
 8002558:	d82a      	bhi.n	80025b0 <HAL_GPIO_Init+0xcc>
 800255a:	2b12      	cmp	r3, #18
 800255c:	d859      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 800255e:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <HAL_GPIO_Init+0x80>)
 8002560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002564:	080025df 	.word	0x080025df
 8002568:	080025b9 	.word	0x080025b9
 800256c:	080025cb 	.word	0x080025cb
 8002570:	0800260d 	.word	0x0800260d
 8002574:	08002613 	.word	0x08002613
 8002578:	08002613 	.word	0x08002613
 800257c:	08002613 	.word	0x08002613
 8002580:	08002613 	.word	0x08002613
 8002584:	08002613 	.word	0x08002613
 8002588:	08002613 	.word	0x08002613
 800258c:	08002613 	.word	0x08002613
 8002590:	08002613 	.word	0x08002613
 8002594:	08002613 	.word	0x08002613
 8002598:	08002613 	.word	0x08002613
 800259c:	08002613 	.word	0x08002613
 80025a0:	08002613 	.word	0x08002613
 80025a4:	08002613 	.word	0x08002613
 80025a8:	080025c1 	.word	0x080025c1
 80025ac:	080025d5 	.word	0x080025d5
 80025b0:	4a82      	ldr	r2, [pc, #520]	; (80027bc <HAL_GPIO_Init+0x2d8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025b6:	e02c      	b.n	8002612 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	623b      	str	r3, [r7, #32]
          break;
 80025be:	e029      	b.n	8002614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	3304      	adds	r3, #4
 80025c6:	623b      	str	r3, [r7, #32]
          break;
 80025c8:	e024      	b.n	8002614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	3308      	adds	r3, #8
 80025d0:	623b      	str	r3, [r7, #32]
          break;
 80025d2:	e01f      	b.n	8002614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	330c      	adds	r3, #12
 80025da:	623b      	str	r3, [r7, #32]
          break;
 80025dc:	e01a      	b.n	8002614 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d102      	bne.n	80025ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025e6:	2304      	movs	r3, #4
 80025e8:	623b      	str	r3, [r7, #32]
          break;
 80025ea:	e013      	b.n	8002614 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d105      	bne.n	8002600 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025f4:	2308      	movs	r3, #8
 80025f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	611a      	str	r2, [r3, #16]
          break;
 80025fe:	e009      	b.n	8002614 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002600:	2308      	movs	r3, #8
 8002602:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	615a      	str	r2, [r3, #20]
          break;
 800260a:	e003      	b.n	8002614 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800260c:	2300      	movs	r3, #0
 800260e:	623b      	str	r3, [r7, #32]
          break;
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x130>
          break;
 8002612:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2bff      	cmp	r3, #255	; 0xff
 8002618:	d801      	bhi.n	800261e <HAL_GPIO_Init+0x13a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	e001      	b.n	8002622 <HAL_GPIO_Init+0x13e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3304      	adds	r3, #4
 8002622:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2bff      	cmp	r3, #255	; 0xff
 8002628:	d802      	bhi.n	8002630 <HAL_GPIO_Init+0x14c>
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	e002      	b.n	8002636 <HAL_GPIO_Init+0x152>
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	3b08      	subs	r3, #8
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	210f      	movs	r1, #15
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	401a      	ands	r2, r3
 8002648:	6a39      	ldr	r1, [r7, #32]
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	431a      	orrs	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8090 	beq.w	8002784 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002664:	4b56      	ldr	r3, [pc, #344]	; (80027c0 <HAL_GPIO_Init+0x2dc>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	4a55      	ldr	r2, [pc, #340]	; (80027c0 <HAL_GPIO_Init+0x2dc>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6193      	str	r3, [r2, #24]
 8002670:	4b53      	ldr	r3, [pc, #332]	; (80027c0 <HAL_GPIO_Init+0x2dc>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800267c:	4a51      	ldr	r2, [pc, #324]	; (80027c4 <HAL_GPIO_Init+0x2e0>)
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002688:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	220f      	movs	r2, #15
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4013      	ands	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a49      	ldr	r2, [pc, #292]	; (80027c8 <HAL_GPIO_Init+0x2e4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00d      	beq.n	80026c4 <HAL_GPIO_Init+0x1e0>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a48      	ldr	r2, [pc, #288]	; (80027cc <HAL_GPIO_Init+0x2e8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d007      	beq.n	80026c0 <HAL_GPIO_Init+0x1dc>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a47      	ldr	r2, [pc, #284]	; (80027d0 <HAL_GPIO_Init+0x2ec>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d101      	bne.n	80026bc <HAL_GPIO_Init+0x1d8>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e004      	b.n	80026c6 <HAL_GPIO_Init+0x1e2>
 80026bc:	2303      	movs	r3, #3
 80026be:	e002      	b.n	80026c6 <HAL_GPIO_Init+0x1e2>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <HAL_GPIO_Init+0x1e2>
 80026c4:	2300      	movs	r3, #0
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	f002 0203 	and.w	r2, r2, #3
 80026cc:	0092      	lsls	r2, r2, #2
 80026ce:	4093      	lsls	r3, r2
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026d6:	493b      	ldr	r1, [pc, #236]	; (80027c4 <HAL_GPIO_Init+0x2e0>)
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	3302      	adds	r3, #2
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026f0:	4b38      	ldr	r3, [pc, #224]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4937      	ldr	r1, [pc, #220]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026fe:	4b35      	ldr	r3, [pc, #212]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	43db      	mvns	r3, r3
 8002706:	4933      	ldr	r1, [pc, #204]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 8002708:	4013      	ands	r3, r2
 800270a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d006      	beq.n	8002726 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002718:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	492d      	ldr	r1, [pc, #180]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002726:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	43db      	mvns	r3, r3
 800272e:	4929      	ldr	r1, [pc, #164]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 8002730:	4013      	ands	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d006      	beq.n	800274e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002740:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	4923      	ldr	r1, [pc, #140]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	608b      	str	r3, [r1, #8]
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800274e:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	43db      	mvns	r3, r3
 8002756:	491f      	ldr	r1, [pc, #124]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 8002758:	4013      	ands	r3, r2
 800275a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d006      	beq.n	8002776 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002768:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	4919      	ldr	r1, [pc, #100]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	60cb      	str	r3, [r1, #12]
 8002774:	e006      	b.n	8002784 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002776:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	43db      	mvns	r3, r3
 800277e:	4915      	ldr	r1, [pc, #84]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 8002780:	4013      	ands	r3, r2
 8002782:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	3301      	adds	r3, #1
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	f47f aeaf 	bne.w	80024f8 <HAL_GPIO_Init+0x14>
  }
}
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	372c      	adds	r7, #44	; 0x2c
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	10320000 	.word	0x10320000
 80027ac:	10310000 	.word	0x10310000
 80027b0:	10220000 	.word	0x10220000
 80027b4:	10210000 	.word	0x10210000
 80027b8:	10120000 	.word	0x10120000
 80027bc:	10110000 	.word	0x10110000
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40010000 	.word	0x40010000
 80027c8:	40010800 	.word	0x40010800
 80027cc:	40010c00 	.word	0x40010c00
 80027d0:	40011000 	.word	0x40011000
 80027d4:	40010400 	.word	0x40010400

080027d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
 80027e4:	4613      	mov	r3, r2
 80027e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027e8:	787b      	ldrb	r3, [r7, #1]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027f4:	e003      	b.n	80027fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027f6:	887b      	ldrh	r3, [r7, #2]
 80027f8:	041a      	lsls	r2, r3, #16
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	611a      	str	r2, [r3, #16]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4013      	ands	r3, r2
 8002820:	041a      	lsls	r2, r3, #16
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	43d9      	mvns	r1, r3
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	400b      	ands	r3, r1
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	611a      	str	r2, [r3, #16]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
	...

0800283c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e26c      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8087 	beq.w	800296a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800285c:	4b92      	ldr	r3, [pc, #584]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b04      	cmp	r3, #4
 8002866:	d00c      	beq.n	8002882 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002868:	4b8f      	ldr	r3, [pc, #572]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d112      	bne.n	800289a <HAL_RCC_OscConfig+0x5e>
 8002874:	4b8c      	ldr	r3, [pc, #560]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002880:	d10b      	bne.n	800289a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002882:	4b89      	ldr	r3, [pc, #548]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d06c      	beq.n	8002968 <HAL_RCC_OscConfig+0x12c>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d168      	bne.n	8002968 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e246      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x76>
 80028a4:	4b80      	ldr	r3, [pc, #512]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a7f      	ldr	r2, [pc, #508]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	e02e      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x98>
 80028ba:	4b7b      	ldr	r3, [pc, #492]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7a      	ldr	r2, [pc, #488]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b78      	ldr	r3, [pc, #480]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a77      	ldr	r2, [pc, #476]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e01d      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0xbc>
 80028de:	4b72      	ldr	r3, [pc, #456]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a71      	ldr	r2, [pc, #452]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b6f      	ldr	r3, [pc, #444]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a6e      	ldr	r2, [pc, #440]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e00b      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
 80028f8:	4b6b      	ldr	r3, [pc, #428]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a6a      	ldr	r2, [pc, #424]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b68      	ldr	r3, [pc, #416]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a67      	ldr	r2, [pc, #412]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800290a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7fe feee 	bl	80016f8 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7fe feea 	bl	80016f8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e1fa      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0xe4>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe feda 	bl	80016f8 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002948:	f7fe fed6 	bl	80016f8 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e1e6      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	4b53      	ldr	r3, [pc, #332]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x10c>
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d063      	beq.n	8002a3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002976:	4b4c      	ldr	r3, [pc, #304]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002982:	4b49      	ldr	r3, [pc, #292]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b08      	cmp	r3, #8
 800298c:	d11c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x18c>
 800298e:	4b46      	ldr	r3, [pc, #280]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d116      	bne.n	80029c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299a:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_RCC_OscConfig+0x176>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e1ba      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4939      	ldr	r1, [pc, #228]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	e03a      	b.n	8002a3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d0:	4b36      	ldr	r3, [pc, #216]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d6:	f7fe fe8f 	bl	80016f8 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029de:	f7fe fe8b 	bl	80016f8 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e19b      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fc:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4927      	ldr	r1, [pc, #156]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]
 8002a10:	e015      	b.n	8002a3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a12:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe fe6e 	bl	80016f8 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a20:	f7fe fe6a 	bl	80016f8 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e17a      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d03a      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d019      	beq.n	8002a86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a52:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a58:	f7fe fe4e 	bl	80016f8 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a60:	f7fe fe4a 	bl	80016f8 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e15a      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f000 fad8 	bl	8003034 <RCC_Delay>
 8002a84:	e01c      	b.n	8002ac0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a86:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fe34 	bl	80016f8 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a92:	e00f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a94:	f7fe fe30 	bl	80016f8 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d908      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e140      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	42420000 	.word	0x42420000
 8002ab0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b9e      	ldr	r3, [pc, #632]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1e9      	bne.n	8002a94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a6 	beq.w	8002c1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b97      	ldr	r3, [pc, #604]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10d      	bne.n	8002afa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	4b94      	ldr	r3, [pc, #592]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4a93      	ldr	r2, [pc, #588]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	61d3      	str	r3, [r2, #28]
 8002aea:	4b91      	ldr	r3, [pc, #580]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af6:	2301      	movs	r3, #1
 8002af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	4b8e      	ldr	r3, [pc, #568]	; (8002d34 <HAL_RCC_OscConfig+0x4f8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d118      	bne.n	8002b38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b06:	4b8b      	ldr	r3, [pc, #556]	; (8002d34 <HAL_RCC_OscConfig+0x4f8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a8a      	ldr	r2, [pc, #552]	; (8002d34 <HAL_RCC_OscConfig+0x4f8>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b12:	f7fe fdf1 	bl	80016f8 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1a:	f7fe fded 	bl	80016f8 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b64      	cmp	r3, #100	; 0x64
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0fd      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	4b81      	ldr	r3, [pc, #516]	; (8002d34 <HAL_RCC_OscConfig+0x4f8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCC_OscConfig+0x312>
 8002b40:	4b7b      	ldr	r3, [pc, #492]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a7a      	ldr	r2, [pc, #488]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6213      	str	r3, [r2, #32]
 8002b4c:	e02d      	b.n	8002baa <HAL_RCC_OscConfig+0x36e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x334>
 8002b56:	4b76      	ldr	r3, [pc, #472]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4a75      	ldr	r2, [pc, #468]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	6213      	str	r3, [r2, #32]
 8002b62:	4b73      	ldr	r3, [pc, #460]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a72      	ldr	r2, [pc, #456]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	6213      	str	r3, [r2, #32]
 8002b6e:	e01c      	b.n	8002baa <HAL_RCC_OscConfig+0x36e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d10c      	bne.n	8002b92 <HAL_RCC_OscConfig+0x356>
 8002b78:	4b6d      	ldr	r3, [pc, #436]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	4a6c      	ldr	r2, [pc, #432]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	6213      	str	r3, [r2, #32]
 8002b84:	4b6a      	ldr	r3, [pc, #424]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4a69      	ldr	r2, [pc, #420]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6213      	str	r3, [r2, #32]
 8002b90:	e00b      	b.n	8002baa <HAL_RCC_OscConfig+0x36e>
 8002b92:	4b67      	ldr	r3, [pc, #412]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	4a66      	ldr	r2, [pc, #408]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6213      	str	r3, [r2, #32]
 8002b9e:	4b64      	ldr	r3, [pc, #400]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4a63      	ldr	r2, [pc, #396]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d015      	beq.n	8002bde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fda1 	bl	80016f8 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7fe fd9d 	bl	80016f8 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e0ab      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	4b57      	ldr	r3, [pc, #348]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ee      	beq.n	8002bba <HAL_RCC_OscConfig+0x37e>
 8002bdc:	e014      	b.n	8002c08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bde:	f7fe fd8b 	bl	80016f8 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7fe fd87 	bl	80016f8 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e095      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfc:	4b4c      	ldr	r3, [pc, #304]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1ee      	bne.n	8002be6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0e:	4b48      	ldr	r3, [pc, #288]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4a47      	ldr	r2, [pc, #284]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8081 	beq.w	8002d26 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c24:	4b42      	ldr	r3, [pc, #264]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d061      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d146      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c38:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <HAL_RCC_OscConfig+0x4fc>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fd5b 	bl	80016f8 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c46:	f7fe fd57 	bl	80016f8 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e067      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c58:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f0      	bne.n	8002c46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6c:	d108      	bne.n	8002c80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c6e:	4b30      	ldr	r3, [pc, #192]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	492d      	ldr	r1, [pc, #180]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c80:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a19      	ldr	r1, [r3, #32]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	430b      	orrs	r3, r1
 8002c92:	4927      	ldr	r1, [pc, #156]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c98:	4b27      	ldr	r3, [pc, #156]	; (8002d38 <HAL_RCC_OscConfig+0x4fc>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fd2b 	bl	80016f8 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7fe fd27 	bl	80016f8 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e037      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x46a>
 8002cc4:	e02f      	b.n	8002d26 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <HAL_RCC_OscConfig+0x4fc>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fd14 	bl	80016f8 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe fd10 	bl	80016f8 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e020      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x498>
 8002cf2:	e018      	b.n	8002d26 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e013      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_OscConfig+0x4f4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40007000 	.word	0x40007000
 8002d38:	42420060 	.word	0x42420060

08002d3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0d0      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d50:	4b6a      	ldr	r3, [pc, #424]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d910      	bls.n	8002d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5e:	4b67      	ldr	r3, [pc, #412]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 0207 	bic.w	r2, r3, #7
 8002d66:	4965      	ldr	r1, [pc, #404]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	4b63      	ldr	r3, [pc, #396]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0b8      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d020      	beq.n	8002dce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d98:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a58      	ldr	r2, [pc, #352]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002da2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db0:	4b53      	ldr	r3, [pc, #332]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4a52      	ldr	r2, [pc, #328]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002dba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbc:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	494d      	ldr	r1, [pc, #308]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d040      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d115      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e07f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d107      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfa:	4b41      	ldr	r3, [pc, #260]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e073      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0a:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e06b      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e1a:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f023 0203 	bic.w	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4936      	ldr	r1, [pc, #216]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e2c:	f7fe fc64 	bl	80016f8 <HAL_GetTick>
 8002e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	e00a      	b.n	8002e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e34:	f7fe fc60 	bl	80016f8 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e053      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4a:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 020c 	and.w	r2, r3, #12
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d1eb      	bne.n	8002e34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b27      	ldr	r3, [pc, #156]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d210      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b24      	ldr	r3, [pc, #144]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 0207 	bic.w	r2, r3, #7
 8002e72:	4922      	ldr	r1, [pc, #136]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b20      	ldr	r3, [pc, #128]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e032      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4916      	ldr	r1, [pc, #88]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	490e      	ldr	r1, [pc, #56]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eca:	f000 f821 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	490a      	ldr	r1, [pc, #40]	; (8002f04 <HAL_RCC_ClockConfig+0x1c8>)
 8002edc:	5ccb      	ldrb	r3, [r1, r3]
 8002ede:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee2:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x1cc>)
 8002ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_ClockConfig+0x1d0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe fbc2 	bl	8001674 <HAL_InitTick>

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40022000 	.word	0x40022000
 8002f00:	40021000 	.word	0x40021000
 8002f04:	08007408 	.word	0x08007408
 8002f08:	20000008 	.word	0x20000008
 8002f0c:	2000000c 	.word	0x2000000c

08002f10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f10:	b490      	push	{r4, r7}
 8002f12:	b08a      	sub	sp, #40	; 0x28
 8002f14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f16:	4b2a      	ldr	r3, [pc, #168]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f18:	1d3c      	adds	r4, r7, #4
 8002f1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f20:	f240 2301 	movw	r3, #513	; 0x201
 8002f24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f3a:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d002      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x40>
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d003      	beq.n	8002f56 <HAL_RCC_GetSysClockFreq+0x46>
 8002f4e:	e02d      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f52:	623b      	str	r3, [r7, #32]
      break;
 8002f54:	e02d      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	0c9b      	lsrs	r3, r3, #18
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f62:	4413      	add	r3, r2
 8002f64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f68:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d013      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f74:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	0c5b      	lsrs	r3, r3, #17
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f82:	4413      	add	r3, r2
 8002f84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	4a0e      	ldr	r2, [pc, #56]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8e:	fb02 f203 	mul.w	r2, r2, r3
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9a:	e004      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fa0:	fb02 f303 	mul.w	r3, r2, r3
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	623b      	str	r3, [r7, #32]
      break;
 8002faa:	e002      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fae:	623b      	str	r3, [r7, #32]
      break;
 8002fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3728      	adds	r7, #40	; 0x28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc90      	pop	{r4, r7}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	080073e8 	.word	0x080073e8
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	007a1200 	.word	0x007a1200
 8002fcc:	003d0900 	.word	0x003d0900

08002fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd4:	4b02      	ldr	r3, [pc, #8]	; (8002fe0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	20000008 	.word	0x20000008

08002fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fe8:	f7ff fff2 	bl	8002fd0 <HAL_RCC_GetHCLKFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4903      	ldr	r1, [pc, #12]	; (8003008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	08007418 	.word	0x08007418

0800300c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003010:	f7ff ffde 	bl	8002fd0 <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	0adb      	lsrs	r3, r3, #11
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4903      	ldr	r1, [pc, #12]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	08007418 	.word	0x08007418

08003034 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <RCC_Delay+0x34>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0a      	ldr	r2, [pc, #40]	; (800306c <RCC_Delay+0x38>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	0a5b      	lsrs	r3, r3, #9
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003050:	bf00      	nop
  }
  while (Delay --);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	60fa      	str	r2, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f9      	bne.n	8003050 <RCC_Delay+0x1c>
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	20000008 	.word	0x20000008
 800306c:	10624dd3 	.word	0x10624dd3

08003070 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d07d      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800308c:	2300      	movs	r3, #0
 800308e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003090:	4b4f      	ldr	r3, [pc, #316]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10d      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309c:	4b4c      	ldr	r3, [pc, #304]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	4a4b      	ldr	r2, [pc, #300]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a6:	61d3      	str	r3, [r2, #28]
 80030a8:	4b49      	ldr	r3, [pc, #292]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b4:	2301      	movs	r3, #1
 80030b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	4b46      	ldr	r3, [pc, #280]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d118      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c4:	4b43      	ldr	r3, [pc, #268]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a42      	ldr	r2, [pc, #264]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d0:	f7fe fb12 	bl	80016f8 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d6:	e008      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d8:	f7fe fb0e 	bl	80016f8 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e06d      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	4b3a      	ldr	r3, [pc, #232]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030f6:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d02e      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	429a      	cmp	r2, r3
 8003112:	d027      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003114:	4b2e      	ldr	r3, [pc, #184]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800311e:	4b2e      	ldr	r3, [pc, #184]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003120:	2201      	movs	r2, #1
 8003122:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003124:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800312a:	4a29      	ldr	r2, [pc, #164]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d014      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fe fadd 	bl	80016f8 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe fad9 	bl	80016f8 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e036      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ee      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003164:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4917      	ldr	r1, [pc, #92]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003172:	4313      	orrs	r3, r2
 8003174:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	4a13      	ldr	r2, [pc, #76]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003186:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	490b      	ldr	r1, [pc, #44]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	4904      	ldr	r1, [pc, #16]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40007000 	.word	0x40007000
 80031d8:	42420440 	.word	0x42420440

080031dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b08d      	sub	sp, #52	; 0x34
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031e4:	4b5a      	ldr	r3, [pc, #360]	; (8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80031e6:	f107 040c 	add.w	r4, r7, #12
 80031ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031f0:	f240 2301 	movw	r3, #513	; 0x201
 80031f4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
 80031fa:	2300      	movs	r3, #0
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031fe:	2300      	movs	r3, #0
 8003200:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	2300      	movs	r3, #0
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b10      	cmp	r3, #16
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b10      	cmp	r3, #16
 8003214:	f200 8091 	bhi.w	800333a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d04c      	beq.n	80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d07c      	beq.n	800331e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003224:	e089      	b.n	800333a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003226:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800322c:	4b49      	ldr	r3, [pc, #292]	; (8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8082 	beq.w	800333e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	0c9b      	lsrs	r3, r3, #18
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003246:	4413      	add	r3, r2
 8003248:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800324c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d018      	beq.n	800328a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003258:	4b3e      	ldr	r3, [pc, #248]	; (8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	0c5b      	lsrs	r3, r3, #17
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003266:	4413      	add	r3, r2
 8003268:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00d      	beq.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003278:	4a37      	ldr	r2, [pc, #220]	; (8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003288:	e004      	b.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	4a33      	ldr	r2, [pc, #204]	; (800335c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003294:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800329c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032a0:	d102      	bne.n	80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80032a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80032a6:	e04a      	b.n	800333e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80032a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4a2c      	ldr	r2, [pc, #176]	; (8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	085b      	lsrs	r3, r3, #1
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80032b6:	e042      	b.n	800333e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80032b8:	4b26      	ldr	r3, [pc, #152]	; (8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c8:	d108      	bne.n	80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80032d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032da:	e01f      	b.n	800331c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e6:	d109      	bne.n	80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80032f4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80032f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032fa:	e00f      	b.n	800331c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003306:	d11c      	bne.n	8003342 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d016      	beq.n	8003342 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003314:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003318:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800331a:	e012      	b.n	8003342 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800331c:	e011      	b.n	8003342 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800331e:	f7ff fe75 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 8003322:	4602      	mov	r2, r0
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	0b9b      	lsrs	r3, r3, #14
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	3301      	adds	r3, #1
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	fbb2 f3f3 	udiv	r3, r2, r3
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003338:	e004      	b.n	8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800333a:	bf00      	nop
 800333c:	e002      	b.n	8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800333e:	bf00      	nop
 8003340:	e000      	b.n	8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003342:	bf00      	nop
    }
  }
  return (frequency);
 8003344:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003346:	4618      	mov	r0, r3
 8003348:	3734      	adds	r7, #52	; 0x34
 800334a:	46bd      	mov	sp, r7
 800334c:	bd90      	pop	{r4, r7, pc}
 800334e:	bf00      	nop
 8003350:	080073f8 	.word	0x080073f8
 8003354:	40021000 	.word	0x40021000
 8003358:	007a1200 	.word	0x007a1200
 800335c:	003d0900 	.word	0x003d0900
 8003360:	aaaaaaab 	.word	0xaaaaaaab

08003364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e041      	b.n	80033fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd ffb4 	bl	80012f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3304      	adds	r3, #4
 80033a0:	4619      	mov	r1, r3
 80033a2:	4610      	mov	r0, r2
 80033a4:	f000 fa6a 	bl	800387c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	d001      	beq.n	800341c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e035      	b.n	8003488 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a16      	ldr	r2, [pc, #88]	; (8003494 <HAL_TIM_Base_Start_IT+0x90>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_TIM_Base_Start_IT+0x4e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003446:	d004      	beq.n	8003452 <HAL_TIM_Base_Start_IT+0x4e>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a12      	ldr	r2, [pc, #72]	; (8003498 <HAL_TIM_Base_Start_IT+0x94>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d111      	bne.n	8003476 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b06      	cmp	r3, #6
 8003462:	d010      	beq.n	8003486 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	e007      	b.n	8003486 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40000400 	.word	0x40000400

0800349c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d122      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d11b      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0202 	mvn.w	r2, #2
 80034c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f9b1 	bl	8003846 <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f9a4 	bl	8003834 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f9b3 	bl	8003858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b04      	cmp	r3, #4
 8003504:	d122      	bne.n	800354c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b04      	cmp	r3, #4
 8003512:	d11b      	bne.n	800354c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0204 	mvn.w	r2, #4
 800351c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f987 	bl	8003846 <HAL_TIM_IC_CaptureCallback>
 8003538:	e005      	b.n	8003546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f97a 	bl	8003834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f989 	bl	8003858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b08      	cmp	r3, #8
 8003558:	d122      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b08      	cmp	r3, #8
 8003566:	d11b      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0208 	mvn.w	r2, #8
 8003570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2204      	movs	r2, #4
 8003576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f95d 	bl	8003846 <HAL_TIM_IC_CaptureCallback>
 800358c:	e005      	b.n	800359a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f950 	bl	8003834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f95f 	bl	8003858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d122      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d11b      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0210 	mvn.w	r2, #16
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2208      	movs	r2, #8
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f933 	bl	8003846 <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f926 	bl	8003834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f935 	bl	8003858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d10e      	bne.n	8003620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d107      	bne.n	8003620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0201 	mvn.w	r2, #1
 8003618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd fde6 	bl	80011ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362a:	2b80      	cmp	r3, #128	; 0x80
 800362c:	d10e      	bne.n	800364c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003638:	2b80      	cmp	r3, #128	; 0x80
 800363a:	d107      	bne.n	800364c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fa67 	bl	8003b1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	d10e      	bne.n	8003678 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d107      	bne.n	8003678 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f8f9 	bl	800386a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b20      	cmp	r3, #32
 8003684:	d10e      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b20      	cmp	r3, #32
 8003692:	d107      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0220 	mvn.w	r2, #32
 800369c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fa32 	bl	8003b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_TIM_ConfigClockSource+0x18>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e0b3      	b.n	800382c <HAL_TIM_ConfigClockSource+0x180>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036fc:	d03e      	beq.n	800377c <HAL_TIM_ConfigClockSource+0xd0>
 80036fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003702:	f200 8087 	bhi.w	8003814 <HAL_TIM_ConfigClockSource+0x168>
 8003706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370a:	f000 8085 	beq.w	8003818 <HAL_TIM_ConfigClockSource+0x16c>
 800370e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003712:	d87f      	bhi.n	8003814 <HAL_TIM_ConfigClockSource+0x168>
 8003714:	2b70      	cmp	r3, #112	; 0x70
 8003716:	d01a      	beq.n	800374e <HAL_TIM_ConfigClockSource+0xa2>
 8003718:	2b70      	cmp	r3, #112	; 0x70
 800371a:	d87b      	bhi.n	8003814 <HAL_TIM_ConfigClockSource+0x168>
 800371c:	2b60      	cmp	r3, #96	; 0x60
 800371e:	d050      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x116>
 8003720:	2b60      	cmp	r3, #96	; 0x60
 8003722:	d877      	bhi.n	8003814 <HAL_TIM_ConfigClockSource+0x168>
 8003724:	2b50      	cmp	r3, #80	; 0x50
 8003726:	d03c      	beq.n	80037a2 <HAL_TIM_ConfigClockSource+0xf6>
 8003728:	2b50      	cmp	r3, #80	; 0x50
 800372a:	d873      	bhi.n	8003814 <HAL_TIM_ConfigClockSource+0x168>
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d058      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x136>
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d86f      	bhi.n	8003814 <HAL_TIM_ConfigClockSource+0x168>
 8003734:	2b30      	cmp	r3, #48	; 0x30
 8003736:	d064      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x156>
 8003738:	2b30      	cmp	r3, #48	; 0x30
 800373a:	d86b      	bhi.n	8003814 <HAL_TIM_ConfigClockSource+0x168>
 800373c:	2b20      	cmp	r3, #32
 800373e:	d060      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x156>
 8003740:	2b20      	cmp	r3, #32
 8003742:	d867      	bhi.n	8003814 <HAL_TIM_ConfigClockSource+0x168>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d05c      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x156>
 8003748:	2b10      	cmp	r3, #16
 800374a:	d05a      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800374c:	e062      	b.n	8003814 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	6899      	ldr	r1, [r3, #8]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f000 f95c 	bl	8003a1a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003770:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	609a      	str	r2, [r3, #8]
      break;
 800377a:	e04e      	b.n	800381a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	6899      	ldr	r1, [r3, #8]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f000 f945 	bl	8003a1a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800379e:	609a      	str	r2, [r3, #8]
      break;
 80037a0:	e03b      	b.n	800381a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6859      	ldr	r1, [r3, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	461a      	mov	r2, r3
 80037b0:	f000 f8bc 	bl	800392c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2150      	movs	r1, #80	; 0x50
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f913 	bl	80039e6 <TIM_ITRx_SetConfig>
      break;
 80037c0:	e02b      	b.n	800381a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6859      	ldr	r1, [r3, #4]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	461a      	mov	r2, r3
 80037d0:	f000 f8da 	bl	8003988 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2160      	movs	r1, #96	; 0x60
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f903 	bl	80039e6 <TIM_ITRx_SetConfig>
      break;
 80037e0:	e01b      	b.n	800381a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6859      	ldr	r1, [r3, #4]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f000 f89c 	bl	800392c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2140      	movs	r1, #64	; 0x40
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f8f3 	bl	80039e6 <TIM_ITRx_SetConfig>
      break;
 8003800:	e00b      	b.n	800381a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4619      	mov	r1, r3
 800380c:	4610      	mov	r0, r2
 800380e:	f000 f8ea 	bl	80039e6 <TIM_ITRx_SetConfig>
        break;
 8003812:	e002      	b.n	800381a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003814:	bf00      	nop
 8003816:	e000      	b.n	800381a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003818:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a25      	ldr	r2, [pc, #148]	; (8003924 <TIM_Base_SetConfig+0xa8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d007      	beq.n	80038a4 <TIM_Base_SetConfig+0x28>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389a:	d003      	beq.n	80038a4 <TIM_Base_SetConfig+0x28>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a22      	ldr	r2, [pc, #136]	; (8003928 <TIM_Base_SetConfig+0xac>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d108      	bne.n	80038b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1a      	ldr	r2, [pc, #104]	; (8003924 <TIM_Base_SetConfig+0xa8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d007      	beq.n	80038ce <TIM_Base_SetConfig+0x52>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c4:	d003      	beq.n	80038ce <TIM_Base_SetConfig+0x52>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a17      	ldr	r2, [pc, #92]	; (8003928 <TIM_Base_SetConfig+0xac>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d108      	bne.n	80038e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a07      	ldr	r2, [pc, #28]	; (8003924 <TIM_Base_SetConfig+0xa8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d103      	bne.n	8003914 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	615a      	str	r2, [r3, #20]
}
 800391a:	bf00      	nop
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40000400 	.word	0x40000400

0800392c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	f023 0201 	bic.w	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f023 030a 	bic.w	r3, r3, #10
 8003968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	621a      	str	r2, [r3, #32]
}
 800397e:	bf00      	nop
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f023 0210 	bic.w	r2, r3, #16
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	031b      	lsls	r3, r3, #12
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	621a      	str	r2, [r3, #32]
}
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b085      	sub	sp, #20
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f043 0307 	orr.w	r3, r3, #7
 8003a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	609a      	str	r2, [r3, #8]
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b087      	sub	sp, #28
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	021a      	lsls	r2, r3, #8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	609a      	str	r2, [r3, #8]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e041      	b.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d009      	beq.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abc:	d004      	beq.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d10c      	bne.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ace:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	40000400 	.word	0x40000400

08003b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr

08003b1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e03f      	b.n	8003bbe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd fbf4 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2224      	movs	r2, #36	; 0x24
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fc85 	bl	8004480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ba4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b08a      	sub	sp, #40	; 0x28
 8003bca:	af02      	add	r7, sp, #8
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	603b      	str	r3, [r7, #0]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d17c      	bne.n	8003ce0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_UART_Transmit+0x2c>
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e075      	b.n	8003ce2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_UART_Transmit+0x3e>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e06e      	b.n	8003ce2 <HAL_UART_Transmit+0x11c>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2221      	movs	r2, #33	; 0x21
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c1a:	f7fd fd6d 	bl	80016f8 <HAL_GetTick>
 8003c1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	88fa      	ldrh	r2, [r7, #6]
 8003c24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	88fa      	ldrh	r2, [r7, #6]
 8003c2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c34:	d108      	bne.n	8003c48 <HAL_UART_Transmit+0x82>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d104      	bne.n	8003c48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	e003      	b.n	8003c50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c58:	e02a      	b.n	8003cb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2200      	movs	r2, #0
 8003c62:	2180      	movs	r1, #128	; 0x80
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fa38 	bl	80040da <UART_WaitOnFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e036      	b.n	8003ce2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10b      	bne.n	8003c92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	e007      	b.n	8003ca2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	781a      	ldrb	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1cf      	bne.n	8003c5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2140      	movs	r1, #64	; 0x40
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 fa08 	bl	80040da <UART_WaitOnFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e006      	b.n	8003ce2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e000      	b.n	8003ce2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
  }
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d11d      	bne.n	8003d40 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <HAL_UART_Receive_IT+0x26>
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e016      	b.n	8003d42 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_UART_Receive_IT+0x38>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e00f      	b.n	8003d42 <HAL_UART_Receive_IT+0x58>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	461a      	mov	r2, r3
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fa19 	bl	800416e <UART_Start_Receive_IT>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	e000      	b.n	8003d42 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
  }
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08a      	sub	sp, #40	; 0x28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10d      	bne.n	8003d9e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_UART_IRQHandler+0x52>
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fac9 	bl	800432e <UART_Receive_IT>
      return;
 8003d9c:	e17b      	b.n	8004096 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80b1 	beq.w	8003f08 <HAL_UART_IRQHandler+0x1bc>
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d105      	bne.n	8003dbc <HAL_UART_IRQHandler+0x70>
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80a6 	beq.w	8003f08 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_UART_IRQHandler+0x90>
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_UART_IRQHandler+0xb0>
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f043 0202 	orr.w	r2, r3, #2
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_UART_IRQHandler+0xd0>
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f043 0204 	orr.w	r2, r3, #4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00f      	beq.n	8003e46 <HAL_UART_IRQHandler+0xfa>
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <HAL_UART_IRQHandler+0xee>
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f043 0208 	orr.w	r2, r3, #8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 811e 	beq.w	800408c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <HAL_UART_IRQHandler+0x11e>
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fa62 	bl	800432e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d102      	bne.n	8003e92 <HAL_UART_IRQHandler+0x146>
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d031      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9a4 	bl	80041e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d023      	beq.n	8003eee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d013      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	4a76      	ldr	r2, [pc, #472]	; (800409c <HAL_UART_IRQHandler+0x350>)
 8003ec4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe fa94 	bl	80023f8 <HAL_DMA_Abort_IT>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d016      	beq.n	8003f04 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee4:	e00e      	b.n	8003f04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f8e3 	bl	80040b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eec:	e00a      	b.n	8003f04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f8df 	bl	80040b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	e006      	b.n	8003f04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f8db 	bl	80040b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f02:	e0c3      	b.n	800408c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f04:	bf00      	nop
    return;
 8003f06:	e0c1      	b.n	800408c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	f040 80a1 	bne.w	8004054 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 809b 	beq.w	8004054 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8095 	beq.w	8004054 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d04e      	beq.n	8003fec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f58:	8a3b      	ldrh	r3, [r7, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 8098 	beq.w	8004090 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f64:	8a3a      	ldrh	r2, [r7, #16]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	f080 8092 	bcs.w	8004090 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8a3a      	ldrh	r2, [r7, #16]
 8003f70:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d02b      	beq.n	8003fd4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f8a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003faa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0210 	bic.w	r2, r2, #16
 8003fc8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe f9d7 	bl	8002382 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f86d 	bl	80040c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fea:	e051      	b.n	8004090 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d047      	beq.n	8004094 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004004:	8a7b      	ldrh	r3, [r7, #18]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d044      	beq.n	8004094 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004018:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0201 	bic.w	r2, r2, #1
 8004028:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0210 	bic.w	r2, r2, #16
 8004046:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004048:	8a7b      	ldrh	r3, [r7, #18]
 800404a:	4619      	mov	r1, r3
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f839 	bl	80040c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004052:	e01f      	b.n	8004094 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d008      	beq.n	8004070 <HAL_UART_IRQHandler+0x324>
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f8f9 	bl	8004260 <UART_Transmit_IT>
    return;
 800406e:	e012      	b.n	8004096 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00d      	beq.n	8004096 <HAL_UART_IRQHandler+0x34a>
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f93a 	bl	80042fe <UART_EndTransmit_IT>
    return;
 800408a:	e004      	b.n	8004096 <HAL_UART_IRQHandler+0x34a>
    return;
 800408c:	bf00      	nop
 800408e:	e002      	b.n	8004096 <HAL_UART_IRQHandler+0x34a>
      return;
 8004090:	bf00      	nop
 8004092:	e000      	b.n	8004096 <HAL_UART_IRQHandler+0x34a>
      return;
 8004094:	bf00      	nop
  }
}
 8004096:	3728      	adds	r7, #40	; 0x28
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	08004239 	.word	0x08004239

080040a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr

080040da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	4613      	mov	r3, r2
 80040e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ea:	e02c      	b.n	8004146 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f2:	d028      	beq.n	8004146 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <UART_WaitOnFlagUntilTimeout+0x30>
 80040fa:	f7fd fafd 	bl	80016f8 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	429a      	cmp	r2, r3
 8004108:	d21d      	bcs.n	8004146 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004118:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695a      	ldr	r2, [r3, #20]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0201 	bic.w	r2, r2, #1
 8004128:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e00f      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4013      	ands	r3, r2
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	429a      	cmp	r2, r3
 8004154:	bf0c      	ite	eq
 8004156:	2301      	moveq	r3, #1
 8004158:	2300      	movne	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	429a      	cmp	r2, r3
 8004162:	d0c3      	beq.n	80040ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800416e:	b480      	push	{r7}
 8004170:	b085      	sub	sp, #20
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	4613      	mov	r3, r2
 800417a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	88fa      	ldrh	r2, [r7, #6]
 8004186:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	88fa      	ldrh	r2, [r7, #6]
 800418c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2222      	movs	r2, #34	; 0x22
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041b2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0220 	orr.w	r2, r2, #32
 80041d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0201 	bic.w	r2, r2, #1
 8004206:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	2b01      	cmp	r3, #1
 800420e:	d107      	bne.n	8004220 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0210 	bic.w	r2, r2, #16
 800421e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7ff ff2d 	bl	80040b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b21      	cmp	r3, #33	; 0x21
 8004272:	d13e      	bne.n	80042f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427c:	d114      	bne.n	80042a8 <UART_Transmit_IT+0x48>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d110      	bne.n	80042a8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800429a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	1c9a      	adds	r2, r3, #2
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	621a      	str	r2, [r3, #32]
 80042a6:	e008      	b.n	80042ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	1c59      	adds	r1, r3, #1
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6211      	str	r1, [r2, #32]
 80042b2:	781a      	ldrb	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	4619      	mov	r1, r3
 80042c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10f      	bne.n	80042ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
  }
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004314:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff febe 	bl	80040a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b086      	sub	sp, #24
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b22      	cmp	r3, #34	; 0x22
 8004340:	f040 8099 	bne.w	8004476 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434c:	d117      	bne.n	800437e <UART_Receive_IT+0x50>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d113      	bne.n	800437e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	b29b      	uxth	r3, r3
 8004368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436c:	b29a      	uxth	r2, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	1c9a      	adds	r2, r3, #2
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	629a      	str	r2, [r3, #40]	; 0x28
 800437c:	e026      	b.n	80043cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004390:	d007      	beq.n	80043a2 <UART_Receive_IT+0x74>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <UART_Receive_IT+0x82>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	e008      	b.n	80043c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4619      	mov	r1, r3
 80043da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d148      	bne.n	8004472 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0220 	bic.w	r2, r2, #32
 80043ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	2b01      	cmp	r3, #1
 800441e:	d123      	bne.n	8004468 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0210 	bic.w	r2, r2, #16
 8004434:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b10      	cmp	r3, #16
 8004442:	d10a      	bne.n	800445a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800445e:	4619      	mov	r1, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff fe2f 	bl	80040c4 <HAL_UARTEx_RxEventCallback>
 8004466:	e002      	b.n	800446e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7fc fd1b 	bl	8000ea4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	e002      	b.n	8004478 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e000      	b.n	8004478 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004476:	2302      	movs	r3, #2
  }
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044ba:	f023 030c 	bic.w	r3, r3, #12
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	430b      	orrs	r3, r1
 80044c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a2c      	ldr	r2, [pc, #176]	; (8004594 <UART_SetConfig+0x114>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d103      	bne.n	80044f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044e8:	f7fe fd90 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	e002      	b.n	80044f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044f0:	f7fe fd78 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 80044f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	009a      	lsls	r2, r3, #2
 8004500:	441a      	add	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	fbb2 f3f3 	udiv	r3, r2, r3
 800450c:	4a22      	ldr	r2, [pc, #136]	; (8004598 <UART_SetConfig+0x118>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	0119      	lsls	r1, r3, #4
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4613      	mov	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	009a      	lsls	r2, r3, #2
 8004520:	441a      	add	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	fbb2 f2f3 	udiv	r2, r2, r3
 800452c:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <UART_SetConfig+0x118>)
 800452e:	fba3 0302 	umull	r0, r3, r3, r2
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	2064      	movs	r0, #100	; 0x64
 8004536:	fb00 f303 	mul.w	r3, r0, r3
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	3332      	adds	r3, #50	; 0x32
 8004540:	4a15      	ldr	r2, [pc, #84]	; (8004598 <UART_SetConfig+0x118>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800454c:	4419      	add	r1, r3
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009a      	lsls	r2, r3, #2
 8004558:	441a      	add	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	fbb2 f2f3 	udiv	r2, r2, r3
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <UART_SetConfig+0x118>)
 8004566:	fba3 0302 	umull	r0, r3, r3, r2
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	2064      	movs	r0, #100	; 0x64
 800456e:	fb00 f303 	mul.w	r3, r0, r3
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	3332      	adds	r3, #50	; 0x32
 8004578:	4a07      	ldr	r2, [pc, #28]	; (8004598 <UART_SetConfig+0x118>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	f003 020f 	and.w	r2, r3, #15
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	440a      	add	r2, r1
 800458a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40013800 	.word	0x40013800
 8004598:	51eb851f 	.word	0x51eb851f

0800459c <__errno>:
 800459c:	4b01      	ldr	r3, [pc, #4]	; (80045a4 <__errno+0x8>)
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000014 	.word	0x20000014

080045a8 <__libc_init_array>:
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	2600      	movs	r6, #0
 80045ac:	4d0c      	ldr	r5, [pc, #48]	; (80045e0 <__libc_init_array+0x38>)
 80045ae:	4c0d      	ldr	r4, [pc, #52]	; (80045e4 <__libc_init_array+0x3c>)
 80045b0:	1b64      	subs	r4, r4, r5
 80045b2:	10a4      	asrs	r4, r4, #2
 80045b4:	42a6      	cmp	r6, r4
 80045b6:	d109      	bne.n	80045cc <__libc_init_array+0x24>
 80045b8:	f002 febc 	bl	8007334 <_init>
 80045bc:	2600      	movs	r6, #0
 80045be:	4d0a      	ldr	r5, [pc, #40]	; (80045e8 <__libc_init_array+0x40>)
 80045c0:	4c0a      	ldr	r4, [pc, #40]	; (80045ec <__libc_init_array+0x44>)
 80045c2:	1b64      	subs	r4, r4, r5
 80045c4:	10a4      	asrs	r4, r4, #2
 80045c6:	42a6      	cmp	r6, r4
 80045c8:	d105      	bne.n	80045d6 <__libc_init_array+0x2e>
 80045ca:	bd70      	pop	{r4, r5, r6, pc}
 80045cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d0:	4798      	blx	r3
 80045d2:	3601      	adds	r6, #1
 80045d4:	e7ee      	b.n	80045b4 <__libc_init_array+0xc>
 80045d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045da:	4798      	blx	r3
 80045dc:	3601      	adds	r6, #1
 80045de:	e7f2      	b.n	80045c6 <__libc_init_array+0x1e>
 80045e0:	08007804 	.word	0x08007804
 80045e4:	08007804 	.word	0x08007804
 80045e8:	08007804 	.word	0x08007804
 80045ec:	08007808 	.word	0x08007808

080045f0 <memset>:
 80045f0:	4603      	mov	r3, r0
 80045f2:	4402      	add	r2, r0
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d100      	bne.n	80045fa <memset+0xa>
 80045f8:	4770      	bx	lr
 80045fa:	f803 1b01 	strb.w	r1, [r3], #1
 80045fe:	e7f9      	b.n	80045f4 <memset+0x4>

08004600 <__cvt>:
 8004600:	2b00      	cmp	r3, #0
 8004602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004606:	461f      	mov	r7, r3
 8004608:	bfbb      	ittet	lt
 800460a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800460e:	461f      	movlt	r7, r3
 8004610:	2300      	movge	r3, #0
 8004612:	232d      	movlt	r3, #45	; 0x2d
 8004614:	b088      	sub	sp, #32
 8004616:	4614      	mov	r4, r2
 8004618:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800461a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800461c:	7013      	strb	r3, [r2, #0]
 800461e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004620:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004624:	f023 0820 	bic.w	r8, r3, #32
 8004628:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800462c:	d005      	beq.n	800463a <__cvt+0x3a>
 800462e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004632:	d100      	bne.n	8004636 <__cvt+0x36>
 8004634:	3501      	adds	r5, #1
 8004636:	2302      	movs	r3, #2
 8004638:	e000      	b.n	800463c <__cvt+0x3c>
 800463a:	2303      	movs	r3, #3
 800463c:	aa07      	add	r2, sp, #28
 800463e:	9204      	str	r2, [sp, #16]
 8004640:	aa06      	add	r2, sp, #24
 8004642:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004646:	e9cd 3500 	strd	r3, r5, [sp]
 800464a:	4622      	mov	r2, r4
 800464c:	463b      	mov	r3, r7
 800464e:	f000 fce7 	bl	8005020 <_dtoa_r>
 8004652:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004656:	4606      	mov	r6, r0
 8004658:	d102      	bne.n	8004660 <__cvt+0x60>
 800465a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800465c:	07db      	lsls	r3, r3, #31
 800465e:	d522      	bpl.n	80046a6 <__cvt+0xa6>
 8004660:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004664:	eb06 0905 	add.w	r9, r6, r5
 8004668:	d110      	bne.n	800468c <__cvt+0x8c>
 800466a:	7833      	ldrb	r3, [r6, #0]
 800466c:	2b30      	cmp	r3, #48	; 0x30
 800466e:	d10a      	bne.n	8004686 <__cvt+0x86>
 8004670:	2200      	movs	r2, #0
 8004672:	2300      	movs	r3, #0
 8004674:	4620      	mov	r0, r4
 8004676:	4639      	mov	r1, r7
 8004678:	f7fc f996 	bl	80009a8 <__aeabi_dcmpeq>
 800467c:	b918      	cbnz	r0, 8004686 <__cvt+0x86>
 800467e:	f1c5 0501 	rsb	r5, r5, #1
 8004682:	f8ca 5000 	str.w	r5, [sl]
 8004686:	f8da 3000 	ldr.w	r3, [sl]
 800468a:	4499      	add	r9, r3
 800468c:	2200      	movs	r2, #0
 800468e:	2300      	movs	r3, #0
 8004690:	4620      	mov	r0, r4
 8004692:	4639      	mov	r1, r7
 8004694:	f7fc f988 	bl	80009a8 <__aeabi_dcmpeq>
 8004698:	b108      	cbz	r0, 800469e <__cvt+0x9e>
 800469a:	f8cd 901c 	str.w	r9, [sp, #28]
 800469e:	2230      	movs	r2, #48	; 0x30
 80046a0:	9b07      	ldr	r3, [sp, #28]
 80046a2:	454b      	cmp	r3, r9
 80046a4:	d307      	bcc.n	80046b6 <__cvt+0xb6>
 80046a6:	4630      	mov	r0, r6
 80046a8:	9b07      	ldr	r3, [sp, #28]
 80046aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80046ac:	1b9b      	subs	r3, r3, r6
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	b008      	add	sp, #32
 80046b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b6:	1c59      	adds	r1, r3, #1
 80046b8:	9107      	str	r1, [sp, #28]
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	e7f0      	b.n	80046a0 <__cvt+0xa0>

080046be <__exponent>:
 80046be:	4603      	mov	r3, r0
 80046c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046c2:	2900      	cmp	r1, #0
 80046c4:	f803 2b02 	strb.w	r2, [r3], #2
 80046c8:	bfb6      	itet	lt
 80046ca:	222d      	movlt	r2, #45	; 0x2d
 80046cc:	222b      	movge	r2, #43	; 0x2b
 80046ce:	4249      	neglt	r1, r1
 80046d0:	2909      	cmp	r1, #9
 80046d2:	7042      	strb	r2, [r0, #1]
 80046d4:	dd2b      	ble.n	800472e <__exponent+0x70>
 80046d6:	f10d 0407 	add.w	r4, sp, #7
 80046da:	46a4      	mov	ip, r4
 80046dc:	270a      	movs	r7, #10
 80046de:	fb91 f6f7 	sdiv	r6, r1, r7
 80046e2:	460a      	mov	r2, r1
 80046e4:	46a6      	mov	lr, r4
 80046e6:	fb07 1516 	mls	r5, r7, r6, r1
 80046ea:	2a63      	cmp	r2, #99	; 0x63
 80046ec:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80046f0:	4631      	mov	r1, r6
 80046f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80046f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80046fa:	dcf0      	bgt.n	80046de <__exponent+0x20>
 80046fc:	3130      	adds	r1, #48	; 0x30
 80046fe:	f1ae 0502 	sub.w	r5, lr, #2
 8004702:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004706:	4629      	mov	r1, r5
 8004708:	1c44      	adds	r4, r0, #1
 800470a:	4561      	cmp	r1, ip
 800470c:	d30a      	bcc.n	8004724 <__exponent+0x66>
 800470e:	f10d 0209 	add.w	r2, sp, #9
 8004712:	eba2 020e 	sub.w	r2, r2, lr
 8004716:	4565      	cmp	r5, ip
 8004718:	bf88      	it	hi
 800471a:	2200      	movhi	r2, #0
 800471c:	4413      	add	r3, r2
 800471e:	1a18      	subs	r0, r3, r0
 8004720:	b003      	add	sp, #12
 8004722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004724:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004728:	f804 2f01 	strb.w	r2, [r4, #1]!
 800472c:	e7ed      	b.n	800470a <__exponent+0x4c>
 800472e:	2330      	movs	r3, #48	; 0x30
 8004730:	3130      	adds	r1, #48	; 0x30
 8004732:	7083      	strb	r3, [r0, #2]
 8004734:	70c1      	strb	r1, [r0, #3]
 8004736:	1d03      	adds	r3, r0, #4
 8004738:	e7f1      	b.n	800471e <__exponent+0x60>
	...

0800473c <_printf_float>:
 800473c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004740:	b091      	sub	sp, #68	; 0x44
 8004742:	460c      	mov	r4, r1
 8004744:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004748:	4616      	mov	r6, r2
 800474a:	461f      	mov	r7, r3
 800474c:	4605      	mov	r5, r0
 800474e:	f001 fa55 	bl	8005bfc <_localeconv_r>
 8004752:	6803      	ldr	r3, [r0, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	9309      	str	r3, [sp, #36]	; 0x24
 8004758:	f7fb fcfa 	bl	8000150 <strlen>
 800475c:	2300      	movs	r3, #0
 800475e:	930e      	str	r3, [sp, #56]	; 0x38
 8004760:	f8d8 3000 	ldr.w	r3, [r8]
 8004764:	900a      	str	r0, [sp, #40]	; 0x28
 8004766:	3307      	adds	r3, #7
 8004768:	f023 0307 	bic.w	r3, r3, #7
 800476c:	f103 0208 	add.w	r2, r3, #8
 8004770:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004774:	f8d4 b000 	ldr.w	fp, [r4]
 8004778:	f8c8 2000 	str.w	r2, [r8]
 800477c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004780:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004784:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004788:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800478c:	930b      	str	r3, [sp, #44]	; 0x2c
 800478e:	f04f 32ff 	mov.w	r2, #4294967295
 8004792:	4640      	mov	r0, r8
 8004794:	4b9c      	ldr	r3, [pc, #624]	; (8004a08 <_printf_float+0x2cc>)
 8004796:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004798:	f7fc f938 	bl	8000a0c <__aeabi_dcmpun>
 800479c:	bb70      	cbnz	r0, 80047fc <_printf_float+0xc0>
 800479e:	f04f 32ff 	mov.w	r2, #4294967295
 80047a2:	4640      	mov	r0, r8
 80047a4:	4b98      	ldr	r3, [pc, #608]	; (8004a08 <_printf_float+0x2cc>)
 80047a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047a8:	f7fc f912 	bl	80009d0 <__aeabi_dcmple>
 80047ac:	bb30      	cbnz	r0, 80047fc <_printf_float+0xc0>
 80047ae:	2200      	movs	r2, #0
 80047b0:	2300      	movs	r3, #0
 80047b2:	4640      	mov	r0, r8
 80047b4:	4651      	mov	r1, sl
 80047b6:	f7fc f901 	bl	80009bc <__aeabi_dcmplt>
 80047ba:	b110      	cbz	r0, 80047c2 <_printf_float+0x86>
 80047bc:	232d      	movs	r3, #45	; 0x2d
 80047be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047c2:	4b92      	ldr	r3, [pc, #584]	; (8004a0c <_printf_float+0x2d0>)
 80047c4:	4892      	ldr	r0, [pc, #584]	; (8004a10 <_printf_float+0x2d4>)
 80047c6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80047ca:	bf94      	ite	ls
 80047cc:	4698      	movls	r8, r3
 80047ce:	4680      	movhi	r8, r0
 80047d0:	2303      	movs	r3, #3
 80047d2:	f04f 0a00 	mov.w	sl, #0
 80047d6:	6123      	str	r3, [r4, #16]
 80047d8:	f02b 0304 	bic.w	r3, fp, #4
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	4633      	mov	r3, r6
 80047e0:	4621      	mov	r1, r4
 80047e2:	4628      	mov	r0, r5
 80047e4:	9700      	str	r7, [sp, #0]
 80047e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80047e8:	f000 f9d4 	bl	8004b94 <_printf_common>
 80047ec:	3001      	adds	r0, #1
 80047ee:	f040 8090 	bne.w	8004912 <_printf_float+0x1d6>
 80047f2:	f04f 30ff 	mov.w	r0, #4294967295
 80047f6:	b011      	add	sp, #68	; 0x44
 80047f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fc:	4642      	mov	r2, r8
 80047fe:	4653      	mov	r3, sl
 8004800:	4640      	mov	r0, r8
 8004802:	4651      	mov	r1, sl
 8004804:	f7fc f902 	bl	8000a0c <__aeabi_dcmpun>
 8004808:	b148      	cbz	r0, 800481e <_printf_float+0xe2>
 800480a:	f1ba 0f00 	cmp.w	sl, #0
 800480e:	bfb8      	it	lt
 8004810:	232d      	movlt	r3, #45	; 0x2d
 8004812:	4880      	ldr	r0, [pc, #512]	; (8004a14 <_printf_float+0x2d8>)
 8004814:	bfb8      	it	lt
 8004816:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800481a:	4b7f      	ldr	r3, [pc, #508]	; (8004a18 <_printf_float+0x2dc>)
 800481c:	e7d3      	b.n	80047c6 <_printf_float+0x8a>
 800481e:	6863      	ldr	r3, [r4, #4]
 8004820:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	d142      	bne.n	80048ae <_printf_float+0x172>
 8004828:	2306      	movs	r3, #6
 800482a:	6063      	str	r3, [r4, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	9206      	str	r2, [sp, #24]
 8004830:	aa0e      	add	r2, sp, #56	; 0x38
 8004832:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004836:	aa0d      	add	r2, sp, #52	; 0x34
 8004838:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800483c:	9203      	str	r2, [sp, #12]
 800483e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004842:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004846:	6023      	str	r3, [r4, #0]
 8004848:	6863      	ldr	r3, [r4, #4]
 800484a:	4642      	mov	r2, r8
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	4628      	mov	r0, r5
 8004850:	4653      	mov	r3, sl
 8004852:	910b      	str	r1, [sp, #44]	; 0x2c
 8004854:	f7ff fed4 	bl	8004600 <__cvt>
 8004858:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800485a:	4680      	mov	r8, r0
 800485c:	2947      	cmp	r1, #71	; 0x47
 800485e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004860:	d108      	bne.n	8004874 <_printf_float+0x138>
 8004862:	1cc8      	adds	r0, r1, #3
 8004864:	db02      	blt.n	800486c <_printf_float+0x130>
 8004866:	6863      	ldr	r3, [r4, #4]
 8004868:	4299      	cmp	r1, r3
 800486a:	dd40      	ble.n	80048ee <_printf_float+0x1b2>
 800486c:	f1a9 0902 	sub.w	r9, r9, #2
 8004870:	fa5f f989 	uxtb.w	r9, r9
 8004874:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004878:	d81f      	bhi.n	80048ba <_printf_float+0x17e>
 800487a:	464a      	mov	r2, r9
 800487c:	3901      	subs	r1, #1
 800487e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004882:	910d      	str	r1, [sp, #52]	; 0x34
 8004884:	f7ff ff1b 	bl	80046be <__exponent>
 8004888:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800488a:	4682      	mov	sl, r0
 800488c:	1813      	adds	r3, r2, r0
 800488e:	2a01      	cmp	r2, #1
 8004890:	6123      	str	r3, [r4, #16]
 8004892:	dc02      	bgt.n	800489a <_printf_float+0x15e>
 8004894:	6822      	ldr	r2, [r4, #0]
 8004896:	07d2      	lsls	r2, r2, #31
 8004898:	d501      	bpl.n	800489e <_printf_float+0x162>
 800489a:	3301      	adds	r3, #1
 800489c:	6123      	str	r3, [r4, #16]
 800489e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d09b      	beq.n	80047de <_printf_float+0xa2>
 80048a6:	232d      	movs	r3, #45	; 0x2d
 80048a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ac:	e797      	b.n	80047de <_printf_float+0xa2>
 80048ae:	2947      	cmp	r1, #71	; 0x47
 80048b0:	d1bc      	bne.n	800482c <_printf_float+0xf0>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1ba      	bne.n	800482c <_printf_float+0xf0>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e7b7      	b.n	800482a <_printf_float+0xee>
 80048ba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80048be:	d118      	bne.n	80048f2 <_printf_float+0x1b6>
 80048c0:	2900      	cmp	r1, #0
 80048c2:	6863      	ldr	r3, [r4, #4]
 80048c4:	dd0b      	ble.n	80048de <_printf_float+0x1a2>
 80048c6:	6121      	str	r1, [r4, #16]
 80048c8:	b913      	cbnz	r3, 80048d0 <_printf_float+0x194>
 80048ca:	6822      	ldr	r2, [r4, #0]
 80048cc:	07d0      	lsls	r0, r2, #31
 80048ce:	d502      	bpl.n	80048d6 <_printf_float+0x19a>
 80048d0:	3301      	adds	r3, #1
 80048d2:	440b      	add	r3, r1
 80048d4:	6123      	str	r3, [r4, #16]
 80048d6:	f04f 0a00 	mov.w	sl, #0
 80048da:	65a1      	str	r1, [r4, #88]	; 0x58
 80048dc:	e7df      	b.n	800489e <_printf_float+0x162>
 80048de:	b913      	cbnz	r3, 80048e6 <_printf_float+0x1aa>
 80048e0:	6822      	ldr	r2, [r4, #0]
 80048e2:	07d2      	lsls	r2, r2, #31
 80048e4:	d501      	bpl.n	80048ea <_printf_float+0x1ae>
 80048e6:	3302      	adds	r3, #2
 80048e8:	e7f4      	b.n	80048d4 <_printf_float+0x198>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e7f2      	b.n	80048d4 <_printf_float+0x198>
 80048ee:	f04f 0967 	mov.w	r9, #103	; 0x67
 80048f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048f4:	4299      	cmp	r1, r3
 80048f6:	db05      	blt.n	8004904 <_printf_float+0x1c8>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	6121      	str	r1, [r4, #16]
 80048fc:	07d8      	lsls	r0, r3, #31
 80048fe:	d5ea      	bpl.n	80048d6 <_printf_float+0x19a>
 8004900:	1c4b      	adds	r3, r1, #1
 8004902:	e7e7      	b.n	80048d4 <_printf_float+0x198>
 8004904:	2900      	cmp	r1, #0
 8004906:	bfcc      	ite	gt
 8004908:	2201      	movgt	r2, #1
 800490a:	f1c1 0202 	rsble	r2, r1, #2
 800490e:	4413      	add	r3, r2
 8004910:	e7e0      	b.n	80048d4 <_printf_float+0x198>
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	055a      	lsls	r2, r3, #21
 8004916:	d407      	bmi.n	8004928 <_printf_float+0x1ec>
 8004918:	6923      	ldr	r3, [r4, #16]
 800491a:	4642      	mov	r2, r8
 800491c:	4631      	mov	r1, r6
 800491e:	4628      	mov	r0, r5
 8004920:	47b8      	blx	r7
 8004922:	3001      	adds	r0, #1
 8004924:	d12b      	bne.n	800497e <_printf_float+0x242>
 8004926:	e764      	b.n	80047f2 <_printf_float+0xb6>
 8004928:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800492c:	f240 80dd 	bls.w	8004aea <_printf_float+0x3ae>
 8004930:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004934:	2200      	movs	r2, #0
 8004936:	2300      	movs	r3, #0
 8004938:	f7fc f836 	bl	80009a8 <__aeabi_dcmpeq>
 800493c:	2800      	cmp	r0, #0
 800493e:	d033      	beq.n	80049a8 <_printf_float+0x26c>
 8004940:	2301      	movs	r3, #1
 8004942:	4631      	mov	r1, r6
 8004944:	4628      	mov	r0, r5
 8004946:	4a35      	ldr	r2, [pc, #212]	; (8004a1c <_printf_float+0x2e0>)
 8004948:	47b8      	blx	r7
 800494a:	3001      	adds	r0, #1
 800494c:	f43f af51 	beq.w	80047f2 <_printf_float+0xb6>
 8004950:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004954:	429a      	cmp	r2, r3
 8004956:	db02      	blt.n	800495e <_printf_float+0x222>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	07d8      	lsls	r0, r3, #31
 800495c:	d50f      	bpl.n	800497e <_printf_float+0x242>
 800495e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004962:	4631      	mov	r1, r6
 8004964:	4628      	mov	r0, r5
 8004966:	47b8      	blx	r7
 8004968:	3001      	adds	r0, #1
 800496a:	f43f af42 	beq.w	80047f2 <_printf_float+0xb6>
 800496e:	f04f 0800 	mov.w	r8, #0
 8004972:	f104 091a 	add.w	r9, r4, #26
 8004976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004978:	3b01      	subs	r3, #1
 800497a:	4543      	cmp	r3, r8
 800497c:	dc09      	bgt.n	8004992 <_printf_float+0x256>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	079b      	lsls	r3, r3, #30
 8004982:	f100 8102 	bmi.w	8004b8a <_printf_float+0x44e>
 8004986:	68e0      	ldr	r0, [r4, #12]
 8004988:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800498a:	4298      	cmp	r0, r3
 800498c:	bfb8      	it	lt
 800498e:	4618      	movlt	r0, r3
 8004990:	e731      	b.n	80047f6 <_printf_float+0xba>
 8004992:	2301      	movs	r3, #1
 8004994:	464a      	mov	r2, r9
 8004996:	4631      	mov	r1, r6
 8004998:	4628      	mov	r0, r5
 800499a:	47b8      	blx	r7
 800499c:	3001      	adds	r0, #1
 800499e:	f43f af28 	beq.w	80047f2 <_printf_float+0xb6>
 80049a2:	f108 0801 	add.w	r8, r8, #1
 80049a6:	e7e6      	b.n	8004976 <_printf_float+0x23a>
 80049a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	dc38      	bgt.n	8004a20 <_printf_float+0x2e4>
 80049ae:	2301      	movs	r3, #1
 80049b0:	4631      	mov	r1, r6
 80049b2:	4628      	mov	r0, r5
 80049b4:	4a19      	ldr	r2, [pc, #100]	; (8004a1c <_printf_float+0x2e0>)
 80049b6:	47b8      	blx	r7
 80049b8:	3001      	adds	r0, #1
 80049ba:	f43f af1a 	beq.w	80047f2 <_printf_float+0xb6>
 80049be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049c2:	4313      	orrs	r3, r2
 80049c4:	d102      	bne.n	80049cc <_printf_float+0x290>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	07d9      	lsls	r1, r3, #31
 80049ca:	d5d8      	bpl.n	800497e <_printf_float+0x242>
 80049cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049d0:	4631      	mov	r1, r6
 80049d2:	4628      	mov	r0, r5
 80049d4:	47b8      	blx	r7
 80049d6:	3001      	adds	r0, #1
 80049d8:	f43f af0b 	beq.w	80047f2 <_printf_float+0xb6>
 80049dc:	f04f 0900 	mov.w	r9, #0
 80049e0:	f104 0a1a 	add.w	sl, r4, #26
 80049e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049e6:	425b      	negs	r3, r3
 80049e8:	454b      	cmp	r3, r9
 80049ea:	dc01      	bgt.n	80049f0 <_printf_float+0x2b4>
 80049ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049ee:	e794      	b.n	800491a <_printf_float+0x1de>
 80049f0:	2301      	movs	r3, #1
 80049f2:	4652      	mov	r2, sl
 80049f4:	4631      	mov	r1, r6
 80049f6:	4628      	mov	r0, r5
 80049f8:	47b8      	blx	r7
 80049fa:	3001      	adds	r0, #1
 80049fc:	f43f aef9 	beq.w	80047f2 <_printf_float+0xb6>
 8004a00:	f109 0901 	add.w	r9, r9, #1
 8004a04:	e7ee      	b.n	80049e4 <_printf_float+0x2a8>
 8004a06:	bf00      	nop
 8004a08:	7fefffff 	.word	0x7fefffff
 8004a0c:	08007424 	.word	0x08007424
 8004a10:	08007428 	.word	0x08007428
 8004a14:	08007430 	.word	0x08007430
 8004a18:	0800742c 	.word	0x0800742c
 8004a1c:	08007434 	.word	0x08007434
 8004a20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a24:	429a      	cmp	r2, r3
 8004a26:	bfa8      	it	ge
 8004a28:	461a      	movge	r2, r3
 8004a2a:	2a00      	cmp	r2, #0
 8004a2c:	4691      	mov	r9, r2
 8004a2e:	dc37      	bgt.n	8004aa0 <_printf_float+0x364>
 8004a30:	f04f 0b00 	mov.w	fp, #0
 8004a34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a38:	f104 021a 	add.w	r2, r4, #26
 8004a3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004a40:	ebaa 0309 	sub.w	r3, sl, r9
 8004a44:	455b      	cmp	r3, fp
 8004a46:	dc33      	bgt.n	8004ab0 <_printf_float+0x374>
 8004a48:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	db3b      	blt.n	8004ac8 <_printf_float+0x38c>
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	07da      	lsls	r2, r3, #31
 8004a54:	d438      	bmi.n	8004ac8 <_printf_float+0x38c>
 8004a56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a5a:	eba2 030a 	sub.w	r3, r2, sl
 8004a5e:	eba2 0901 	sub.w	r9, r2, r1
 8004a62:	4599      	cmp	r9, r3
 8004a64:	bfa8      	it	ge
 8004a66:	4699      	movge	r9, r3
 8004a68:	f1b9 0f00 	cmp.w	r9, #0
 8004a6c:	dc34      	bgt.n	8004ad8 <_printf_float+0x39c>
 8004a6e:	f04f 0800 	mov.w	r8, #0
 8004a72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a76:	f104 0a1a 	add.w	sl, r4, #26
 8004a7a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	eba3 0309 	sub.w	r3, r3, r9
 8004a84:	4543      	cmp	r3, r8
 8004a86:	f77f af7a 	ble.w	800497e <_printf_float+0x242>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	4652      	mov	r2, sl
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b8      	blx	r7
 8004a94:	3001      	adds	r0, #1
 8004a96:	f43f aeac 	beq.w	80047f2 <_printf_float+0xb6>
 8004a9a:	f108 0801 	add.w	r8, r8, #1
 8004a9e:	e7ec      	b.n	8004a7a <_printf_float+0x33e>
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	47b8      	blx	r7
 8004aaa:	3001      	adds	r0, #1
 8004aac:	d1c0      	bne.n	8004a30 <_printf_float+0x2f4>
 8004aae:	e6a0      	b.n	80047f2 <_printf_float+0xb6>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	920b      	str	r2, [sp, #44]	; 0x2c
 8004ab8:	47b8      	blx	r7
 8004aba:	3001      	adds	r0, #1
 8004abc:	f43f ae99 	beq.w	80047f2 <_printf_float+0xb6>
 8004ac0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ac2:	f10b 0b01 	add.w	fp, fp, #1
 8004ac6:	e7b9      	b.n	8004a3c <_printf_float+0x300>
 8004ac8:	4631      	mov	r1, r6
 8004aca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ace:	4628      	mov	r0, r5
 8004ad0:	47b8      	blx	r7
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d1bf      	bne.n	8004a56 <_printf_float+0x31a>
 8004ad6:	e68c      	b.n	80047f2 <_printf_float+0xb6>
 8004ad8:	464b      	mov	r3, r9
 8004ada:	4631      	mov	r1, r6
 8004adc:	4628      	mov	r0, r5
 8004ade:	eb08 020a 	add.w	r2, r8, sl
 8004ae2:	47b8      	blx	r7
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d1c2      	bne.n	8004a6e <_printf_float+0x332>
 8004ae8:	e683      	b.n	80047f2 <_printf_float+0xb6>
 8004aea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004aec:	2a01      	cmp	r2, #1
 8004aee:	dc01      	bgt.n	8004af4 <_printf_float+0x3b8>
 8004af0:	07db      	lsls	r3, r3, #31
 8004af2:	d537      	bpl.n	8004b64 <_printf_float+0x428>
 8004af4:	2301      	movs	r3, #1
 8004af6:	4642      	mov	r2, r8
 8004af8:	4631      	mov	r1, r6
 8004afa:	4628      	mov	r0, r5
 8004afc:	47b8      	blx	r7
 8004afe:	3001      	adds	r0, #1
 8004b00:	f43f ae77 	beq.w	80047f2 <_printf_float+0xb6>
 8004b04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b08:	4631      	mov	r1, r6
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	47b8      	blx	r7
 8004b0e:	3001      	adds	r0, #1
 8004b10:	f43f ae6f 	beq.w	80047f2 <_printf_float+0xb6>
 8004b14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f7fb ff44 	bl	80009a8 <__aeabi_dcmpeq>
 8004b20:	b9d8      	cbnz	r0, 8004b5a <_printf_float+0x41e>
 8004b22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b24:	f108 0201 	add.w	r2, r8, #1
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	47b8      	blx	r7
 8004b30:	3001      	adds	r0, #1
 8004b32:	d10e      	bne.n	8004b52 <_printf_float+0x416>
 8004b34:	e65d      	b.n	80047f2 <_printf_float+0xb6>
 8004b36:	2301      	movs	r3, #1
 8004b38:	464a      	mov	r2, r9
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	47b8      	blx	r7
 8004b40:	3001      	adds	r0, #1
 8004b42:	f43f ae56 	beq.w	80047f2 <_printf_float+0xb6>
 8004b46:	f108 0801 	add.w	r8, r8, #1
 8004b4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	4543      	cmp	r3, r8
 8004b50:	dcf1      	bgt.n	8004b36 <_printf_float+0x3fa>
 8004b52:	4653      	mov	r3, sl
 8004b54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b58:	e6e0      	b.n	800491c <_printf_float+0x1e0>
 8004b5a:	f04f 0800 	mov.w	r8, #0
 8004b5e:	f104 091a 	add.w	r9, r4, #26
 8004b62:	e7f2      	b.n	8004b4a <_printf_float+0x40e>
 8004b64:	2301      	movs	r3, #1
 8004b66:	4642      	mov	r2, r8
 8004b68:	e7df      	b.n	8004b2a <_printf_float+0x3ee>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	464a      	mov	r2, r9
 8004b6e:	4631      	mov	r1, r6
 8004b70:	4628      	mov	r0, r5
 8004b72:	47b8      	blx	r7
 8004b74:	3001      	adds	r0, #1
 8004b76:	f43f ae3c 	beq.w	80047f2 <_printf_float+0xb6>
 8004b7a:	f108 0801 	add.w	r8, r8, #1
 8004b7e:	68e3      	ldr	r3, [r4, #12]
 8004b80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b82:	1a5b      	subs	r3, r3, r1
 8004b84:	4543      	cmp	r3, r8
 8004b86:	dcf0      	bgt.n	8004b6a <_printf_float+0x42e>
 8004b88:	e6fd      	b.n	8004986 <_printf_float+0x24a>
 8004b8a:	f04f 0800 	mov.w	r8, #0
 8004b8e:	f104 0919 	add.w	r9, r4, #25
 8004b92:	e7f4      	b.n	8004b7e <_printf_float+0x442>

08004b94 <_printf_common>:
 8004b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b98:	4616      	mov	r6, r2
 8004b9a:	4699      	mov	r9, r3
 8004b9c:	688a      	ldr	r2, [r1, #8]
 8004b9e:	690b      	ldr	r3, [r1, #16]
 8004ba0:	4607      	mov	r7, r0
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	bfb8      	it	lt
 8004ba6:	4613      	movlt	r3, r2
 8004ba8:	6033      	str	r3, [r6, #0]
 8004baa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bae:	460c      	mov	r4, r1
 8004bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bb4:	b10a      	cbz	r2, 8004bba <_printf_common+0x26>
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	6033      	str	r3, [r6, #0]
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	0699      	lsls	r1, r3, #26
 8004bbe:	bf42      	ittt	mi
 8004bc0:	6833      	ldrmi	r3, [r6, #0]
 8004bc2:	3302      	addmi	r3, #2
 8004bc4:	6033      	strmi	r3, [r6, #0]
 8004bc6:	6825      	ldr	r5, [r4, #0]
 8004bc8:	f015 0506 	ands.w	r5, r5, #6
 8004bcc:	d106      	bne.n	8004bdc <_printf_common+0x48>
 8004bce:	f104 0a19 	add.w	sl, r4, #25
 8004bd2:	68e3      	ldr	r3, [r4, #12]
 8004bd4:	6832      	ldr	r2, [r6, #0]
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	42ab      	cmp	r3, r5
 8004bda:	dc28      	bgt.n	8004c2e <_printf_common+0x9a>
 8004bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004be0:	1e13      	subs	r3, r2, #0
 8004be2:	6822      	ldr	r2, [r4, #0]
 8004be4:	bf18      	it	ne
 8004be6:	2301      	movne	r3, #1
 8004be8:	0692      	lsls	r2, r2, #26
 8004bea:	d42d      	bmi.n	8004c48 <_printf_common+0xb4>
 8004bec:	4649      	mov	r1, r9
 8004bee:	4638      	mov	r0, r7
 8004bf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bf4:	47c0      	blx	r8
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	d020      	beq.n	8004c3c <_printf_common+0xa8>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	68e5      	ldr	r5, [r4, #12]
 8004bfe:	f003 0306 	and.w	r3, r3, #6
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	bf18      	it	ne
 8004c06:	2500      	movne	r5, #0
 8004c08:	6832      	ldr	r2, [r6, #0]
 8004c0a:	f04f 0600 	mov.w	r6, #0
 8004c0e:	68a3      	ldr	r3, [r4, #8]
 8004c10:	bf08      	it	eq
 8004c12:	1aad      	subeq	r5, r5, r2
 8004c14:	6922      	ldr	r2, [r4, #16]
 8004c16:	bf08      	it	eq
 8004c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	bfc4      	itt	gt
 8004c20:	1a9b      	subgt	r3, r3, r2
 8004c22:	18ed      	addgt	r5, r5, r3
 8004c24:	341a      	adds	r4, #26
 8004c26:	42b5      	cmp	r5, r6
 8004c28:	d11a      	bne.n	8004c60 <_printf_common+0xcc>
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	e008      	b.n	8004c40 <_printf_common+0xac>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	4652      	mov	r2, sl
 8004c32:	4649      	mov	r1, r9
 8004c34:	4638      	mov	r0, r7
 8004c36:	47c0      	blx	r8
 8004c38:	3001      	adds	r0, #1
 8004c3a:	d103      	bne.n	8004c44 <_printf_common+0xb0>
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c44:	3501      	adds	r5, #1
 8004c46:	e7c4      	b.n	8004bd2 <_printf_common+0x3e>
 8004c48:	2030      	movs	r0, #48	; 0x30
 8004c4a:	18e1      	adds	r1, r4, r3
 8004c4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c56:	4422      	add	r2, r4
 8004c58:	3302      	adds	r3, #2
 8004c5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c5e:	e7c5      	b.n	8004bec <_printf_common+0x58>
 8004c60:	2301      	movs	r3, #1
 8004c62:	4622      	mov	r2, r4
 8004c64:	4649      	mov	r1, r9
 8004c66:	4638      	mov	r0, r7
 8004c68:	47c0      	blx	r8
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	d0e6      	beq.n	8004c3c <_printf_common+0xa8>
 8004c6e:	3601      	adds	r6, #1
 8004c70:	e7d9      	b.n	8004c26 <_printf_common+0x92>
	...

08004c74 <_printf_i>:
 8004c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c78:	460c      	mov	r4, r1
 8004c7a:	7e27      	ldrb	r7, [r4, #24]
 8004c7c:	4691      	mov	r9, r2
 8004c7e:	2f78      	cmp	r7, #120	; 0x78
 8004c80:	4680      	mov	r8, r0
 8004c82:	469a      	mov	sl, r3
 8004c84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c8a:	d807      	bhi.n	8004c9c <_printf_i+0x28>
 8004c8c:	2f62      	cmp	r7, #98	; 0x62
 8004c8e:	d80a      	bhi.n	8004ca6 <_printf_i+0x32>
 8004c90:	2f00      	cmp	r7, #0
 8004c92:	f000 80d9 	beq.w	8004e48 <_printf_i+0x1d4>
 8004c96:	2f58      	cmp	r7, #88	; 0x58
 8004c98:	f000 80a4 	beq.w	8004de4 <_printf_i+0x170>
 8004c9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ca4:	e03a      	b.n	8004d1c <_printf_i+0xa8>
 8004ca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004caa:	2b15      	cmp	r3, #21
 8004cac:	d8f6      	bhi.n	8004c9c <_printf_i+0x28>
 8004cae:	a001      	add	r0, pc, #4	; (adr r0, 8004cb4 <_printf_i+0x40>)
 8004cb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004cb4:	08004d0d 	.word	0x08004d0d
 8004cb8:	08004d21 	.word	0x08004d21
 8004cbc:	08004c9d 	.word	0x08004c9d
 8004cc0:	08004c9d 	.word	0x08004c9d
 8004cc4:	08004c9d 	.word	0x08004c9d
 8004cc8:	08004c9d 	.word	0x08004c9d
 8004ccc:	08004d21 	.word	0x08004d21
 8004cd0:	08004c9d 	.word	0x08004c9d
 8004cd4:	08004c9d 	.word	0x08004c9d
 8004cd8:	08004c9d 	.word	0x08004c9d
 8004cdc:	08004c9d 	.word	0x08004c9d
 8004ce0:	08004e2f 	.word	0x08004e2f
 8004ce4:	08004d51 	.word	0x08004d51
 8004ce8:	08004e11 	.word	0x08004e11
 8004cec:	08004c9d 	.word	0x08004c9d
 8004cf0:	08004c9d 	.word	0x08004c9d
 8004cf4:	08004e51 	.word	0x08004e51
 8004cf8:	08004c9d 	.word	0x08004c9d
 8004cfc:	08004d51 	.word	0x08004d51
 8004d00:	08004c9d 	.word	0x08004c9d
 8004d04:	08004c9d 	.word	0x08004c9d
 8004d08:	08004e19 	.word	0x08004e19
 8004d0c:	680b      	ldr	r3, [r1, #0]
 8004d0e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d12:	1d1a      	adds	r2, r3, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	600a      	str	r2, [r1, #0]
 8004d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0a4      	b.n	8004e6a <_printf_i+0x1f6>
 8004d20:	6825      	ldr	r5, [r4, #0]
 8004d22:	6808      	ldr	r0, [r1, #0]
 8004d24:	062e      	lsls	r6, r5, #24
 8004d26:	f100 0304 	add.w	r3, r0, #4
 8004d2a:	d50a      	bpl.n	8004d42 <_printf_i+0xce>
 8004d2c:	6805      	ldr	r5, [r0, #0]
 8004d2e:	600b      	str	r3, [r1, #0]
 8004d30:	2d00      	cmp	r5, #0
 8004d32:	da03      	bge.n	8004d3c <_printf_i+0xc8>
 8004d34:	232d      	movs	r3, #45	; 0x2d
 8004d36:	426d      	negs	r5, r5
 8004d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d3c:	230a      	movs	r3, #10
 8004d3e:	485e      	ldr	r0, [pc, #376]	; (8004eb8 <_printf_i+0x244>)
 8004d40:	e019      	b.n	8004d76 <_printf_i+0x102>
 8004d42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d46:	6805      	ldr	r5, [r0, #0]
 8004d48:	600b      	str	r3, [r1, #0]
 8004d4a:	bf18      	it	ne
 8004d4c:	b22d      	sxthne	r5, r5
 8004d4e:	e7ef      	b.n	8004d30 <_printf_i+0xbc>
 8004d50:	680b      	ldr	r3, [r1, #0]
 8004d52:	6825      	ldr	r5, [r4, #0]
 8004d54:	1d18      	adds	r0, r3, #4
 8004d56:	6008      	str	r0, [r1, #0]
 8004d58:	0628      	lsls	r0, r5, #24
 8004d5a:	d501      	bpl.n	8004d60 <_printf_i+0xec>
 8004d5c:	681d      	ldr	r5, [r3, #0]
 8004d5e:	e002      	b.n	8004d66 <_printf_i+0xf2>
 8004d60:	0669      	lsls	r1, r5, #25
 8004d62:	d5fb      	bpl.n	8004d5c <_printf_i+0xe8>
 8004d64:	881d      	ldrh	r5, [r3, #0]
 8004d66:	2f6f      	cmp	r7, #111	; 0x6f
 8004d68:	bf0c      	ite	eq
 8004d6a:	2308      	moveq	r3, #8
 8004d6c:	230a      	movne	r3, #10
 8004d6e:	4852      	ldr	r0, [pc, #328]	; (8004eb8 <_printf_i+0x244>)
 8004d70:	2100      	movs	r1, #0
 8004d72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d76:	6866      	ldr	r6, [r4, #4]
 8004d78:	2e00      	cmp	r6, #0
 8004d7a:	bfa8      	it	ge
 8004d7c:	6821      	ldrge	r1, [r4, #0]
 8004d7e:	60a6      	str	r6, [r4, #8]
 8004d80:	bfa4      	itt	ge
 8004d82:	f021 0104 	bicge.w	r1, r1, #4
 8004d86:	6021      	strge	r1, [r4, #0]
 8004d88:	b90d      	cbnz	r5, 8004d8e <_printf_i+0x11a>
 8004d8a:	2e00      	cmp	r6, #0
 8004d8c:	d04d      	beq.n	8004e2a <_printf_i+0x1b6>
 8004d8e:	4616      	mov	r6, r2
 8004d90:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d94:	fb03 5711 	mls	r7, r3, r1, r5
 8004d98:	5dc7      	ldrb	r7, [r0, r7]
 8004d9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d9e:	462f      	mov	r7, r5
 8004da0:	42bb      	cmp	r3, r7
 8004da2:	460d      	mov	r5, r1
 8004da4:	d9f4      	bls.n	8004d90 <_printf_i+0x11c>
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d10b      	bne.n	8004dc2 <_printf_i+0x14e>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	07df      	lsls	r7, r3, #31
 8004dae:	d508      	bpl.n	8004dc2 <_printf_i+0x14e>
 8004db0:	6923      	ldr	r3, [r4, #16]
 8004db2:	6861      	ldr	r1, [r4, #4]
 8004db4:	4299      	cmp	r1, r3
 8004db6:	bfde      	ittt	le
 8004db8:	2330      	movle	r3, #48	; 0x30
 8004dba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dc2:	1b92      	subs	r2, r2, r6
 8004dc4:	6122      	str	r2, [r4, #16]
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	4621      	mov	r1, r4
 8004dca:	4640      	mov	r0, r8
 8004dcc:	f8cd a000 	str.w	sl, [sp]
 8004dd0:	aa03      	add	r2, sp, #12
 8004dd2:	f7ff fedf 	bl	8004b94 <_printf_common>
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	d14c      	bne.n	8004e74 <_printf_i+0x200>
 8004dda:	f04f 30ff 	mov.w	r0, #4294967295
 8004dde:	b004      	add	sp, #16
 8004de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de4:	4834      	ldr	r0, [pc, #208]	; (8004eb8 <_printf_i+0x244>)
 8004de6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dea:	680e      	ldr	r6, [r1, #0]
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	f856 5b04 	ldr.w	r5, [r6], #4
 8004df2:	061f      	lsls	r7, r3, #24
 8004df4:	600e      	str	r6, [r1, #0]
 8004df6:	d514      	bpl.n	8004e22 <_printf_i+0x1ae>
 8004df8:	07d9      	lsls	r1, r3, #31
 8004dfa:	bf44      	itt	mi
 8004dfc:	f043 0320 	orrmi.w	r3, r3, #32
 8004e00:	6023      	strmi	r3, [r4, #0]
 8004e02:	b91d      	cbnz	r5, 8004e0c <_printf_i+0x198>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	f023 0320 	bic.w	r3, r3, #32
 8004e0a:	6023      	str	r3, [r4, #0]
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	e7af      	b.n	8004d70 <_printf_i+0xfc>
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	f043 0320 	orr.w	r3, r3, #32
 8004e16:	6023      	str	r3, [r4, #0]
 8004e18:	2378      	movs	r3, #120	; 0x78
 8004e1a:	4828      	ldr	r0, [pc, #160]	; (8004ebc <_printf_i+0x248>)
 8004e1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e20:	e7e3      	b.n	8004dea <_printf_i+0x176>
 8004e22:	065e      	lsls	r6, r3, #25
 8004e24:	bf48      	it	mi
 8004e26:	b2ad      	uxthmi	r5, r5
 8004e28:	e7e6      	b.n	8004df8 <_printf_i+0x184>
 8004e2a:	4616      	mov	r6, r2
 8004e2c:	e7bb      	b.n	8004da6 <_printf_i+0x132>
 8004e2e:	680b      	ldr	r3, [r1, #0]
 8004e30:	6826      	ldr	r6, [r4, #0]
 8004e32:	1d1d      	adds	r5, r3, #4
 8004e34:	6960      	ldr	r0, [r4, #20]
 8004e36:	600d      	str	r5, [r1, #0]
 8004e38:	0635      	lsls	r5, r6, #24
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	d501      	bpl.n	8004e42 <_printf_i+0x1ce>
 8004e3e:	6018      	str	r0, [r3, #0]
 8004e40:	e002      	b.n	8004e48 <_printf_i+0x1d4>
 8004e42:	0671      	lsls	r1, r6, #25
 8004e44:	d5fb      	bpl.n	8004e3e <_printf_i+0x1ca>
 8004e46:	8018      	strh	r0, [r3, #0]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	4616      	mov	r6, r2
 8004e4c:	6123      	str	r3, [r4, #16]
 8004e4e:	e7ba      	b.n	8004dc6 <_printf_i+0x152>
 8004e50:	680b      	ldr	r3, [r1, #0]
 8004e52:	1d1a      	adds	r2, r3, #4
 8004e54:	600a      	str	r2, [r1, #0]
 8004e56:	681e      	ldr	r6, [r3, #0]
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	6862      	ldr	r2, [r4, #4]
 8004e5e:	f000 fed9 	bl	8005c14 <memchr>
 8004e62:	b108      	cbz	r0, 8004e68 <_printf_i+0x1f4>
 8004e64:	1b80      	subs	r0, r0, r6
 8004e66:	6060      	str	r0, [r4, #4]
 8004e68:	6863      	ldr	r3, [r4, #4]
 8004e6a:	6123      	str	r3, [r4, #16]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e72:	e7a8      	b.n	8004dc6 <_printf_i+0x152>
 8004e74:	4632      	mov	r2, r6
 8004e76:	4649      	mov	r1, r9
 8004e78:	4640      	mov	r0, r8
 8004e7a:	6923      	ldr	r3, [r4, #16]
 8004e7c:	47d0      	blx	sl
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d0ab      	beq.n	8004dda <_printf_i+0x166>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	079b      	lsls	r3, r3, #30
 8004e86:	d413      	bmi.n	8004eb0 <_printf_i+0x23c>
 8004e88:	68e0      	ldr	r0, [r4, #12]
 8004e8a:	9b03      	ldr	r3, [sp, #12]
 8004e8c:	4298      	cmp	r0, r3
 8004e8e:	bfb8      	it	lt
 8004e90:	4618      	movlt	r0, r3
 8004e92:	e7a4      	b.n	8004dde <_printf_i+0x16a>
 8004e94:	2301      	movs	r3, #1
 8004e96:	4632      	mov	r2, r6
 8004e98:	4649      	mov	r1, r9
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	47d0      	blx	sl
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d09b      	beq.n	8004dda <_printf_i+0x166>
 8004ea2:	3501      	adds	r5, #1
 8004ea4:	68e3      	ldr	r3, [r4, #12]
 8004ea6:	9903      	ldr	r1, [sp, #12]
 8004ea8:	1a5b      	subs	r3, r3, r1
 8004eaa:	42ab      	cmp	r3, r5
 8004eac:	dcf2      	bgt.n	8004e94 <_printf_i+0x220>
 8004eae:	e7eb      	b.n	8004e88 <_printf_i+0x214>
 8004eb0:	2500      	movs	r5, #0
 8004eb2:	f104 0619 	add.w	r6, r4, #25
 8004eb6:	e7f5      	b.n	8004ea4 <_printf_i+0x230>
 8004eb8:	08007436 	.word	0x08007436
 8004ebc:	08007447 	.word	0x08007447

08004ec0 <siprintf>:
 8004ec0:	b40e      	push	{r1, r2, r3}
 8004ec2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ec6:	b500      	push	{lr}
 8004ec8:	b09c      	sub	sp, #112	; 0x70
 8004eca:	ab1d      	add	r3, sp, #116	; 0x74
 8004ecc:	9002      	str	r0, [sp, #8]
 8004ece:	9006      	str	r0, [sp, #24]
 8004ed0:	9107      	str	r1, [sp, #28]
 8004ed2:	9104      	str	r1, [sp, #16]
 8004ed4:	4808      	ldr	r0, [pc, #32]	; (8004ef8 <siprintf+0x38>)
 8004ed6:	4909      	ldr	r1, [pc, #36]	; (8004efc <siprintf+0x3c>)
 8004ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004edc:	9105      	str	r1, [sp, #20]
 8004ede:	6800      	ldr	r0, [r0, #0]
 8004ee0:	a902      	add	r1, sp, #8
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	f001 fb44 	bl	8006570 <_svfiprintf_r>
 8004ee8:	2200      	movs	r2, #0
 8004eea:	9b02      	ldr	r3, [sp, #8]
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	b01c      	add	sp, #112	; 0x70
 8004ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ef4:	b003      	add	sp, #12
 8004ef6:	4770      	bx	lr
 8004ef8:	20000014 	.word	0x20000014
 8004efc:	ffff0208 	.word	0xffff0208

08004f00 <quorem>:
 8004f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f04:	6903      	ldr	r3, [r0, #16]
 8004f06:	690c      	ldr	r4, [r1, #16]
 8004f08:	4607      	mov	r7, r0
 8004f0a:	42a3      	cmp	r3, r4
 8004f0c:	f2c0 8083 	blt.w	8005016 <quorem+0x116>
 8004f10:	3c01      	subs	r4, #1
 8004f12:	f100 0514 	add.w	r5, r0, #20
 8004f16:	f101 0814 	add.w	r8, r1, #20
 8004f1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004f34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f38:	d332      	bcc.n	8004fa0 <quorem+0xa0>
 8004f3a:	f04f 0e00 	mov.w	lr, #0
 8004f3e:	4640      	mov	r0, r8
 8004f40:	46ac      	mov	ip, r5
 8004f42:	46f2      	mov	sl, lr
 8004f44:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f48:	b293      	uxth	r3, r2
 8004f4a:	fb06 e303 	mla	r3, r6, r3, lr
 8004f4e:	0c12      	lsrs	r2, r2, #16
 8004f50:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004f54:	fb06 e202 	mla	r2, r6, r2, lr
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	ebaa 0303 	sub.w	r3, sl, r3
 8004f5e:	f8dc a000 	ldr.w	sl, [ip]
 8004f62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f66:	fa1f fa8a 	uxth.w	sl, sl
 8004f6a:	4453      	add	r3, sl
 8004f6c:	fa1f fa82 	uxth.w	sl, r2
 8004f70:	f8dc 2000 	ldr.w	r2, [ip]
 8004f74:	4581      	cmp	r9, r0
 8004f76:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004f7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f84:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f88:	f84c 3b04 	str.w	r3, [ip], #4
 8004f8c:	d2da      	bcs.n	8004f44 <quorem+0x44>
 8004f8e:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f92:	b92b      	cbnz	r3, 8004fa0 <quorem+0xa0>
 8004f94:	9b01      	ldr	r3, [sp, #4]
 8004f96:	3b04      	subs	r3, #4
 8004f98:	429d      	cmp	r5, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	d32f      	bcc.n	8004ffe <quorem+0xfe>
 8004f9e:	613c      	str	r4, [r7, #16]
 8004fa0:	4638      	mov	r0, r7
 8004fa2:	f001 f8cd 	bl	8006140 <__mcmp>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	db25      	blt.n	8004ff6 <quorem+0xf6>
 8004faa:	4628      	mov	r0, r5
 8004fac:	f04f 0c00 	mov.w	ip, #0
 8004fb0:	3601      	adds	r6, #1
 8004fb2:	f858 1b04 	ldr.w	r1, [r8], #4
 8004fb6:	f8d0 e000 	ldr.w	lr, [r0]
 8004fba:	b28b      	uxth	r3, r1
 8004fbc:	ebac 0303 	sub.w	r3, ip, r3
 8004fc0:	fa1f f28e 	uxth.w	r2, lr
 8004fc4:	4413      	add	r3, r2
 8004fc6:	0c0a      	lsrs	r2, r1, #16
 8004fc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004fcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fd6:	45c1      	cmp	r9, r8
 8004fd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004fdc:	f840 3b04 	str.w	r3, [r0], #4
 8004fe0:	d2e7      	bcs.n	8004fb2 <quorem+0xb2>
 8004fe2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fe6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fea:	b922      	cbnz	r2, 8004ff6 <quorem+0xf6>
 8004fec:	3b04      	subs	r3, #4
 8004fee:	429d      	cmp	r5, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	d30a      	bcc.n	800500a <quorem+0x10a>
 8004ff4:	613c      	str	r4, [r7, #16]
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	b003      	add	sp, #12
 8004ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	3b04      	subs	r3, #4
 8005002:	2a00      	cmp	r2, #0
 8005004:	d1cb      	bne.n	8004f9e <quorem+0x9e>
 8005006:	3c01      	subs	r4, #1
 8005008:	e7c6      	b.n	8004f98 <quorem+0x98>
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	3b04      	subs	r3, #4
 800500e:	2a00      	cmp	r2, #0
 8005010:	d1f0      	bne.n	8004ff4 <quorem+0xf4>
 8005012:	3c01      	subs	r4, #1
 8005014:	e7eb      	b.n	8004fee <quorem+0xee>
 8005016:	2000      	movs	r0, #0
 8005018:	e7ee      	b.n	8004ff8 <quorem+0xf8>
 800501a:	0000      	movs	r0, r0
 800501c:	0000      	movs	r0, r0
	...

08005020 <_dtoa_r>:
 8005020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005024:	4616      	mov	r6, r2
 8005026:	461f      	mov	r7, r3
 8005028:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800502a:	b099      	sub	sp, #100	; 0x64
 800502c:	4605      	mov	r5, r0
 800502e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005032:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005036:	b974      	cbnz	r4, 8005056 <_dtoa_r+0x36>
 8005038:	2010      	movs	r0, #16
 800503a:	f000 fde3 	bl	8005c04 <malloc>
 800503e:	4602      	mov	r2, r0
 8005040:	6268      	str	r0, [r5, #36]	; 0x24
 8005042:	b920      	cbnz	r0, 800504e <_dtoa_r+0x2e>
 8005044:	21ea      	movs	r1, #234	; 0xea
 8005046:	4bae      	ldr	r3, [pc, #696]	; (8005300 <_dtoa_r+0x2e0>)
 8005048:	48ae      	ldr	r0, [pc, #696]	; (8005304 <_dtoa_r+0x2e4>)
 800504a:	f001 fba1 	bl	8006790 <__assert_func>
 800504e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005052:	6004      	str	r4, [r0, #0]
 8005054:	60c4      	str	r4, [r0, #12]
 8005056:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005058:	6819      	ldr	r1, [r3, #0]
 800505a:	b151      	cbz	r1, 8005072 <_dtoa_r+0x52>
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	2301      	movs	r3, #1
 8005060:	4093      	lsls	r3, r2
 8005062:	604a      	str	r2, [r1, #4]
 8005064:	608b      	str	r3, [r1, #8]
 8005066:	4628      	mov	r0, r5
 8005068:	f000 fe30 	bl	8005ccc <_Bfree>
 800506c:	2200      	movs	r2, #0
 800506e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	1e3b      	subs	r3, r7, #0
 8005074:	bfaf      	iteee	ge
 8005076:	2300      	movge	r3, #0
 8005078:	2201      	movlt	r2, #1
 800507a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800507e:	9305      	strlt	r3, [sp, #20]
 8005080:	bfa8      	it	ge
 8005082:	f8c8 3000 	strge.w	r3, [r8]
 8005086:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800508a:	4b9f      	ldr	r3, [pc, #636]	; (8005308 <_dtoa_r+0x2e8>)
 800508c:	bfb8      	it	lt
 800508e:	f8c8 2000 	strlt.w	r2, [r8]
 8005092:	ea33 0309 	bics.w	r3, r3, r9
 8005096:	d119      	bne.n	80050cc <_dtoa_r+0xac>
 8005098:	f242 730f 	movw	r3, #9999	; 0x270f
 800509c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050a4:	4333      	orrs	r3, r6
 80050a6:	f000 8580 	beq.w	8005baa <_dtoa_r+0xb8a>
 80050aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050ac:	b953      	cbnz	r3, 80050c4 <_dtoa_r+0xa4>
 80050ae:	4b97      	ldr	r3, [pc, #604]	; (800530c <_dtoa_r+0x2ec>)
 80050b0:	e022      	b.n	80050f8 <_dtoa_r+0xd8>
 80050b2:	4b97      	ldr	r3, [pc, #604]	; (8005310 <_dtoa_r+0x2f0>)
 80050b4:	9308      	str	r3, [sp, #32]
 80050b6:	3308      	adds	r3, #8
 80050b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	9808      	ldr	r0, [sp, #32]
 80050be:	b019      	add	sp, #100	; 0x64
 80050c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c4:	4b91      	ldr	r3, [pc, #580]	; (800530c <_dtoa_r+0x2ec>)
 80050c6:	9308      	str	r3, [sp, #32]
 80050c8:	3303      	adds	r3, #3
 80050ca:	e7f5      	b.n	80050b8 <_dtoa_r+0x98>
 80050cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80050d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80050d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050d8:	2200      	movs	r2, #0
 80050da:	2300      	movs	r3, #0
 80050dc:	f7fb fc64 	bl	80009a8 <__aeabi_dcmpeq>
 80050e0:	4680      	mov	r8, r0
 80050e2:	b158      	cbz	r0, 80050fc <_dtoa_r+0xdc>
 80050e4:	2301      	movs	r3, #1
 80050e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8559 	beq.w	8005ba4 <_dtoa_r+0xb84>
 80050f2:	4888      	ldr	r0, [pc, #544]	; (8005314 <_dtoa_r+0x2f4>)
 80050f4:	6018      	str	r0, [r3, #0]
 80050f6:	1e43      	subs	r3, r0, #1
 80050f8:	9308      	str	r3, [sp, #32]
 80050fa:	e7df      	b.n	80050bc <_dtoa_r+0x9c>
 80050fc:	ab16      	add	r3, sp, #88	; 0x58
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	ab17      	add	r3, sp, #92	; 0x5c
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	4628      	mov	r0, r5
 8005106:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800510a:	f001 f8c5 	bl	8006298 <__d2b>
 800510e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005112:	4682      	mov	sl, r0
 8005114:	2c00      	cmp	r4, #0
 8005116:	d07e      	beq.n	8005216 <_dtoa_r+0x1f6>
 8005118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800511c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800511e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005122:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005126:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800512a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800512e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005132:	2200      	movs	r2, #0
 8005134:	4b78      	ldr	r3, [pc, #480]	; (8005318 <_dtoa_r+0x2f8>)
 8005136:	f7fb f817 	bl	8000168 <__aeabi_dsub>
 800513a:	a36b      	add	r3, pc, #428	; (adr r3, 80052e8 <_dtoa_r+0x2c8>)
 800513c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005140:	f7fb f9ca 	bl	80004d8 <__aeabi_dmul>
 8005144:	a36a      	add	r3, pc, #424	; (adr r3, 80052f0 <_dtoa_r+0x2d0>)
 8005146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514a:	f7fb f80f 	bl	800016c <__adddf3>
 800514e:	4606      	mov	r6, r0
 8005150:	4620      	mov	r0, r4
 8005152:	460f      	mov	r7, r1
 8005154:	f7fb f956 	bl	8000404 <__aeabi_i2d>
 8005158:	a367      	add	r3, pc, #412	; (adr r3, 80052f8 <_dtoa_r+0x2d8>)
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f7fb f9bb 	bl	80004d8 <__aeabi_dmul>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4630      	mov	r0, r6
 8005168:	4639      	mov	r1, r7
 800516a:	f7fa ffff 	bl	800016c <__adddf3>
 800516e:	4606      	mov	r6, r0
 8005170:	460f      	mov	r7, r1
 8005172:	f7fb fc61 	bl	8000a38 <__aeabi_d2iz>
 8005176:	2200      	movs	r2, #0
 8005178:	4681      	mov	r9, r0
 800517a:	2300      	movs	r3, #0
 800517c:	4630      	mov	r0, r6
 800517e:	4639      	mov	r1, r7
 8005180:	f7fb fc1c 	bl	80009bc <__aeabi_dcmplt>
 8005184:	b148      	cbz	r0, 800519a <_dtoa_r+0x17a>
 8005186:	4648      	mov	r0, r9
 8005188:	f7fb f93c 	bl	8000404 <__aeabi_i2d>
 800518c:	4632      	mov	r2, r6
 800518e:	463b      	mov	r3, r7
 8005190:	f7fb fc0a 	bl	80009a8 <__aeabi_dcmpeq>
 8005194:	b908      	cbnz	r0, 800519a <_dtoa_r+0x17a>
 8005196:	f109 39ff 	add.w	r9, r9, #4294967295
 800519a:	f1b9 0f16 	cmp.w	r9, #22
 800519e:	d857      	bhi.n	8005250 <_dtoa_r+0x230>
 80051a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051a4:	4b5d      	ldr	r3, [pc, #372]	; (800531c <_dtoa_r+0x2fc>)
 80051a6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f7fb fc05 	bl	80009bc <__aeabi_dcmplt>
 80051b2:	2800      	cmp	r0, #0
 80051b4:	d04e      	beq.n	8005254 <_dtoa_r+0x234>
 80051b6:	2300      	movs	r3, #0
 80051b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80051bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80051be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80051c0:	1b1c      	subs	r4, r3, r4
 80051c2:	1e63      	subs	r3, r4, #1
 80051c4:	9309      	str	r3, [sp, #36]	; 0x24
 80051c6:	bf49      	itett	mi
 80051c8:	f1c4 0301 	rsbmi	r3, r4, #1
 80051cc:	2300      	movpl	r3, #0
 80051ce:	9306      	strmi	r3, [sp, #24]
 80051d0:	2300      	movmi	r3, #0
 80051d2:	bf54      	ite	pl
 80051d4:	9306      	strpl	r3, [sp, #24]
 80051d6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80051d8:	f1b9 0f00 	cmp.w	r9, #0
 80051dc:	db3c      	blt.n	8005258 <_dtoa_r+0x238>
 80051de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80051e4:	444b      	add	r3, r9
 80051e6:	9309      	str	r3, [sp, #36]	; 0x24
 80051e8:	2300      	movs	r3, #0
 80051ea:	930a      	str	r3, [sp, #40]	; 0x28
 80051ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051ee:	2b09      	cmp	r3, #9
 80051f0:	d86c      	bhi.n	80052cc <_dtoa_r+0x2ac>
 80051f2:	2b05      	cmp	r3, #5
 80051f4:	bfc4      	itt	gt
 80051f6:	3b04      	subgt	r3, #4
 80051f8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80051fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051fc:	bfc8      	it	gt
 80051fe:	2400      	movgt	r4, #0
 8005200:	f1a3 0302 	sub.w	r3, r3, #2
 8005204:	bfd8      	it	le
 8005206:	2401      	movle	r4, #1
 8005208:	2b03      	cmp	r3, #3
 800520a:	f200 808b 	bhi.w	8005324 <_dtoa_r+0x304>
 800520e:	e8df f003 	tbb	[pc, r3]
 8005212:	4f2d      	.short	0x4f2d
 8005214:	5b4d      	.short	0x5b4d
 8005216:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800521a:	441c      	add	r4, r3
 800521c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005220:	2b20      	cmp	r3, #32
 8005222:	bfc3      	ittte	gt
 8005224:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005228:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800522c:	fa09 f303 	lslgt.w	r3, r9, r3
 8005230:	f1c3 0320 	rsble	r3, r3, #32
 8005234:	bfc6      	itte	gt
 8005236:	fa26 f000 	lsrgt.w	r0, r6, r0
 800523a:	4318      	orrgt	r0, r3
 800523c:	fa06 f003 	lslle.w	r0, r6, r3
 8005240:	f7fb f8d0 	bl	80003e4 <__aeabi_ui2d>
 8005244:	2301      	movs	r3, #1
 8005246:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800524a:	3c01      	subs	r4, #1
 800524c:	9313      	str	r3, [sp, #76]	; 0x4c
 800524e:	e770      	b.n	8005132 <_dtoa_r+0x112>
 8005250:	2301      	movs	r3, #1
 8005252:	e7b3      	b.n	80051bc <_dtoa_r+0x19c>
 8005254:	900f      	str	r0, [sp, #60]	; 0x3c
 8005256:	e7b2      	b.n	80051be <_dtoa_r+0x19e>
 8005258:	9b06      	ldr	r3, [sp, #24]
 800525a:	eba3 0309 	sub.w	r3, r3, r9
 800525e:	9306      	str	r3, [sp, #24]
 8005260:	f1c9 0300 	rsb	r3, r9, #0
 8005264:	930a      	str	r3, [sp, #40]	; 0x28
 8005266:	2300      	movs	r3, #0
 8005268:	930e      	str	r3, [sp, #56]	; 0x38
 800526a:	e7bf      	b.n	80051ec <_dtoa_r+0x1cc>
 800526c:	2300      	movs	r3, #0
 800526e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005270:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005272:	2b00      	cmp	r3, #0
 8005274:	dc59      	bgt.n	800532a <_dtoa_r+0x30a>
 8005276:	f04f 0b01 	mov.w	fp, #1
 800527a:	465b      	mov	r3, fp
 800527c:	f8cd b008 	str.w	fp, [sp, #8]
 8005280:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005284:	2200      	movs	r2, #0
 8005286:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005288:	6042      	str	r2, [r0, #4]
 800528a:	2204      	movs	r2, #4
 800528c:	f102 0614 	add.w	r6, r2, #20
 8005290:	429e      	cmp	r6, r3
 8005292:	6841      	ldr	r1, [r0, #4]
 8005294:	d94f      	bls.n	8005336 <_dtoa_r+0x316>
 8005296:	4628      	mov	r0, r5
 8005298:	f000 fcd8 	bl	8005c4c <_Balloc>
 800529c:	9008      	str	r0, [sp, #32]
 800529e:	2800      	cmp	r0, #0
 80052a0:	d14d      	bne.n	800533e <_dtoa_r+0x31e>
 80052a2:	4602      	mov	r2, r0
 80052a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80052a8:	4b1d      	ldr	r3, [pc, #116]	; (8005320 <_dtoa_r+0x300>)
 80052aa:	e6cd      	b.n	8005048 <_dtoa_r+0x28>
 80052ac:	2301      	movs	r3, #1
 80052ae:	e7de      	b.n	800526e <_dtoa_r+0x24e>
 80052b0:	2300      	movs	r3, #0
 80052b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80052b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052b6:	eb09 0b03 	add.w	fp, r9, r3
 80052ba:	f10b 0301 	add.w	r3, fp, #1
 80052be:	2b01      	cmp	r3, #1
 80052c0:	9302      	str	r3, [sp, #8]
 80052c2:	bfb8      	it	lt
 80052c4:	2301      	movlt	r3, #1
 80052c6:	e7dd      	b.n	8005284 <_dtoa_r+0x264>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e7f2      	b.n	80052b2 <_dtoa_r+0x292>
 80052cc:	2401      	movs	r4, #1
 80052ce:	2300      	movs	r3, #0
 80052d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80052d2:	9322      	str	r3, [sp, #136]	; 0x88
 80052d4:	f04f 3bff 	mov.w	fp, #4294967295
 80052d8:	2200      	movs	r2, #0
 80052da:	2312      	movs	r3, #18
 80052dc:	f8cd b008 	str.w	fp, [sp, #8]
 80052e0:	9223      	str	r2, [sp, #140]	; 0x8c
 80052e2:	e7cf      	b.n	8005284 <_dtoa_r+0x264>
 80052e4:	f3af 8000 	nop.w
 80052e8:	636f4361 	.word	0x636f4361
 80052ec:	3fd287a7 	.word	0x3fd287a7
 80052f0:	8b60c8b3 	.word	0x8b60c8b3
 80052f4:	3fc68a28 	.word	0x3fc68a28
 80052f8:	509f79fb 	.word	0x509f79fb
 80052fc:	3fd34413 	.word	0x3fd34413
 8005300:	08007465 	.word	0x08007465
 8005304:	0800747c 	.word	0x0800747c
 8005308:	7ff00000 	.word	0x7ff00000
 800530c:	08007461 	.word	0x08007461
 8005310:	08007458 	.word	0x08007458
 8005314:	08007435 	.word	0x08007435
 8005318:	3ff80000 	.word	0x3ff80000
 800531c:	08007578 	.word	0x08007578
 8005320:	080074db 	.word	0x080074db
 8005324:	2301      	movs	r3, #1
 8005326:	930b      	str	r3, [sp, #44]	; 0x2c
 8005328:	e7d4      	b.n	80052d4 <_dtoa_r+0x2b4>
 800532a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800532e:	465b      	mov	r3, fp
 8005330:	f8cd b008 	str.w	fp, [sp, #8]
 8005334:	e7a6      	b.n	8005284 <_dtoa_r+0x264>
 8005336:	3101      	adds	r1, #1
 8005338:	6041      	str	r1, [r0, #4]
 800533a:	0052      	lsls	r2, r2, #1
 800533c:	e7a6      	b.n	800528c <_dtoa_r+0x26c>
 800533e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005340:	9a08      	ldr	r2, [sp, #32]
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	9b02      	ldr	r3, [sp, #8]
 8005346:	2b0e      	cmp	r3, #14
 8005348:	f200 80a8 	bhi.w	800549c <_dtoa_r+0x47c>
 800534c:	2c00      	cmp	r4, #0
 800534e:	f000 80a5 	beq.w	800549c <_dtoa_r+0x47c>
 8005352:	f1b9 0f00 	cmp.w	r9, #0
 8005356:	dd34      	ble.n	80053c2 <_dtoa_r+0x3a2>
 8005358:	4a9a      	ldr	r2, [pc, #616]	; (80055c4 <_dtoa_r+0x5a4>)
 800535a:	f009 030f 	and.w	r3, r9, #15
 800535e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005362:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005366:	e9d3 3400 	ldrd	r3, r4, [r3]
 800536a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800536e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005372:	d016      	beq.n	80053a2 <_dtoa_r+0x382>
 8005374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005378:	4b93      	ldr	r3, [pc, #588]	; (80055c8 <_dtoa_r+0x5a8>)
 800537a:	2703      	movs	r7, #3
 800537c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005380:	f7fb f9d4 	bl	800072c <__aeabi_ddiv>
 8005384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005388:	f004 040f 	and.w	r4, r4, #15
 800538c:	4e8e      	ldr	r6, [pc, #568]	; (80055c8 <_dtoa_r+0x5a8>)
 800538e:	b954      	cbnz	r4, 80053a6 <_dtoa_r+0x386>
 8005390:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005394:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005398:	f7fb f9c8 	bl	800072c <__aeabi_ddiv>
 800539c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053a0:	e029      	b.n	80053f6 <_dtoa_r+0x3d6>
 80053a2:	2702      	movs	r7, #2
 80053a4:	e7f2      	b.n	800538c <_dtoa_r+0x36c>
 80053a6:	07e1      	lsls	r1, r4, #31
 80053a8:	d508      	bpl.n	80053bc <_dtoa_r+0x39c>
 80053aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80053b2:	f7fb f891 	bl	80004d8 <__aeabi_dmul>
 80053b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053ba:	3701      	adds	r7, #1
 80053bc:	1064      	asrs	r4, r4, #1
 80053be:	3608      	adds	r6, #8
 80053c0:	e7e5      	b.n	800538e <_dtoa_r+0x36e>
 80053c2:	f000 80a5 	beq.w	8005510 <_dtoa_r+0x4f0>
 80053c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053ca:	f1c9 0400 	rsb	r4, r9, #0
 80053ce:	4b7d      	ldr	r3, [pc, #500]	; (80055c4 <_dtoa_r+0x5a4>)
 80053d0:	f004 020f 	and.w	r2, r4, #15
 80053d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f7fb f87c 	bl	80004d8 <__aeabi_dmul>
 80053e0:	2702      	movs	r7, #2
 80053e2:	2300      	movs	r3, #0
 80053e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053e8:	4e77      	ldr	r6, [pc, #476]	; (80055c8 <_dtoa_r+0x5a8>)
 80053ea:	1124      	asrs	r4, r4, #4
 80053ec:	2c00      	cmp	r4, #0
 80053ee:	f040 8084 	bne.w	80054fa <_dtoa_r+0x4da>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1d2      	bne.n	800539c <_dtoa_r+0x37c>
 80053f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 808b 	beq.w	8005514 <_dtoa_r+0x4f4>
 80053fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005402:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005406:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800540a:	2200      	movs	r2, #0
 800540c:	4b6f      	ldr	r3, [pc, #444]	; (80055cc <_dtoa_r+0x5ac>)
 800540e:	f7fb fad5 	bl	80009bc <__aeabi_dcmplt>
 8005412:	2800      	cmp	r0, #0
 8005414:	d07e      	beq.n	8005514 <_dtoa_r+0x4f4>
 8005416:	9b02      	ldr	r3, [sp, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d07b      	beq.n	8005514 <_dtoa_r+0x4f4>
 800541c:	f1bb 0f00 	cmp.w	fp, #0
 8005420:	dd38      	ble.n	8005494 <_dtoa_r+0x474>
 8005422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005426:	2200      	movs	r2, #0
 8005428:	4b69      	ldr	r3, [pc, #420]	; (80055d0 <_dtoa_r+0x5b0>)
 800542a:	f7fb f855 	bl	80004d8 <__aeabi_dmul>
 800542e:	465c      	mov	r4, fp
 8005430:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005434:	f109 38ff 	add.w	r8, r9, #4294967295
 8005438:	3701      	adds	r7, #1
 800543a:	4638      	mov	r0, r7
 800543c:	f7fa ffe2 	bl	8000404 <__aeabi_i2d>
 8005440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005444:	f7fb f848 	bl	80004d8 <__aeabi_dmul>
 8005448:	2200      	movs	r2, #0
 800544a:	4b62      	ldr	r3, [pc, #392]	; (80055d4 <_dtoa_r+0x5b4>)
 800544c:	f7fa fe8e 	bl	800016c <__adddf3>
 8005450:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005454:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005458:	9611      	str	r6, [sp, #68]	; 0x44
 800545a:	2c00      	cmp	r4, #0
 800545c:	d15d      	bne.n	800551a <_dtoa_r+0x4fa>
 800545e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005462:	2200      	movs	r2, #0
 8005464:	4b5c      	ldr	r3, [pc, #368]	; (80055d8 <_dtoa_r+0x5b8>)
 8005466:	f7fa fe7f 	bl	8000168 <__aeabi_dsub>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005472:	4633      	mov	r3, r6
 8005474:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005476:	f7fb fabf 	bl	80009f8 <__aeabi_dcmpgt>
 800547a:	2800      	cmp	r0, #0
 800547c:	f040 829e 	bne.w	80059bc <_dtoa_r+0x99c>
 8005480:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005484:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005486:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800548a:	f7fb fa97 	bl	80009bc <__aeabi_dcmplt>
 800548e:	2800      	cmp	r0, #0
 8005490:	f040 8292 	bne.w	80059b8 <_dtoa_r+0x998>
 8005494:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005498:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800549c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f2c0 8153 	blt.w	800574a <_dtoa_r+0x72a>
 80054a4:	f1b9 0f0e 	cmp.w	r9, #14
 80054a8:	f300 814f 	bgt.w	800574a <_dtoa_r+0x72a>
 80054ac:	4b45      	ldr	r3, [pc, #276]	; (80055c4 <_dtoa_r+0x5a4>)
 80054ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80054b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80054ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f280 80db 	bge.w	8005678 <_dtoa_r+0x658>
 80054c2:	9b02      	ldr	r3, [sp, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f300 80d7 	bgt.w	8005678 <_dtoa_r+0x658>
 80054ca:	f040 8274 	bne.w	80059b6 <_dtoa_r+0x996>
 80054ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054d2:	2200      	movs	r2, #0
 80054d4:	4b40      	ldr	r3, [pc, #256]	; (80055d8 <_dtoa_r+0x5b8>)
 80054d6:	f7fa ffff 	bl	80004d8 <__aeabi_dmul>
 80054da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054de:	f7fb fa81 	bl	80009e4 <__aeabi_dcmpge>
 80054e2:	9c02      	ldr	r4, [sp, #8]
 80054e4:	4626      	mov	r6, r4
 80054e6:	2800      	cmp	r0, #0
 80054e8:	f040 824a 	bne.w	8005980 <_dtoa_r+0x960>
 80054ec:	2331      	movs	r3, #49	; 0x31
 80054ee:	9f08      	ldr	r7, [sp, #32]
 80054f0:	f109 0901 	add.w	r9, r9, #1
 80054f4:	f807 3b01 	strb.w	r3, [r7], #1
 80054f8:	e246      	b.n	8005988 <_dtoa_r+0x968>
 80054fa:	07e2      	lsls	r2, r4, #31
 80054fc:	d505      	bpl.n	800550a <_dtoa_r+0x4ea>
 80054fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005502:	f7fa ffe9 	bl	80004d8 <__aeabi_dmul>
 8005506:	2301      	movs	r3, #1
 8005508:	3701      	adds	r7, #1
 800550a:	1064      	asrs	r4, r4, #1
 800550c:	3608      	adds	r6, #8
 800550e:	e76d      	b.n	80053ec <_dtoa_r+0x3cc>
 8005510:	2702      	movs	r7, #2
 8005512:	e770      	b.n	80053f6 <_dtoa_r+0x3d6>
 8005514:	46c8      	mov	r8, r9
 8005516:	9c02      	ldr	r4, [sp, #8]
 8005518:	e78f      	b.n	800543a <_dtoa_r+0x41a>
 800551a:	9908      	ldr	r1, [sp, #32]
 800551c:	4b29      	ldr	r3, [pc, #164]	; (80055c4 <_dtoa_r+0x5a4>)
 800551e:	4421      	add	r1, r4
 8005520:	9112      	str	r1, [sp, #72]	; 0x48
 8005522:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005524:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005528:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800552c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005530:	2900      	cmp	r1, #0
 8005532:	d055      	beq.n	80055e0 <_dtoa_r+0x5c0>
 8005534:	2000      	movs	r0, #0
 8005536:	4929      	ldr	r1, [pc, #164]	; (80055dc <_dtoa_r+0x5bc>)
 8005538:	f7fb f8f8 	bl	800072c <__aeabi_ddiv>
 800553c:	463b      	mov	r3, r7
 800553e:	4632      	mov	r2, r6
 8005540:	f7fa fe12 	bl	8000168 <__aeabi_dsub>
 8005544:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005548:	9f08      	ldr	r7, [sp, #32]
 800554a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800554e:	f7fb fa73 	bl	8000a38 <__aeabi_d2iz>
 8005552:	4604      	mov	r4, r0
 8005554:	f7fa ff56 	bl	8000404 <__aeabi_i2d>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005560:	f7fa fe02 	bl	8000168 <__aeabi_dsub>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	3430      	adds	r4, #48	; 0x30
 800556a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800556e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005572:	f807 4b01 	strb.w	r4, [r7], #1
 8005576:	f7fb fa21 	bl	80009bc <__aeabi_dcmplt>
 800557a:	2800      	cmp	r0, #0
 800557c:	d174      	bne.n	8005668 <_dtoa_r+0x648>
 800557e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005582:	2000      	movs	r0, #0
 8005584:	4911      	ldr	r1, [pc, #68]	; (80055cc <_dtoa_r+0x5ac>)
 8005586:	f7fa fdef 	bl	8000168 <__aeabi_dsub>
 800558a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800558e:	f7fb fa15 	bl	80009bc <__aeabi_dcmplt>
 8005592:	2800      	cmp	r0, #0
 8005594:	f040 80b6 	bne.w	8005704 <_dtoa_r+0x6e4>
 8005598:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800559a:	429f      	cmp	r7, r3
 800559c:	f43f af7a 	beq.w	8005494 <_dtoa_r+0x474>
 80055a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055a4:	2200      	movs	r2, #0
 80055a6:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <_dtoa_r+0x5b0>)
 80055a8:	f7fa ff96 	bl	80004d8 <__aeabi_dmul>
 80055ac:	2200      	movs	r2, #0
 80055ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055b6:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <_dtoa_r+0x5b0>)
 80055b8:	f7fa ff8e 	bl	80004d8 <__aeabi_dmul>
 80055bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055c0:	e7c3      	b.n	800554a <_dtoa_r+0x52a>
 80055c2:	bf00      	nop
 80055c4:	08007578 	.word	0x08007578
 80055c8:	08007550 	.word	0x08007550
 80055cc:	3ff00000 	.word	0x3ff00000
 80055d0:	40240000 	.word	0x40240000
 80055d4:	401c0000 	.word	0x401c0000
 80055d8:	40140000 	.word	0x40140000
 80055dc:	3fe00000 	.word	0x3fe00000
 80055e0:	4630      	mov	r0, r6
 80055e2:	4639      	mov	r1, r7
 80055e4:	f7fa ff78 	bl	80004d8 <__aeabi_dmul>
 80055e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055ee:	9c08      	ldr	r4, [sp, #32]
 80055f0:	9314      	str	r3, [sp, #80]	; 0x50
 80055f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055f6:	f7fb fa1f 	bl	8000a38 <__aeabi_d2iz>
 80055fa:	9015      	str	r0, [sp, #84]	; 0x54
 80055fc:	f7fa ff02 	bl	8000404 <__aeabi_i2d>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005608:	f7fa fdae 	bl	8000168 <__aeabi_dsub>
 800560c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800560e:	4606      	mov	r6, r0
 8005610:	3330      	adds	r3, #48	; 0x30
 8005612:	f804 3b01 	strb.w	r3, [r4], #1
 8005616:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005618:	460f      	mov	r7, r1
 800561a:	429c      	cmp	r4, r3
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	d124      	bne.n	800566c <_dtoa_r+0x64c>
 8005622:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005626:	4bb3      	ldr	r3, [pc, #716]	; (80058f4 <_dtoa_r+0x8d4>)
 8005628:	f7fa fda0 	bl	800016c <__adddf3>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4630      	mov	r0, r6
 8005632:	4639      	mov	r1, r7
 8005634:	f7fb f9e0 	bl	80009f8 <__aeabi_dcmpgt>
 8005638:	2800      	cmp	r0, #0
 800563a:	d162      	bne.n	8005702 <_dtoa_r+0x6e2>
 800563c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005640:	2000      	movs	r0, #0
 8005642:	49ac      	ldr	r1, [pc, #688]	; (80058f4 <_dtoa_r+0x8d4>)
 8005644:	f7fa fd90 	bl	8000168 <__aeabi_dsub>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4630      	mov	r0, r6
 800564e:	4639      	mov	r1, r7
 8005650:	f7fb f9b4 	bl	80009bc <__aeabi_dcmplt>
 8005654:	2800      	cmp	r0, #0
 8005656:	f43f af1d 	beq.w	8005494 <_dtoa_r+0x474>
 800565a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800565c:	1e7b      	subs	r3, r7, #1
 800565e:	9314      	str	r3, [sp, #80]	; 0x50
 8005660:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005664:	2b30      	cmp	r3, #48	; 0x30
 8005666:	d0f8      	beq.n	800565a <_dtoa_r+0x63a>
 8005668:	46c1      	mov	r9, r8
 800566a:	e03a      	b.n	80056e2 <_dtoa_r+0x6c2>
 800566c:	4ba2      	ldr	r3, [pc, #648]	; (80058f8 <_dtoa_r+0x8d8>)
 800566e:	f7fa ff33 	bl	80004d8 <__aeabi_dmul>
 8005672:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005676:	e7bc      	b.n	80055f2 <_dtoa_r+0x5d2>
 8005678:	9f08      	ldr	r7, [sp, #32]
 800567a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800567e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005682:	f7fb f853 	bl	800072c <__aeabi_ddiv>
 8005686:	f7fb f9d7 	bl	8000a38 <__aeabi_d2iz>
 800568a:	4604      	mov	r4, r0
 800568c:	f7fa feba 	bl	8000404 <__aeabi_i2d>
 8005690:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005694:	f7fa ff20 	bl	80004d8 <__aeabi_dmul>
 8005698:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800569c:	460b      	mov	r3, r1
 800569e:	4602      	mov	r2, r0
 80056a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056a4:	f7fa fd60 	bl	8000168 <__aeabi_dsub>
 80056a8:	f807 6b01 	strb.w	r6, [r7], #1
 80056ac:	9e08      	ldr	r6, [sp, #32]
 80056ae:	9b02      	ldr	r3, [sp, #8]
 80056b0:	1bbe      	subs	r6, r7, r6
 80056b2:	42b3      	cmp	r3, r6
 80056b4:	d13a      	bne.n	800572c <_dtoa_r+0x70c>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	f7fa fd57 	bl	800016c <__adddf3>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056ca:	f7fb f995 	bl	80009f8 <__aeabi_dcmpgt>
 80056ce:	bb58      	cbnz	r0, 8005728 <_dtoa_r+0x708>
 80056d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056d8:	f7fb f966 	bl	80009a8 <__aeabi_dcmpeq>
 80056dc:	b108      	cbz	r0, 80056e2 <_dtoa_r+0x6c2>
 80056de:	07e1      	lsls	r1, r4, #31
 80056e0:	d422      	bmi.n	8005728 <_dtoa_r+0x708>
 80056e2:	4628      	mov	r0, r5
 80056e4:	4651      	mov	r1, sl
 80056e6:	f000 faf1 	bl	8005ccc <_Bfree>
 80056ea:	2300      	movs	r3, #0
 80056ec:	703b      	strb	r3, [r7, #0]
 80056ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80056f0:	f109 0001 	add.w	r0, r9, #1
 80056f4:	6018      	str	r0, [r3, #0]
 80056f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f43f acdf 	beq.w	80050bc <_dtoa_r+0x9c>
 80056fe:	601f      	str	r7, [r3, #0]
 8005700:	e4dc      	b.n	80050bc <_dtoa_r+0x9c>
 8005702:	4627      	mov	r7, r4
 8005704:	463b      	mov	r3, r7
 8005706:	461f      	mov	r7, r3
 8005708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800570c:	2a39      	cmp	r2, #57	; 0x39
 800570e:	d107      	bne.n	8005720 <_dtoa_r+0x700>
 8005710:	9a08      	ldr	r2, [sp, #32]
 8005712:	429a      	cmp	r2, r3
 8005714:	d1f7      	bne.n	8005706 <_dtoa_r+0x6e6>
 8005716:	2230      	movs	r2, #48	; 0x30
 8005718:	9908      	ldr	r1, [sp, #32]
 800571a:	f108 0801 	add.w	r8, r8, #1
 800571e:	700a      	strb	r2, [r1, #0]
 8005720:	781a      	ldrb	r2, [r3, #0]
 8005722:	3201      	adds	r2, #1
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e79f      	b.n	8005668 <_dtoa_r+0x648>
 8005728:	46c8      	mov	r8, r9
 800572a:	e7eb      	b.n	8005704 <_dtoa_r+0x6e4>
 800572c:	2200      	movs	r2, #0
 800572e:	4b72      	ldr	r3, [pc, #456]	; (80058f8 <_dtoa_r+0x8d8>)
 8005730:	f7fa fed2 	bl	80004d8 <__aeabi_dmul>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800573c:	2200      	movs	r2, #0
 800573e:	2300      	movs	r3, #0
 8005740:	f7fb f932 	bl	80009a8 <__aeabi_dcmpeq>
 8005744:	2800      	cmp	r0, #0
 8005746:	d098      	beq.n	800567a <_dtoa_r+0x65a>
 8005748:	e7cb      	b.n	80056e2 <_dtoa_r+0x6c2>
 800574a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800574c:	2a00      	cmp	r2, #0
 800574e:	f000 80cd 	beq.w	80058ec <_dtoa_r+0x8cc>
 8005752:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005754:	2a01      	cmp	r2, #1
 8005756:	f300 80af 	bgt.w	80058b8 <_dtoa_r+0x898>
 800575a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800575c:	2a00      	cmp	r2, #0
 800575e:	f000 80a7 	beq.w	80058b0 <_dtoa_r+0x890>
 8005762:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005766:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005768:	9f06      	ldr	r7, [sp, #24]
 800576a:	9a06      	ldr	r2, [sp, #24]
 800576c:	2101      	movs	r1, #1
 800576e:	441a      	add	r2, r3
 8005770:	9206      	str	r2, [sp, #24]
 8005772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005774:	4628      	mov	r0, r5
 8005776:	441a      	add	r2, r3
 8005778:	9209      	str	r2, [sp, #36]	; 0x24
 800577a:	f000 fb61 	bl	8005e40 <__i2b>
 800577e:	4606      	mov	r6, r0
 8005780:	2f00      	cmp	r7, #0
 8005782:	dd0c      	ble.n	800579e <_dtoa_r+0x77e>
 8005784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005786:	2b00      	cmp	r3, #0
 8005788:	dd09      	ble.n	800579e <_dtoa_r+0x77e>
 800578a:	42bb      	cmp	r3, r7
 800578c:	bfa8      	it	ge
 800578e:	463b      	movge	r3, r7
 8005790:	9a06      	ldr	r2, [sp, #24]
 8005792:	1aff      	subs	r7, r7, r3
 8005794:	1ad2      	subs	r2, r2, r3
 8005796:	9206      	str	r2, [sp, #24]
 8005798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	9309      	str	r3, [sp, #36]	; 0x24
 800579e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057a0:	b1f3      	cbz	r3, 80057e0 <_dtoa_r+0x7c0>
 80057a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80a9 	beq.w	80058fc <_dtoa_r+0x8dc>
 80057aa:	2c00      	cmp	r4, #0
 80057ac:	dd10      	ble.n	80057d0 <_dtoa_r+0x7b0>
 80057ae:	4631      	mov	r1, r6
 80057b0:	4622      	mov	r2, r4
 80057b2:	4628      	mov	r0, r5
 80057b4:	f000 fbfe 	bl	8005fb4 <__pow5mult>
 80057b8:	4652      	mov	r2, sl
 80057ba:	4601      	mov	r1, r0
 80057bc:	4606      	mov	r6, r0
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 fb54 	bl	8005e6c <__multiply>
 80057c4:	4680      	mov	r8, r0
 80057c6:	4651      	mov	r1, sl
 80057c8:	4628      	mov	r0, r5
 80057ca:	f000 fa7f 	bl	8005ccc <_Bfree>
 80057ce:	46c2      	mov	sl, r8
 80057d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057d2:	1b1a      	subs	r2, r3, r4
 80057d4:	d004      	beq.n	80057e0 <_dtoa_r+0x7c0>
 80057d6:	4651      	mov	r1, sl
 80057d8:	4628      	mov	r0, r5
 80057da:	f000 fbeb 	bl	8005fb4 <__pow5mult>
 80057de:	4682      	mov	sl, r0
 80057e0:	2101      	movs	r1, #1
 80057e2:	4628      	mov	r0, r5
 80057e4:	f000 fb2c 	bl	8005e40 <__i2b>
 80057e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057ea:	4604      	mov	r4, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f340 8087 	ble.w	8005900 <_dtoa_r+0x8e0>
 80057f2:	461a      	mov	r2, r3
 80057f4:	4601      	mov	r1, r0
 80057f6:	4628      	mov	r0, r5
 80057f8:	f000 fbdc 	bl	8005fb4 <__pow5mult>
 80057fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057fe:	4604      	mov	r4, r0
 8005800:	2b01      	cmp	r3, #1
 8005802:	f340 8080 	ble.w	8005906 <_dtoa_r+0x8e6>
 8005806:	f04f 0800 	mov.w	r8, #0
 800580a:	6923      	ldr	r3, [r4, #16]
 800580c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005810:	6918      	ldr	r0, [r3, #16]
 8005812:	f000 fac7 	bl	8005da4 <__hi0bits>
 8005816:	f1c0 0020 	rsb	r0, r0, #32
 800581a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581c:	4418      	add	r0, r3
 800581e:	f010 001f 	ands.w	r0, r0, #31
 8005822:	f000 8092 	beq.w	800594a <_dtoa_r+0x92a>
 8005826:	f1c0 0320 	rsb	r3, r0, #32
 800582a:	2b04      	cmp	r3, #4
 800582c:	f340 808a 	ble.w	8005944 <_dtoa_r+0x924>
 8005830:	f1c0 001c 	rsb	r0, r0, #28
 8005834:	9b06      	ldr	r3, [sp, #24]
 8005836:	4407      	add	r7, r0
 8005838:	4403      	add	r3, r0
 800583a:	9306      	str	r3, [sp, #24]
 800583c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583e:	4403      	add	r3, r0
 8005840:	9309      	str	r3, [sp, #36]	; 0x24
 8005842:	9b06      	ldr	r3, [sp, #24]
 8005844:	2b00      	cmp	r3, #0
 8005846:	dd05      	ble.n	8005854 <_dtoa_r+0x834>
 8005848:	4651      	mov	r1, sl
 800584a:	461a      	mov	r2, r3
 800584c:	4628      	mov	r0, r5
 800584e:	f000 fc0b 	bl	8006068 <__lshift>
 8005852:	4682      	mov	sl, r0
 8005854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005856:	2b00      	cmp	r3, #0
 8005858:	dd05      	ble.n	8005866 <_dtoa_r+0x846>
 800585a:	4621      	mov	r1, r4
 800585c:	461a      	mov	r2, r3
 800585e:	4628      	mov	r0, r5
 8005860:	f000 fc02 	bl	8006068 <__lshift>
 8005864:	4604      	mov	r4, r0
 8005866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d070      	beq.n	800594e <_dtoa_r+0x92e>
 800586c:	4621      	mov	r1, r4
 800586e:	4650      	mov	r0, sl
 8005870:	f000 fc66 	bl	8006140 <__mcmp>
 8005874:	2800      	cmp	r0, #0
 8005876:	da6a      	bge.n	800594e <_dtoa_r+0x92e>
 8005878:	2300      	movs	r3, #0
 800587a:	4651      	mov	r1, sl
 800587c:	220a      	movs	r2, #10
 800587e:	4628      	mov	r0, r5
 8005880:	f000 fa46 	bl	8005d10 <__multadd>
 8005884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005886:	4682      	mov	sl, r0
 8005888:	f109 39ff 	add.w	r9, r9, #4294967295
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8193 	beq.w	8005bb8 <_dtoa_r+0xb98>
 8005892:	4631      	mov	r1, r6
 8005894:	2300      	movs	r3, #0
 8005896:	220a      	movs	r2, #10
 8005898:	4628      	mov	r0, r5
 800589a:	f000 fa39 	bl	8005d10 <__multadd>
 800589e:	f1bb 0f00 	cmp.w	fp, #0
 80058a2:	4606      	mov	r6, r0
 80058a4:	f300 8093 	bgt.w	80059ce <_dtoa_r+0x9ae>
 80058a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	dc57      	bgt.n	800595e <_dtoa_r+0x93e>
 80058ae:	e08e      	b.n	80059ce <_dtoa_r+0x9ae>
 80058b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80058b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80058b6:	e756      	b.n	8005766 <_dtoa_r+0x746>
 80058b8:	9b02      	ldr	r3, [sp, #8]
 80058ba:	1e5c      	subs	r4, r3, #1
 80058bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058be:	42a3      	cmp	r3, r4
 80058c0:	bfb7      	itett	lt
 80058c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80058c4:	1b1c      	subge	r4, r3, r4
 80058c6:	1ae2      	sublt	r2, r4, r3
 80058c8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80058ca:	bfbe      	ittt	lt
 80058cc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80058ce:	189b      	addlt	r3, r3, r2
 80058d0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80058d2:	9b02      	ldr	r3, [sp, #8]
 80058d4:	bfb8      	it	lt
 80058d6:	2400      	movlt	r4, #0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	bfbb      	ittet	lt
 80058dc:	9b06      	ldrlt	r3, [sp, #24]
 80058de:	9a02      	ldrlt	r2, [sp, #8]
 80058e0:	9f06      	ldrge	r7, [sp, #24]
 80058e2:	1a9f      	sublt	r7, r3, r2
 80058e4:	bfac      	ite	ge
 80058e6:	9b02      	ldrge	r3, [sp, #8]
 80058e8:	2300      	movlt	r3, #0
 80058ea:	e73e      	b.n	800576a <_dtoa_r+0x74a>
 80058ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058ee:	9f06      	ldr	r7, [sp, #24]
 80058f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80058f2:	e745      	b.n	8005780 <_dtoa_r+0x760>
 80058f4:	3fe00000 	.word	0x3fe00000
 80058f8:	40240000 	.word	0x40240000
 80058fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058fe:	e76a      	b.n	80057d6 <_dtoa_r+0x7b6>
 8005900:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005902:	2b01      	cmp	r3, #1
 8005904:	dc19      	bgt.n	800593a <_dtoa_r+0x91a>
 8005906:	9b04      	ldr	r3, [sp, #16]
 8005908:	b9bb      	cbnz	r3, 800593a <_dtoa_r+0x91a>
 800590a:	9b05      	ldr	r3, [sp, #20]
 800590c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005910:	b99b      	cbnz	r3, 800593a <_dtoa_r+0x91a>
 8005912:	9b05      	ldr	r3, [sp, #20]
 8005914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005918:	0d1b      	lsrs	r3, r3, #20
 800591a:	051b      	lsls	r3, r3, #20
 800591c:	b183      	cbz	r3, 8005940 <_dtoa_r+0x920>
 800591e:	f04f 0801 	mov.w	r8, #1
 8005922:	9b06      	ldr	r3, [sp, #24]
 8005924:	3301      	adds	r3, #1
 8005926:	9306      	str	r3, [sp, #24]
 8005928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800592a:	3301      	adds	r3, #1
 800592c:	9309      	str	r3, [sp, #36]	; 0x24
 800592e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005930:	2b00      	cmp	r3, #0
 8005932:	f47f af6a 	bne.w	800580a <_dtoa_r+0x7ea>
 8005936:	2001      	movs	r0, #1
 8005938:	e76f      	b.n	800581a <_dtoa_r+0x7fa>
 800593a:	f04f 0800 	mov.w	r8, #0
 800593e:	e7f6      	b.n	800592e <_dtoa_r+0x90e>
 8005940:	4698      	mov	r8, r3
 8005942:	e7f4      	b.n	800592e <_dtoa_r+0x90e>
 8005944:	f43f af7d 	beq.w	8005842 <_dtoa_r+0x822>
 8005948:	4618      	mov	r0, r3
 800594a:	301c      	adds	r0, #28
 800594c:	e772      	b.n	8005834 <_dtoa_r+0x814>
 800594e:	9b02      	ldr	r3, [sp, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	dc36      	bgt.n	80059c2 <_dtoa_r+0x9a2>
 8005954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005956:	2b02      	cmp	r3, #2
 8005958:	dd33      	ble.n	80059c2 <_dtoa_r+0x9a2>
 800595a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800595e:	f1bb 0f00 	cmp.w	fp, #0
 8005962:	d10d      	bne.n	8005980 <_dtoa_r+0x960>
 8005964:	4621      	mov	r1, r4
 8005966:	465b      	mov	r3, fp
 8005968:	2205      	movs	r2, #5
 800596a:	4628      	mov	r0, r5
 800596c:	f000 f9d0 	bl	8005d10 <__multadd>
 8005970:	4601      	mov	r1, r0
 8005972:	4604      	mov	r4, r0
 8005974:	4650      	mov	r0, sl
 8005976:	f000 fbe3 	bl	8006140 <__mcmp>
 800597a:	2800      	cmp	r0, #0
 800597c:	f73f adb6 	bgt.w	80054ec <_dtoa_r+0x4cc>
 8005980:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005982:	9f08      	ldr	r7, [sp, #32]
 8005984:	ea6f 0903 	mvn.w	r9, r3
 8005988:	f04f 0800 	mov.w	r8, #0
 800598c:	4621      	mov	r1, r4
 800598e:	4628      	mov	r0, r5
 8005990:	f000 f99c 	bl	8005ccc <_Bfree>
 8005994:	2e00      	cmp	r6, #0
 8005996:	f43f aea4 	beq.w	80056e2 <_dtoa_r+0x6c2>
 800599a:	f1b8 0f00 	cmp.w	r8, #0
 800599e:	d005      	beq.n	80059ac <_dtoa_r+0x98c>
 80059a0:	45b0      	cmp	r8, r6
 80059a2:	d003      	beq.n	80059ac <_dtoa_r+0x98c>
 80059a4:	4641      	mov	r1, r8
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 f990 	bl	8005ccc <_Bfree>
 80059ac:	4631      	mov	r1, r6
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 f98c 	bl	8005ccc <_Bfree>
 80059b4:	e695      	b.n	80056e2 <_dtoa_r+0x6c2>
 80059b6:	2400      	movs	r4, #0
 80059b8:	4626      	mov	r6, r4
 80059ba:	e7e1      	b.n	8005980 <_dtoa_r+0x960>
 80059bc:	46c1      	mov	r9, r8
 80059be:	4626      	mov	r6, r4
 80059c0:	e594      	b.n	80054ec <_dtoa_r+0x4cc>
 80059c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80fc 	beq.w	8005bc6 <_dtoa_r+0xba6>
 80059ce:	2f00      	cmp	r7, #0
 80059d0:	dd05      	ble.n	80059de <_dtoa_r+0x9be>
 80059d2:	4631      	mov	r1, r6
 80059d4:	463a      	mov	r2, r7
 80059d6:	4628      	mov	r0, r5
 80059d8:	f000 fb46 	bl	8006068 <__lshift>
 80059dc:	4606      	mov	r6, r0
 80059de:	f1b8 0f00 	cmp.w	r8, #0
 80059e2:	d05c      	beq.n	8005a9e <_dtoa_r+0xa7e>
 80059e4:	4628      	mov	r0, r5
 80059e6:	6871      	ldr	r1, [r6, #4]
 80059e8:	f000 f930 	bl	8005c4c <_Balloc>
 80059ec:	4607      	mov	r7, r0
 80059ee:	b928      	cbnz	r0, 80059fc <_dtoa_r+0x9dc>
 80059f0:	4602      	mov	r2, r0
 80059f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80059f6:	4b7e      	ldr	r3, [pc, #504]	; (8005bf0 <_dtoa_r+0xbd0>)
 80059f8:	f7ff bb26 	b.w	8005048 <_dtoa_r+0x28>
 80059fc:	6932      	ldr	r2, [r6, #16]
 80059fe:	f106 010c 	add.w	r1, r6, #12
 8005a02:	3202      	adds	r2, #2
 8005a04:	0092      	lsls	r2, r2, #2
 8005a06:	300c      	adds	r0, #12
 8005a08:	f000 f912 	bl	8005c30 <memcpy>
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	4639      	mov	r1, r7
 8005a10:	4628      	mov	r0, r5
 8005a12:	f000 fb29 	bl	8006068 <__lshift>
 8005a16:	46b0      	mov	r8, r6
 8005a18:	4606      	mov	r6, r0
 8005a1a:	9b08      	ldr	r3, [sp, #32]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	9302      	str	r3, [sp, #8]
 8005a20:	9b08      	ldr	r3, [sp, #32]
 8005a22:	445b      	add	r3, fp
 8005a24:	930a      	str	r3, [sp, #40]	; 0x28
 8005a26:	9b04      	ldr	r3, [sp, #16]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a2e:	9b02      	ldr	r3, [sp, #8]
 8005a30:	4621      	mov	r1, r4
 8005a32:	4650      	mov	r0, sl
 8005a34:	f103 3bff 	add.w	fp, r3, #4294967295
 8005a38:	f7ff fa62 	bl	8004f00 <quorem>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4641      	mov	r1, r8
 8005a40:	3330      	adds	r3, #48	; 0x30
 8005a42:	9004      	str	r0, [sp, #16]
 8005a44:	4650      	mov	r0, sl
 8005a46:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a48:	f000 fb7a 	bl	8006140 <__mcmp>
 8005a4c:	4632      	mov	r2, r6
 8005a4e:	9006      	str	r0, [sp, #24]
 8005a50:	4621      	mov	r1, r4
 8005a52:	4628      	mov	r0, r5
 8005a54:	f000 fb90 	bl	8006178 <__mdiff>
 8005a58:	68c2      	ldr	r2, [r0, #12]
 8005a5a:	4607      	mov	r7, r0
 8005a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a5e:	bb02      	cbnz	r2, 8005aa2 <_dtoa_r+0xa82>
 8005a60:	4601      	mov	r1, r0
 8005a62:	4650      	mov	r0, sl
 8005a64:	f000 fb6c 	bl	8006140 <__mcmp>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a6c:	4639      	mov	r1, r7
 8005a6e:	4628      	mov	r0, r5
 8005a70:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005a74:	f000 f92a 	bl	8005ccc <_Bfree>
 8005a78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a7c:	9f02      	ldr	r7, [sp, #8]
 8005a7e:	ea43 0102 	orr.w	r1, r3, r2
 8005a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a84:	430b      	orrs	r3, r1
 8005a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a88:	d10d      	bne.n	8005aa6 <_dtoa_r+0xa86>
 8005a8a:	2b39      	cmp	r3, #57	; 0x39
 8005a8c:	d027      	beq.n	8005ade <_dtoa_r+0xabe>
 8005a8e:	9a06      	ldr	r2, [sp, #24]
 8005a90:	2a00      	cmp	r2, #0
 8005a92:	dd01      	ble.n	8005a98 <_dtoa_r+0xa78>
 8005a94:	9b04      	ldr	r3, [sp, #16]
 8005a96:	3331      	adds	r3, #49	; 0x31
 8005a98:	f88b 3000 	strb.w	r3, [fp]
 8005a9c:	e776      	b.n	800598c <_dtoa_r+0x96c>
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	e7b9      	b.n	8005a16 <_dtoa_r+0x9f6>
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	e7e2      	b.n	8005a6c <_dtoa_r+0xa4c>
 8005aa6:	9906      	ldr	r1, [sp, #24]
 8005aa8:	2900      	cmp	r1, #0
 8005aaa:	db04      	blt.n	8005ab6 <_dtoa_r+0xa96>
 8005aac:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005aae:	4301      	orrs	r1, r0
 8005ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ab2:	4301      	orrs	r1, r0
 8005ab4:	d120      	bne.n	8005af8 <_dtoa_r+0xad8>
 8005ab6:	2a00      	cmp	r2, #0
 8005ab8:	ddee      	ble.n	8005a98 <_dtoa_r+0xa78>
 8005aba:	4651      	mov	r1, sl
 8005abc:	2201      	movs	r2, #1
 8005abe:	4628      	mov	r0, r5
 8005ac0:	9302      	str	r3, [sp, #8]
 8005ac2:	f000 fad1 	bl	8006068 <__lshift>
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	4682      	mov	sl, r0
 8005aca:	f000 fb39 	bl	8006140 <__mcmp>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	9b02      	ldr	r3, [sp, #8]
 8005ad2:	dc02      	bgt.n	8005ada <_dtoa_r+0xaba>
 8005ad4:	d1e0      	bne.n	8005a98 <_dtoa_r+0xa78>
 8005ad6:	07da      	lsls	r2, r3, #31
 8005ad8:	d5de      	bpl.n	8005a98 <_dtoa_r+0xa78>
 8005ada:	2b39      	cmp	r3, #57	; 0x39
 8005adc:	d1da      	bne.n	8005a94 <_dtoa_r+0xa74>
 8005ade:	2339      	movs	r3, #57	; 0x39
 8005ae0:	f88b 3000 	strb.w	r3, [fp]
 8005ae4:	463b      	mov	r3, r7
 8005ae6:	461f      	mov	r7, r3
 8005ae8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	2a39      	cmp	r2, #57	; 0x39
 8005af0:	d050      	beq.n	8005b94 <_dtoa_r+0xb74>
 8005af2:	3201      	adds	r2, #1
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	e749      	b.n	800598c <_dtoa_r+0x96c>
 8005af8:	2a00      	cmp	r2, #0
 8005afa:	dd03      	ble.n	8005b04 <_dtoa_r+0xae4>
 8005afc:	2b39      	cmp	r3, #57	; 0x39
 8005afe:	d0ee      	beq.n	8005ade <_dtoa_r+0xabe>
 8005b00:	3301      	adds	r3, #1
 8005b02:	e7c9      	b.n	8005a98 <_dtoa_r+0xa78>
 8005b04:	9a02      	ldr	r2, [sp, #8]
 8005b06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005b0c:	428a      	cmp	r2, r1
 8005b0e:	d02a      	beq.n	8005b66 <_dtoa_r+0xb46>
 8005b10:	4651      	mov	r1, sl
 8005b12:	2300      	movs	r3, #0
 8005b14:	220a      	movs	r2, #10
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 f8fa 	bl	8005d10 <__multadd>
 8005b1c:	45b0      	cmp	r8, r6
 8005b1e:	4682      	mov	sl, r0
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	f04f 020a 	mov.w	r2, #10
 8005b28:	4641      	mov	r1, r8
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	d107      	bne.n	8005b3e <_dtoa_r+0xb1e>
 8005b2e:	f000 f8ef 	bl	8005d10 <__multadd>
 8005b32:	4680      	mov	r8, r0
 8005b34:	4606      	mov	r6, r0
 8005b36:	9b02      	ldr	r3, [sp, #8]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	9302      	str	r3, [sp, #8]
 8005b3c:	e777      	b.n	8005a2e <_dtoa_r+0xa0e>
 8005b3e:	f000 f8e7 	bl	8005d10 <__multadd>
 8005b42:	4631      	mov	r1, r6
 8005b44:	4680      	mov	r8, r0
 8005b46:	2300      	movs	r3, #0
 8005b48:	220a      	movs	r2, #10
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 f8e0 	bl	8005d10 <__multadd>
 8005b50:	4606      	mov	r6, r0
 8005b52:	e7f0      	b.n	8005b36 <_dtoa_r+0xb16>
 8005b54:	f1bb 0f00 	cmp.w	fp, #0
 8005b58:	bfcc      	ite	gt
 8005b5a:	465f      	movgt	r7, fp
 8005b5c:	2701      	movle	r7, #1
 8005b5e:	f04f 0800 	mov.w	r8, #0
 8005b62:	9a08      	ldr	r2, [sp, #32]
 8005b64:	4417      	add	r7, r2
 8005b66:	4651      	mov	r1, sl
 8005b68:	2201      	movs	r2, #1
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	9302      	str	r3, [sp, #8]
 8005b6e:	f000 fa7b 	bl	8006068 <__lshift>
 8005b72:	4621      	mov	r1, r4
 8005b74:	4682      	mov	sl, r0
 8005b76:	f000 fae3 	bl	8006140 <__mcmp>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	dcb2      	bgt.n	8005ae4 <_dtoa_r+0xac4>
 8005b7e:	d102      	bne.n	8005b86 <_dtoa_r+0xb66>
 8005b80:	9b02      	ldr	r3, [sp, #8]
 8005b82:	07db      	lsls	r3, r3, #31
 8005b84:	d4ae      	bmi.n	8005ae4 <_dtoa_r+0xac4>
 8005b86:	463b      	mov	r3, r7
 8005b88:	461f      	mov	r7, r3
 8005b8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b8e:	2a30      	cmp	r2, #48	; 0x30
 8005b90:	d0fa      	beq.n	8005b88 <_dtoa_r+0xb68>
 8005b92:	e6fb      	b.n	800598c <_dtoa_r+0x96c>
 8005b94:	9a08      	ldr	r2, [sp, #32]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d1a5      	bne.n	8005ae6 <_dtoa_r+0xac6>
 8005b9a:	2331      	movs	r3, #49	; 0x31
 8005b9c:	f109 0901 	add.w	r9, r9, #1
 8005ba0:	7013      	strb	r3, [r2, #0]
 8005ba2:	e6f3      	b.n	800598c <_dtoa_r+0x96c>
 8005ba4:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <_dtoa_r+0xbd4>)
 8005ba6:	f7ff baa7 	b.w	80050f8 <_dtoa_r+0xd8>
 8005baa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f47f aa80 	bne.w	80050b2 <_dtoa_r+0x92>
 8005bb2:	4b11      	ldr	r3, [pc, #68]	; (8005bf8 <_dtoa_r+0xbd8>)
 8005bb4:	f7ff baa0 	b.w	80050f8 <_dtoa_r+0xd8>
 8005bb8:	f1bb 0f00 	cmp.w	fp, #0
 8005bbc:	dc03      	bgt.n	8005bc6 <_dtoa_r+0xba6>
 8005bbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	f73f aecc 	bgt.w	800595e <_dtoa_r+0x93e>
 8005bc6:	9f08      	ldr	r7, [sp, #32]
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4650      	mov	r0, sl
 8005bcc:	f7ff f998 	bl	8004f00 <quorem>
 8005bd0:	9a08      	ldr	r2, [sp, #32]
 8005bd2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005bd6:	f807 3b01 	strb.w	r3, [r7], #1
 8005bda:	1aba      	subs	r2, r7, r2
 8005bdc:	4593      	cmp	fp, r2
 8005bde:	ddb9      	ble.n	8005b54 <_dtoa_r+0xb34>
 8005be0:	4651      	mov	r1, sl
 8005be2:	2300      	movs	r3, #0
 8005be4:	220a      	movs	r2, #10
 8005be6:	4628      	mov	r0, r5
 8005be8:	f000 f892 	bl	8005d10 <__multadd>
 8005bec:	4682      	mov	sl, r0
 8005bee:	e7eb      	b.n	8005bc8 <_dtoa_r+0xba8>
 8005bf0:	080074db 	.word	0x080074db
 8005bf4:	08007434 	.word	0x08007434
 8005bf8:	08007458 	.word	0x08007458

08005bfc <_localeconv_r>:
 8005bfc:	4800      	ldr	r0, [pc, #0]	; (8005c00 <_localeconv_r+0x4>)
 8005bfe:	4770      	bx	lr
 8005c00:	20000168 	.word	0x20000168

08005c04 <malloc>:
 8005c04:	4b02      	ldr	r3, [pc, #8]	; (8005c10 <malloc+0xc>)
 8005c06:	4601      	mov	r1, r0
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	f000 bbfb 	b.w	8006404 <_malloc_r>
 8005c0e:	bf00      	nop
 8005c10:	20000014 	.word	0x20000014

08005c14 <memchr>:
 8005c14:	4603      	mov	r3, r0
 8005c16:	b510      	push	{r4, lr}
 8005c18:	b2c9      	uxtb	r1, r1
 8005c1a:	4402      	add	r2, r0
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	4618      	mov	r0, r3
 8005c20:	d101      	bne.n	8005c26 <memchr+0x12>
 8005c22:	2000      	movs	r0, #0
 8005c24:	e003      	b.n	8005c2e <memchr+0x1a>
 8005c26:	7804      	ldrb	r4, [r0, #0]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	428c      	cmp	r4, r1
 8005c2c:	d1f6      	bne.n	8005c1c <memchr+0x8>
 8005c2e:	bd10      	pop	{r4, pc}

08005c30 <memcpy>:
 8005c30:	440a      	add	r2, r1
 8005c32:	4291      	cmp	r1, r2
 8005c34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c38:	d100      	bne.n	8005c3c <memcpy+0xc>
 8005c3a:	4770      	bx	lr
 8005c3c:	b510      	push	{r4, lr}
 8005c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c42:	4291      	cmp	r1, r2
 8005c44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c48:	d1f9      	bne.n	8005c3e <memcpy+0xe>
 8005c4a:	bd10      	pop	{r4, pc}

08005c4c <_Balloc>:
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c50:	4604      	mov	r4, r0
 8005c52:	460d      	mov	r5, r1
 8005c54:	b976      	cbnz	r6, 8005c74 <_Balloc+0x28>
 8005c56:	2010      	movs	r0, #16
 8005c58:	f7ff ffd4 	bl	8005c04 <malloc>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	6260      	str	r0, [r4, #36]	; 0x24
 8005c60:	b920      	cbnz	r0, 8005c6c <_Balloc+0x20>
 8005c62:	2166      	movs	r1, #102	; 0x66
 8005c64:	4b17      	ldr	r3, [pc, #92]	; (8005cc4 <_Balloc+0x78>)
 8005c66:	4818      	ldr	r0, [pc, #96]	; (8005cc8 <_Balloc+0x7c>)
 8005c68:	f000 fd92 	bl	8006790 <__assert_func>
 8005c6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c70:	6006      	str	r6, [r0, #0]
 8005c72:	60c6      	str	r6, [r0, #12]
 8005c74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c76:	68f3      	ldr	r3, [r6, #12]
 8005c78:	b183      	cbz	r3, 8005c9c <_Balloc+0x50>
 8005c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c82:	b9b8      	cbnz	r0, 8005cb4 <_Balloc+0x68>
 8005c84:	2101      	movs	r1, #1
 8005c86:	fa01 f605 	lsl.w	r6, r1, r5
 8005c8a:	1d72      	adds	r2, r6, #5
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	0092      	lsls	r2, r2, #2
 8005c90:	f000 fb5e 	bl	8006350 <_calloc_r>
 8005c94:	b160      	cbz	r0, 8005cb0 <_Balloc+0x64>
 8005c96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c9a:	e00e      	b.n	8005cba <_Balloc+0x6e>
 8005c9c:	2221      	movs	r2, #33	; 0x21
 8005c9e:	2104      	movs	r1, #4
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 fb55 	bl	8006350 <_calloc_r>
 8005ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ca8:	60f0      	str	r0, [r6, #12]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e4      	bne.n	8005c7a <_Balloc+0x2e>
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	6802      	ldr	r2, [r0, #0]
 8005cb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005cc0:	e7f7      	b.n	8005cb2 <_Balloc+0x66>
 8005cc2:	bf00      	nop
 8005cc4:	08007465 	.word	0x08007465
 8005cc8:	080074ec 	.word	0x080074ec

08005ccc <_Bfree>:
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	460c      	mov	r4, r1
 8005cd4:	b976      	cbnz	r6, 8005cf4 <_Bfree+0x28>
 8005cd6:	2010      	movs	r0, #16
 8005cd8:	f7ff ff94 	bl	8005c04 <malloc>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	6268      	str	r0, [r5, #36]	; 0x24
 8005ce0:	b920      	cbnz	r0, 8005cec <_Bfree+0x20>
 8005ce2:	218a      	movs	r1, #138	; 0x8a
 8005ce4:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <_Bfree+0x3c>)
 8005ce6:	4809      	ldr	r0, [pc, #36]	; (8005d0c <_Bfree+0x40>)
 8005ce8:	f000 fd52 	bl	8006790 <__assert_func>
 8005cec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cf0:	6006      	str	r6, [r0, #0]
 8005cf2:	60c6      	str	r6, [r0, #12]
 8005cf4:	b13c      	cbz	r4, 8005d06 <_Bfree+0x3a>
 8005cf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cf8:	6862      	ldr	r2, [r4, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d00:	6021      	str	r1, [r4, #0]
 8005d02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d06:	bd70      	pop	{r4, r5, r6, pc}
 8005d08:	08007465 	.word	0x08007465
 8005d0c:	080074ec 	.word	0x080074ec

08005d10 <__multadd>:
 8005d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d14:	4698      	mov	r8, r3
 8005d16:	460c      	mov	r4, r1
 8005d18:	2300      	movs	r3, #0
 8005d1a:	690e      	ldr	r6, [r1, #16]
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	f101 0014 	add.w	r0, r1, #20
 8005d22:	6805      	ldr	r5, [r0, #0]
 8005d24:	3301      	adds	r3, #1
 8005d26:	b2a9      	uxth	r1, r5
 8005d28:	fb02 8101 	mla	r1, r2, r1, r8
 8005d2c:	0c2d      	lsrs	r5, r5, #16
 8005d2e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005d32:	fb02 c505 	mla	r5, r2, r5, ip
 8005d36:	b289      	uxth	r1, r1
 8005d38:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005d3c:	429e      	cmp	r6, r3
 8005d3e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005d42:	f840 1b04 	str.w	r1, [r0], #4
 8005d46:	dcec      	bgt.n	8005d22 <__multadd+0x12>
 8005d48:	f1b8 0f00 	cmp.w	r8, #0
 8005d4c:	d022      	beq.n	8005d94 <__multadd+0x84>
 8005d4e:	68a3      	ldr	r3, [r4, #8]
 8005d50:	42b3      	cmp	r3, r6
 8005d52:	dc19      	bgt.n	8005d88 <__multadd+0x78>
 8005d54:	6861      	ldr	r1, [r4, #4]
 8005d56:	4638      	mov	r0, r7
 8005d58:	3101      	adds	r1, #1
 8005d5a:	f7ff ff77 	bl	8005c4c <_Balloc>
 8005d5e:	4605      	mov	r5, r0
 8005d60:	b928      	cbnz	r0, 8005d6e <__multadd+0x5e>
 8005d62:	4602      	mov	r2, r0
 8005d64:	21b5      	movs	r1, #181	; 0xb5
 8005d66:	4b0d      	ldr	r3, [pc, #52]	; (8005d9c <__multadd+0x8c>)
 8005d68:	480d      	ldr	r0, [pc, #52]	; (8005da0 <__multadd+0x90>)
 8005d6a:	f000 fd11 	bl	8006790 <__assert_func>
 8005d6e:	6922      	ldr	r2, [r4, #16]
 8005d70:	f104 010c 	add.w	r1, r4, #12
 8005d74:	3202      	adds	r2, #2
 8005d76:	0092      	lsls	r2, r2, #2
 8005d78:	300c      	adds	r0, #12
 8005d7a:	f7ff ff59 	bl	8005c30 <memcpy>
 8005d7e:	4621      	mov	r1, r4
 8005d80:	4638      	mov	r0, r7
 8005d82:	f7ff ffa3 	bl	8005ccc <_Bfree>
 8005d86:	462c      	mov	r4, r5
 8005d88:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005d8c:	3601      	adds	r6, #1
 8005d8e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005d92:	6126      	str	r6, [r4, #16]
 8005d94:	4620      	mov	r0, r4
 8005d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d9a:	bf00      	nop
 8005d9c:	080074db 	.word	0x080074db
 8005da0:	080074ec 	.word	0x080074ec

08005da4 <__hi0bits>:
 8005da4:	0c02      	lsrs	r2, r0, #16
 8005da6:	0412      	lsls	r2, r2, #16
 8005da8:	4603      	mov	r3, r0
 8005daa:	b9ca      	cbnz	r2, 8005de0 <__hi0bits+0x3c>
 8005dac:	0403      	lsls	r3, r0, #16
 8005dae:	2010      	movs	r0, #16
 8005db0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005db4:	bf04      	itt	eq
 8005db6:	021b      	lsleq	r3, r3, #8
 8005db8:	3008      	addeq	r0, #8
 8005dba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005dbe:	bf04      	itt	eq
 8005dc0:	011b      	lsleq	r3, r3, #4
 8005dc2:	3004      	addeq	r0, #4
 8005dc4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005dc8:	bf04      	itt	eq
 8005dca:	009b      	lsleq	r3, r3, #2
 8005dcc:	3002      	addeq	r0, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	db05      	blt.n	8005dde <__hi0bits+0x3a>
 8005dd2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005dd6:	f100 0001 	add.w	r0, r0, #1
 8005dda:	bf08      	it	eq
 8005ddc:	2020      	moveq	r0, #32
 8005dde:	4770      	bx	lr
 8005de0:	2000      	movs	r0, #0
 8005de2:	e7e5      	b.n	8005db0 <__hi0bits+0xc>

08005de4 <__lo0bits>:
 8005de4:	6803      	ldr	r3, [r0, #0]
 8005de6:	4602      	mov	r2, r0
 8005de8:	f013 0007 	ands.w	r0, r3, #7
 8005dec:	d00b      	beq.n	8005e06 <__lo0bits+0x22>
 8005dee:	07d9      	lsls	r1, r3, #31
 8005df0:	d422      	bmi.n	8005e38 <__lo0bits+0x54>
 8005df2:	0798      	lsls	r0, r3, #30
 8005df4:	bf49      	itett	mi
 8005df6:	085b      	lsrmi	r3, r3, #1
 8005df8:	089b      	lsrpl	r3, r3, #2
 8005dfa:	2001      	movmi	r0, #1
 8005dfc:	6013      	strmi	r3, [r2, #0]
 8005dfe:	bf5c      	itt	pl
 8005e00:	2002      	movpl	r0, #2
 8005e02:	6013      	strpl	r3, [r2, #0]
 8005e04:	4770      	bx	lr
 8005e06:	b299      	uxth	r1, r3
 8005e08:	b909      	cbnz	r1, 8005e0e <__lo0bits+0x2a>
 8005e0a:	2010      	movs	r0, #16
 8005e0c:	0c1b      	lsrs	r3, r3, #16
 8005e0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005e12:	bf04      	itt	eq
 8005e14:	0a1b      	lsreq	r3, r3, #8
 8005e16:	3008      	addeq	r0, #8
 8005e18:	0719      	lsls	r1, r3, #28
 8005e1a:	bf04      	itt	eq
 8005e1c:	091b      	lsreq	r3, r3, #4
 8005e1e:	3004      	addeq	r0, #4
 8005e20:	0799      	lsls	r1, r3, #30
 8005e22:	bf04      	itt	eq
 8005e24:	089b      	lsreq	r3, r3, #2
 8005e26:	3002      	addeq	r0, #2
 8005e28:	07d9      	lsls	r1, r3, #31
 8005e2a:	d403      	bmi.n	8005e34 <__lo0bits+0x50>
 8005e2c:	085b      	lsrs	r3, r3, #1
 8005e2e:	f100 0001 	add.w	r0, r0, #1
 8005e32:	d003      	beq.n	8005e3c <__lo0bits+0x58>
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	4770      	bx	lr
 8005e38:	2000      	movs	r0, #0
 8005e3a:	4770      	bx	lr
 8005e3c:	2020      	movs	r0, #32
 8005e3e:	4770      	bx	lr

08005e40 <__i2b>:
 8005e40:	b510      	push	{r4, lr}
 8005e42:	460c      	mov	r4, r1
 8005e44:	2101      	movs	r1, #1
 8005e46:	f7ff ff01 	bl	8005c4c <_Balloc>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	b928      	cbnz	r0, 8005e5a <__i2b+0x1a>
 8005e4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e52:	4b04      	ldr	r3, [pc, #16]	; (8005e64 <__i2b+0x24>)
 8005e54:	4804      	ldr	r0, [pc, #16]	; (8005e68 <__i2b+0x28>)
 8005e56:	f000 fc9b 	bl	8006790 <__assert_func>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	6144      	str	r4, [r0, #20]
 8005e5e:	6103      	str	r3, [r0, #16]
 8005e60:	bd10      	pop	{r4, pc}
 8005e62:	bf00      	nop
 8005e64:	080074db 	.word	0x080074db
 8005e68:	080074ec 	.word	0x080074ec

08005e6c <__multiply>:
 8005e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e70:	4614      	mov	r4, r2
 8005e72:	690a      	ldr	r2, [r1, #16]
 8005e74:	6923      	ldr	r3, [r4, #16]
 8005e76:	460d      	mov	r5, r1
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	bfbe      	ittt	lt
 8005e7c:	460b      	movlt	r3, r1
 8005e7e:	4625      	movlt	r5, r4
 8005e80:	461c      	movlt	r4, r3
 8005e82:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005e86:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005e8a:	68ab      	ldr	r3, [r5, #8]
 8005e8c:	6869      	ldr	r1, [r5, #4]
 8005e8e:	eb0a 0709 	add.w	r7, sl, r9
 8005e92:	42bb      	cmp	r3, r7
 8005e94:	b085      	sub	sp, #20
 8005e96:	bfb8      	it	lt
 8005e98:	3101      	addlt	r1, #1
 8005e9a:	f7ff fed7 	bl	8005c4c <_Balloc>
 8005e9e:	b930      	cbnz	r0, 8005eae <__multiply+0x42>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	f240 115d 	movw	r1, #349	; 0x15d
 8005ea6:	4b41      	ldr	r3, [pc, #260]	; (8005fac <__multiply+0x140>)
 8005ea8:	4841      	ldr	r0, [pc, #260]	; (8005fb0 <__multiply+0x144>)
 8005eaa:	f000 fc71 	bl	8006790 <__assert_func>
 8005eae:	f100 0614 	add.w	r6, r0, #20
 8005eb2:	4633      	mov	r3, r6
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005eba:	4543      	cmp	r3, r8
 8005ebc:	d31e      	bcc.n	8005efc <__multiply+0x90>
 8005ebe:	f105 0c14 	add.w	ip, r5, #20
 8005ec2:	f104 0314 	add.w	r3, r4, #20
 8005ec6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005eca:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005ece:	9202      	str	r2, [sp, #8]
 8005ed0:	ebac 0205 	sub.w	r2, ip, r5
 8005ed4:	3a15      	subs	r2, #21
 8005ed6:	f022 0203 	bic.w	r2, r2, #3
 8005eda:	3204      	adds	r2, #4
 8005edc:	f105 0115 	add.w	r1, r5, #21
 8005ee0:	458c      	cmp	ip, r1
 8005ee2:	bf38      	it	cc
 8005ee4:	2204      	movcc	r2, #4
 8005ee6:	9201      	str	r2, [sp, #4]
 8005ee8:	9a02      	ldr	r2, [sp, #8]
 8005eea:	9303      	str	r3, [sp, #12]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d808      	bhi.n	8005f02 <__multiply+0x96>
 8005ef0:	2f00      	cmp	r7, #0
 8005ef2:	dc55      	bgt.n	8005fa0 <__multiply+0x134>
 8005ef4:	6107      	str	r7, [r0, #16]
 8005ef6:	b005      	add	sp, #20
 8005ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efc:	f843 2b04 	str.w	r2, [r3], #4
 8005f00:	e7db      	b.n	8005eba <__multiply+0x4e>
 8005f02:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f06:	f1ba 0f00 	cmp.w	sl, #0
 8005f0a:	d020      	beq.n	8005f4e <__multiply+0xe2>
 8005f0c:	46b1      	mov	r9, r6
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f105 0e14 	add.w	lr, r5, #20
 8005f14:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005f18:	f8d9 b000 	ldr.w	fp, [r9]
 8005f1c:	b2a1      	uxth	r1, r4
 8005f1e:	fa1f fb8b 	uxth.w	fp, fp
 8005f22:	fb0a b101 	mla	r1, sl, r1, fp
 8005f26:	4411      	add	r1, r2
 8005f28:	f8d9 2000 	ldr.w	r2, [r9]
 8005f2c:	0c24      	lsrs	r4, r4, #16
 8005f2e:	0c12      	lsrs	r2, r2, #16
 8005f30:	fb0a 2404 	mla	r4, sl, r4, r2
 8005f34:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005f38:	b289      	uxth	r1, r1
 8005f3a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005f3e:	45f4      	cmp	ip, lr
 8005f40:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005f44:	f849 1b04 	str.w	r1, [r9], #4
 8005f48:	d8e4      	bhi.n	8005f14 <__multiply+0xa8>
 8005f4a:	9901      	ldr	r1, [sp, #4]
 8005f4c:	5072      	str	r2, [r6, r1]
 8005f4e:	9a03      	ldr	r2, [sp, #12]
 8005f50:	3304      	adds	r3, #4
 8005f52:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f56:	f1b9 0f00 	cmp.w	r9, #0
 8005f5a:	d01f      	beq.n	8005f9c <__multiply+0x130>
 8005f5c:	46b6      	mov	lr, r6
 8005f5e:	f04f 0a00 	mov.w	sl, #0
 8005f62:	6834      	ldr	r4, [r6, #0]
 8005f64:	f105 0114 	add.w	r1, r5, #20
 8005f68:	880a      	ldrh	r2, [r1, #0]
 8005f6a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005f6e:	b2a4      	uxth	r4, r4
 8005f70:	fb09 b202 	mla	r2, r9, r2, fp
 8005f74:	4492      	add	sl, r2
 8005f76:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005f7a:	f84e 4b04 	str.w	r4, [lr], #4
 8005f7e:	f851 4b04 	ldr.w	r4, [r1], #4
 8005f82:	f8be 2000 	ldrh.w	r2, [lr]
 8005f86:	0c24      	lsrs	r4, r4, #16
 8005f88:	fb09 2404 	mla	r4, r9, r4, r2
 8005f8c:	458c      	cmp	ip, r1
 8005f8e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005f92:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005f96:	d8e7      	bhi.n	8005f68 <__multiply+0xfc>
 8005f98:	9a01      	ldr	r2, [sp, #4]
 8005f9a:	50b4      	str	r4, [r6, r2]
 8005f9c:	3604      	adds	r6, #4
 8005f9e:	e7a3      	b.n	8005ee8 <__multiply+0x7c>
 8005fa0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1a5      	bne.n	8005ef4 <__multiply+0x88>
 8005fa8:	3f01      	subs	r7, #1
 8005faa:	e7a1      	b.n	8005ef0 <__multiply+0x84>
 8005fac:	080074db 	.word	0x080074db
 8005fb0:	080074ec 	.word	0x080074ec

08005fb4 <__pow5mult>:
 8005fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fb8:	4615      	mov	r5, r2
 8005fba:	f012 0203 	ands.w	r2, r2, #3
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	460f      	mov	r7, r1
 8005fc2:	d007      	beq.n	8005fd4 <__pow5mult+0x20>
 8005fc4:	4c25      	ldr	r4, [pc, #148]	; (800605c <__pow5mult+0xa8>)
 8005fc6:	3a01      	subs	r2, #1
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fce:	f7ff fe9f 	bl	8005d10 <__multadd>
 8005fd2:	4607      	mov	r7, r0
 8005fd4:	10ad      	asrs	r5, r5, #2
 8005fd6:	d03d      	beq.n	8006054 <__pow5mult+0xa0>
 8005fd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005fda:	b97c      	cbnz	r4, 8005ffc <__pow5mult+0x48>
 8005fdc:	2010      	movs	r0, #16
 8005fde:	f7ff fe11 	bl	8005c04 <malloc>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	6270      	str	r0, [r6, #36]	; 0x24
 8005fe6:	b928      	cbnz	r0, 8005ff4 <__pow5mult+0x40>
 8005fe8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005fec:	4b1c      	ldr	r3, [pc, #112]	; (8006060 <__pow5mult+0xac>)
 8005fee:	481d      	ldr	r0, [pc, #116]	; (8006064 <__pow5mult+0xb0>)
 8005ff0:	f000 fbce 	bl	8006790 <__assert_func>
 8005ff4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ff8:	6004      	str	r4, [r0, #0]
 8005ffa:	60c4      	str	r4, [r0, #12]
 8005ffc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006000:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006004:	b94c      	cbnz	r4, 800601a <__pow5mult+0x66>
 8006006:	f240 2171 	movw	r1, #625	; 0x271
 800600a:	4630      	mov	r0, r6
 800600c:	f7ff ff18 	bl	8005e40 <__i2b>
 8006010:	2300      	movs	r3, #0
 8006012:	4604      	mov	r4, r0
 8006014:	f8c8 0008 	str.w	r0, [r8, #8]
 8006018:	6003      	str	r3, [r0, #0]
 800601a:	f04f 0900 	mov.w	r9, #0
 800601e:	07eb      	lsls	r3, r5, #31
 8006020:	d50a      	bpl.n	8006038 <__pow5mult+0x84>
 8006022:	4639      	mov	r1, r7
 8006024:	4622      	mov	r2, r4
 8006026:	4630      	mov	r0, r6
 8006028:	f7ff ff20 	bl	8005e6c <__multiply>
 800602c:	4680      	mov	r8, r0
 800602e:	4639      	mov	r1, r7
 8006030:	4630      	mov	r0, r6
 8006032:	f7ff fe4b 	bl	8005ccc <_Bfree>
 8006036:	4647      	mov	r7, r8
 8006038:	106d      	asrs	r5, r5, #1
 800603a:	d00b      	beq.n	8006054 <__pow5mult+0xa0>
 800603c:	6820      	ldr	r0, [r4, #0]
 800603e:	b938      	cbnz	r0, 8006050 <__pow5mult+0x9c>
 8006040:	4622      	mov	r2, r4
 8006042:	4621      	mov	r1, r4
 8006044:	4630      	mov	r0, r6
 8006046:	f7ff ff11 	bl	8005e6c <__multiply>
 800604a:	6020      	str	r0, [r4, #0]
 800604c:	f8c0 9000 	str.w	r9, [r0]
 8006050:	4604      	mov	r4, r0
 8006052:	e7e4      	b.n	800601e <__pow5mult+0x6a>
 8006054:	4638      	mov	r0, r7
 8006056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800605a:	bf00      	nop
 800605c:	08007640 	.word	0x08007640
 8006060:	08007465 	.word	0x08007465
 8006064:	080074ec 	.word	0x080074ec

08006068 <__lshift>:
 8006068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800606c:	460c      	mov	r4, r1
 800606e:	4607      	mov	r7, r0
 8006070:	4691      	mov	r9, r2
 8006072:	6923      	ldr	r3, [r4, #16]
 8006074:	6849      	ldr	r1, [r1, #4]
 8006076:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800607a:	68a3      	ldr	r3, [r4, #8]
 800607c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006080:	f108 0601 	add.w	r6, r8, #1
 8006084:	42b3      	cmp	r3, r6
 8006086:	db0b      	blt.n	80060a0 <__lshift+0x38>
 8006088:	4638      	mov	r0, r7
 800608a:	f7ff fddf 	bl	8005c4c <_Balloc>
 800608e:	4605      	mov	r5, r0
 8006090:	b948      	cbnz	r0, 80060a6 <__lshift+0x3e>
 8006092:	4602      	mov	r2, r0
 8006094:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006098:	4b27      	ldr	r3, [pc, #156]	; (8006138 <__lshift+0xd0>)
 800609a:	4828      	ldr	r0, [pc, #160]	; (800613c <__lshift+0xd4>)
 800609c:	f000 fb78 	bl	8006790 <__assert_func>
 80060a0:	3101      	adds	r1, #1
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	e7ee      	b.n	8006084 <__lshift+0x1c>
 80060a6:	2300      	movs	r3, #0
 80060a8:	f100 0114 	add.w	r1, r0, #20
 80060ac:	f100 0210 	add.w	r2, r0, #16
 80060b0:	4618      	mov	r0, r3
 80060b2:	4553      	cmp	r3, sl
 80060b4:	db33      	blt.n	800611e <__lshift+0xb6>
 80060b6:	6920      	ldr	r0, [r4, #16]
 80060b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060bc:	f104 0314 	add.w	r3, r4, #20
 80060c0:	f019 091f 	ands.w	r9, r9, #31
 80060c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060cc:	d02b      	beq.n	8006126 <__lshift+0xbe>
 80060ce:	468a      	mov	sl, r1
 80060d0:	2200      	movs	r2, #0
 80060d2:	f1c9 0e20 	rsb	lr, r9, #32
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	fa00 f009 	lsl.w	r0, r0, r9
 80060dc:	4302      	orrs	r2, r0
 80060de:	f84a 2b04 	str.w	r2, [sl], #4
 80060e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80060e6:	459c      	cmp	ip, r3
 80060e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80060ec:	d8f3      	bhi.n	80060d6 <__lshift+0x6e>
 80060ee:	ebac 0304 	sub.w	r3, ip, r4
 80060f2:	3b15      	subs	r3, #21
 80060f4:	f023 0303 	bic.w	r3, r3, #3
 80060f8:	3304      	adds	r3, #4
 80060fa:	f104 0015 	add.w	r0, r4, #21
 80060fe:	4584      	cmp	ip, r0
 8006100:	bf38      	it	cc
 8006102:	2304      	movcc	r3, #4
 8006104:	50ca      	str	r2, [r1, r3]
 8006106:	b10a      	cbz	r2, 800610c <__lshift+0xa4>
 8006108:	f108 0602 	add.w	r6, r8, #2
 800610c:	3e01      	subs	r6, #1
 800610e:	4638      	mov	r0, r7
 8006110:	4621      	mov	r1, r4
 8006112:	612e      	str	r6, [r5, #16]
 8006114:	f7ff fdda 	bl	8005ccc <_Bfree>
 8006118:	4628      	mov	r0, r5
 800611a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800611e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006122:	3301      	adds	r3, #1
 8006124:	e7c5      	b.n	80060b2 <__lshift+0x4a>
 8006126:	3904      	subs	r1, #4
 8006128:	f853 2b04 	ldr.w	r2, [r3], #4
 800612c:	459c      	cmp	ip, r3
 800612e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006132:	d8f9      	bhi.n	8006128 <__lshift+0xc0>
 8006134:	e7ea      	b.n	800610c <__lshift+0xa4>
 8006136:	bf00      	nop
 8006138:	080074db 	.word	0x080074db
 800613c:	080074ec 	.word	0x080074ec

08006140 <__mcmp>:
 8006140:	4603      	mov	r3, r0
 8006142:	690a      	ldr	r2, [r1, #16]
 8006144:	6900      	ldr	r0, [r0, #16]
 8006146:	b530      	push	{r4, r5, lr}
 8006148:	1a80      	subs	r0, r0, r2
 800614a:	d10d      	bne.n	8006168 <__mcmp+0x28>
 800614c:	3314      	adds	r3, #20
 800614e:	3114      	adds	r1, #20
 8006150:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006154:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006158:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800615c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006160:	4295      	cmp	r5, r2
 8006162:	d002      	beq.n	800616a <__mcmp+0x2a>
 8006164:	d304      	bcc.n	8006170 <__mcmp+0x30>
 8006166:	2001      	movs	r0, #1
 8006168:	bd30      	pop	{r4, r5, pc}
 800616a:	42a3      	cmp	r3, r4
 800616c:	d3f4      	bcc.n	8006158 <__mcmp+0x18>
 800616e:	e7fb      	b.n	8006168 <__mcmp+0x28>
 8006170:	f04f 30ff 	mov.w	r0, #4294967295
 8006174:	e7f8      	b.n	8006168 <__mcmp+0x28>
	...

08006178 <__mdiff>:
 8006178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	460c      	mov	r4, r1
 800617e:	4606      	mov	r6, r0
 8006180:	4611      	mov	r1, r2
 8006182:	4620      	mov	r0, r4
 8006184:	4692      	mov	sl, r2
 8006186:	f7ff ffdb 	bl	8006140 <__mcmp>
 800618a:	1e05      	subs	r5, r0, #0
 800618c:	d111      	bne.n	80061b2 <__mdiff+0x3a>
 800618e:	4629      	mov	r1, r5
 8006190:	4630      	mov	r0, r6
 8006192:	f7ff fd5b 	bl	8005c4c <_Balloc>
 8006196:	4602      	mov	r2, r0
 8006198:	b928      	cbnz	r0, 80061a6 <__mdiff+0x2e>
 800619a:	f240 2132 	movw	r1, #562	; 0x232
 800619e:	4b3c      	ldr	r3, [pc, #240]	; (8006290 <__mdiff+0x118>)
 80061a0:	483c      	ldr	r0, [pc, #240]	; (8006294 <__mdiff+0x11c>)
 80061a2:	f000 faf5 	bl	8006790 <__assert_func>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061ac:	4610      	mov	r0, r2
 80061ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b2:	bfa4      	itt	ge
 80061b4:	4653      	movge	r3, sl
 80061b6:	46a2      	movge	sl, r4
 80061b8:	4630      	mov	r0, r6
 80061ba:	f8da 1004 	ldr.w	r1, [sl, #4]
 80061be:	bfa6      	itte	ge
 80061c0:	461c      	movge	r4, r3
 80061c2:	2500      	movge	r5, #0
 80061c4:	2501      	movlt	r5, #1
 80061c6:	f7ff fd41 	bl	8005c4c <_Balloc>
 80061ca:	4602      	mov	r2, r0
 80061cc:	b918      	cbnz	r0, 80061d6 <__mdiff+0x5e>
 80061ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 80061d2:	4b2f      	ldr	r3, [pc, #188]	; (8006290 <__mdiff+0x118>)
 80061d4:	e7e4      	b.n	80061a0 <__mdiff+0x28>
 80061d6:	f100 0814 	add.w	r8, r0, #20
 80061da:	f8da 7010 	ldr.w	r7, [sl, #16]
 80061de:	60c5      	str	r5, [r0, #12]
 80061e0:	f04f 0c00 	mov.w	ip, #0
 80061e4:	f10a 0514 	add.w	r5, sl, #20
 80061e8:	f10a 0010 	add.w	r0, sl, #16
 80061ec:	46c2      	mov	sl, r8
 80061ee:	6926      	ldr	r6, [r4, #16]
 80061f0:	f104 0914 	add.w	r9, r4, #20
 80061f4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80061f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80061fc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006200:	f859 3b04 	ldr.w	r3, [r9], #4
 8006204:	fa1f f18b 	uxth.w	r1, fp
 8006208:	4461      	add	r1, ip
 800620a:	fa1f fc83 	uxth.w	ip, r3
 800620e:	0c1b      	lsrs	r3, r3, #16
 8006210:	eba1 010c 	sub.w	r1, r1, ip
 8006214:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006218:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800621c:	b289      	uxth	r1, r1
 800621e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006222:	454e      	cmp	r6, r9
 8006224:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006228:	f84a 3b04 	str.w	r3, [sl], #4
 800622c:	d8e6      	bhi.n	80061fc <__mdiff+0x84>
 800622e:	1b33      	subs	r3, r6, r4
 8006230:	3b15      	subs	r3, #21
 8006232:	f023 0303 	bic.w	r3, r3, #3
 8006236:	3415      	adds	r4, #21
 8006238:	3304      	adds	r3, #4
 800623a:	42a6      	cmp	r6, r4
 800623c:	bf38      	it	cc
 800623e:	2304      	movcc	r3, #4
 8006240:	441d      	add	r5, r3
 8006242:	4443      	add	r3, r8
 8006244:	461e      	mov	r6, r3
 8006246:	462c      	mov	r4, r5
 8006248:	4574      	cmp	r4, lr
 800624a:	d30e      	bcc.n	800626a <__mdiff+0xf2>
 800624c:	f10e 0103 	add.w	r1, lr, #3
 8006250:	1b49      	subs	r1, r1, r5
 8006252:	f021 0103 	bic.w	r1, r1, #3
 8006256:	3d03      	subs	r5, #3
 8006258:	45ae      	cmp	lr, r5
 800625a:	bf38      	it	cc
 800625c:	2100      	movcc	r1, #0
 800625e:	4419      	add	r1, r3
 8006260:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006264:	b18b      	cbz	r3, 800628a <__mdiff+0x112>
 8006266:	6117      	str	r7, [r2, #16]
 8006268:	e7a0      	b.n	80061ac <__mdiff+0x34>
 800626a:	f854 8b04 	ldr.w	r8, [r4], #4
 800626e:	fa1f f188 	uxth.w	r1, r8
 8006272:	4461      	add	r1, ip
 8006274:	1408      	asrs	r0, r1, #16
 8006276:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800627a:	b289      	uxth	r1, r1
 800627c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006280:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006284:	f846 1b04 	str.w	r1, [r6], #4
 8006288:	e7de      	b.n	8006248 <__mdiff+0xd0>
 800628a:	3f01      	subs	r7, #1
 800628c:	e7e8      	b.n	8006260 <__mdiff+0xe8>
 800628e:	bf00      	nop
 8006290:	080074db 	.word	0x080074db
 8006294:	080074ec 	.word	0x080074ec

08006298 <__d2b>:
 8006298:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800629c:	2101      	movs	r1, #1
 800629e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80062a2:	4690      	mov	r8, r2
 80062a4:	461d      	mov	r5, r3
 80062a6:	f7ff fcd1 	bl	8005c4c <_Balloc>
 80062aa:	4604      	mov	r4, r0
 80062ac:	b930      	cbnz	r0, 80062bc <__d2b+0x24>
 80062ae:	4602      	mov	r2, r0
 80062b0:	f240 310a 	movw	r1, #778	; 0x30a
 80062b4:	4b24      	ldr	r3, [pc, #144]	; (8006348 <__d2b+0xb0>)
 80062b6:	4825      	ldr	r0, [pc, #148]	; (800634c <__d2b+0xb4>)
 80062b8:	f000 fa6a 	bl	8006790 <__assert_func>
 80062bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80062c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80062c4:	bb2d      	cbnz	r5, 8006312 <__d2b+0x7a>
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	f1b8 0300 	subs.w	r3, r8, #0
 80062cc:	d026      	beq.n	800631c <__d2b+0x84>
 80062ce:	4668      	mov	r0, sp
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	f7ff fd87 	bl	8005de4 <__lo0bits>
 80062d6:	9900      	ldr	r1, [sp, #0]
 80062d8:	b1f0      	cbz	r0, 8006318 <__d2b+0x80>
 80062da:	9a01      	ldr	r2, [sp, #4]
 80062dc:	f1c0 0320 	rsb	r3, r0, #32
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	430b      	orrs	r3, r1
 80062e6:	40c2      	lsrs	r2, r0
 80062e8:	6163      	str	r3, [r4, #20]
 80062ea:	9201      	str	r2, [sp, #4]
 80062ec:	9b01      	ldr	r3, [sp, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bf14      	ite	ne
 80062f2:	2102      	movne	r1, #2
 80062f4:	2101      	moveq	r1, #1
 80062f6:	61a3      	str	r3, [r4, #24]
 80062f8:	6121      	str	r1, [r4, #16]
 80062fa:	b1c5      	cbz	r5, 800632e <__d2b+0x96>
 80062fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006300:	4405      	add	r5, r0
 8006302:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006306:	603d      	str	r5, [r7, #0]
 8006308:	6030      	str	r0, [r6, #0]
 800630a:	4620      	mov	r0, r4
 800630c:	b002      	add	sp, #8
 800630e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006316:	e7d6      	b.n	80062c6 <__d2b+0x2e>
 8006318:	6161      	str	r1, [r4, #20]
 800631a:	e7e7      	b.n	80062ec <__d2b+0x54>
 800631c:	a801      	add	r0, sp, #4
 800631e:	f7ff fd61 	bl	8005de4 <__lo0bits>
 8006322:	2101      	movs	r1, #1
 8006324:	9b01      	ldr	r3, [sp, #4]
 8006326:	6121      	str	r1, [r4, #16]
 8006328:	6163      	str	r3, [r4, #20]
 800632a:	3020      	adds	r0, #32
 800632c:	e7e5      	b.n	80062fa <__d2b+0x62>
 800632e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006332:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006336:	6038      	str	r0, [r7, #0]
 8006338:	6918      	ldr	r0, [r3, #16]
 800633a:	f7ff fd33 	bl	8005da4 <__hi0bits>
 800633e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006342:	6031      	str	r1, [r6, #0]
 8006344:	e7e1      	b.n	800630a <__d2b+0x72>
 8006346:	bf00      	nop
 8006348:	080074db 	.word	0x080074db
 800634c:	080074ec 	.word	0x080074ec

08006350 <_calloc_r>:
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	fb02 f501 	mul.w	r5, r2, r1
 8006356:	4629      	mov	r1, r5
 8006358:	f000 f854 	bl	8006404 <_malloc_r>
 800635c:	4604      	mov	r4, r0
 800635e:	b118      	cbz	r0, 8006368 <_calloc_r+0x18>
 8006360:	462a      	mov	r2, r5
 8006362:	2100      	movs	r1, #0
 8006364:	f7fe f944 	bl	80045f0 <memset>
 8006368:	4620      	mov	r0, r4
 800636a:	bd38      	pop	{r3, r4, r5, pc}

0800636c <_free_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4605      	mov	r5, r0
 8006370:	2900      	cmp	r1, #0
 8006372:	d043      	beq.n	80063fc <_free_r+0x90>
 8006374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006378:	1f0c      	subs	r4, r1, #4
 800637a:	2b00      	cmp	r3, #0
 800637c:	bfb8      	it	lt
 800637e:	18e4      	addlt	r4, r4, r3
 8006380:	f000 fa62 	bl	8006848 <__malloc_lock>
 8006384:	4a1e      	ldr	r2, [pc, #120]	; (8006400 <_free_r+0x94>)
 8006386:	6813      	ldr	r3, [r2, #0]
 8006388:	4610      	mov	r0, r2
 800638a:	b933      	cbnz	r3, 800639a <_free_r+0x2e>
 800638c:	6063      	str	r3, [r4, #4]
 800638e:	6014      	str	r4, [r2, #0]
 8006390:	4628      	mov	r0, r5
 8006392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006396:	f000 ba5d 	b.w	8006854 <__malloc_unlock>
 800639a:	42a3      	cmp	r3, r4
 800639c:	d90a      	bls.n	80063b4 <_free_r+0x48>
 800639e:	6821      	ldr	r1, [r4, #0]
 80063a0:	1862      	adds	r2, r4, r1
 80063a2:	4293      	cmp	r3, r2
 80063a4:	bf01      	itttt	eq
 80063a6:	681a      	ldreq	r2, [r3, #0]
 80063a8:	685b      	ldreq	r3, [r3, #4]
 80063aa:	1852      	addeq	r2, r2, r1
 80063ac:	6022      	streq	r2, [r4, #0]
 80063ae:	6063      	str	r3, [r4, #4]
 80063b0:	6004      	str	r4, [r0, #0]
 80063b2:	e7ed      	b.n	8006390 <_free_r+0x24>
 80063b4:	461a      	mov	r2, r3
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	b10b      	cbz	r3, 80063be <_free_r+0x52>
 80063ba:	42a3      	cmp	r3, r4
 80063bc:	d9fa      	bls.n	80063b4 <_free_r+0x48>
 80063be:	6811      	ldr	r1, [r2, #0]
 80063c0:	1850      	adds	r0, r2, r1
 80063c2:	42a0      	cmp	r0, r4
 80063c4:	d10b      	bne.n	80063de <_free_r+0x72>
 80063c6:	6820      	ldr	r0, [r4, #0]
 80063c8:	4401      	add	r1, r0
 80063ca:	1850      	adds	r0, r2, r1
 80063cc:	4283      	cmp	r3, r0
 80063ce:	6011      	str	r1, [r2, #0]
 80063d0:	d1de      	bne.n	8006390 <_free_r+0x24>
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	4401      	add	r1, r0
 80063d8:	6011      	str	r1, [r2, #0]
 80063da:	6053      	str	r3, [r2, #4]
 80063dc:	e7d8      	b.n	8006390 <_free_r+0x24>
 80063de:	d902      	bls.n	80063e6 <_free_r+0x7a>
 80063e0:	230c      	movs	r3, #12
 80063e2:	602b      	str	r3, [r5, #0]
 80063e4:	e7d4      	b.n	8006390 <_free_r+0x24>
 80063e6:	6820      	ldr	r0, [r4, #0]
 80063e8:	1821      	adds	r1, r4, r0
 80063ea:	428b      	cmp	r3, r1
 80063ec:	bf01      	itttt	eq
 80063ee:	6819      	ldreq	r1, [r3, #0]
 80063f0:	685b      	ldreq	r3, [r3, #4]
 80063f2:	1809      	addeq	r1, r1, r0
 80063f4:	6021      	streq	r1, [r4, #0]
 80063f6:	6063      	str	r3, [r4, #4]
 80063f8:	6054      	str	r4, [r2, #4]
 80063fa:	e7c9      	b.n	8006390 <_free_r+0x24>
 80063fc:	bd38      	pop	{r3, r4, r5, pc}
 80063fe:	bf00      	nop
 8006400:	20000210 	.word	0x20000210

08006404 <_malloc_r>:
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	1ccd      	adds	r5, r1, #3
 8006408:	f025 0503 	bic.w	r5, r5, #3
 800640c:	3508      	adds	r5, #8
 800640e:	2d0c      	cmp	r5, #12
 8006410:	bf38      	it	cc
 8006412:	250c      	movcc	r5, #12
 8006414:	2d00      	cmp	r5, #0
 8006416:	4606      	mov	r6, r0
 8006418:	db01      	blt.n	800641e <_malloc_r+0x1a>
 800641a:	42a9      	cmp	r1, r5
 800641c:	d903      	bls.n	8006426 <_malloc_r+0x22>
 800641e:	230c      	movs	r3, #12
 8006420:	6033      	str	r3, [r6, #0]
 8006422:	2000      	movs	r0, #0
 8006424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006426:	f000 fa0f 	bl	8006848 <__malloc_lock>
 800642a:	4921      	ldr	r1, [pc, #132]	; (80064b0 <_malloc_r+0xac>)
 800642c:	680a      	ldr	r2, [r1, #0]
 800642e:	4614      	mov	r4, r2
 8006430:	b99c      	cbnz	r4, 800645a <_malloc_r+0x56>
 8006432:	4f20      	ldr	r7, [pc, #128]	; (80064b4 <_malloc_r+0xb0>)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	b923      	cbnz	r3, 8006442 <_malloc_r+0x3e>
 8006438:	4621      	mov	r1, r4
 800643a:	4630      	mov	r0, r6
 800643c:	f000 f998 	bl	8006770 <_sbrk_r>
 8006440:	6038      	str	r0, [r7, #0]
 8006442:	4629      	mov	r1, r5
 8006444:	4630      	mov	r0, r6
 8006446:	f000 f993 	bl	8006770 <_sbrk_r>
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	d123      	bne.n	8006496 <_malloc_r+0x92>
 800644e:	230c      	movs	r3, #12
 8006450:	4630      	mov	r0, r6
 8006452:	6033      	str	r3, [r6, #0]
 8006454:	f000 f9fe 	bl	8006854 <__malloc_unlock>
 8006458:	e7e3      	b.n	8006422 <_malloc_r+0x1e>
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	1b5b      	subs	r3, r3, r5
 800645e:	d417      	bmi.n	8006490 <_malloc_r+0x8c>
 8006460:	2b0b      	cmp	r3, #11
 8006462:	d903      	bls.n	800646c <_malloc_r+0x68>
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	441c      	add	r4, r3
 8006468:	6025      	str	r5, [r4, #0]
 800646a:	e004      	b.n	8006476 <_malloc_r+0x72>
 800646c:	6863      	ldr	r3, [r4, #4]
 800646e:	42a2      	cmp	r2, r4
 8006470:	bf0c      	ite	eq
 8006472:	600b      	streq	r3, [r1, #0]
 8006474:	6053      	strne	r3, [r2, #4]
 8006476:	4630      	mov	r0, r6
 8006478:	f000 f9ec 	bl	8006854 <__malloc_unlock>
 800647c:	f104 000b 	add.w	r0, r4, #11
 8006480:	1d23      	adds	r3, r4, #4
 8006482:	f020 0007 	bic.w	r0, r0, #7
 8006486:	1ac2      	subs	r2, r0, r3
 8006488:	d0cc      	beq.n	8006424 <_malloc_r+0x20>
 800648a:	1a1b      	subs	r3, r3, r0
 800648c:	50a3      	str	r3, [r4, r2]
 800648e:	e7c9      	b.n	8006424 <_malloc_r+0x20>
 8006490:	4622      	mov	r2, r4
 8006492:	6864      	ldr	r4, [r4, #4]
 8006494:	e7cc      	b.n	8006430 <_malloc_r+0x2c>
 8006496:	1cc4      	adds	r4, r0, #3
 8006498:	f024 0403 	bic.w	r4, r4, #3
 800649c:	42a0      	cmp	r0, r4
 800649e:	d0e3      	beq.n	8006468 <_malloc_r+0x64>
 80064a0:	1a21      	subs	r1, r4, r0
 80064a2:	4630      	mov	r0, r6
 80064a4:	f000 f964 	bl	8006770 <_sbrk_r>
 80064a8:	3001      	adds	r0, #1
 80064aa:	d1dd      	bne.n	8006468 <_malloc_r+0x64>
 80064ac:	e7cf      	b.n	800644e <_malloc_r+0x4a>
 80064ae:	bf00      	nop
 80064b0:	20000210 	.word	0x20000210
 80064b4:	20000214 	.word	0x20000214

080064b8 <__ssputs_r>:
 80064b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064bc:	688e      	ldr	r6, [r1, #8]
 80064be:	4682      	mov	sl, r0
 80064c0:	429e      	cmp	r6, r3
 80064c2:	460c      	mov	r4, r1
 80064c4:	4690      	mov	r8, r2
 80064c6:	461f      	mov	r7, r3
 80064c8:	d838      	bhi.n	800653c <__ssputs_r+0x84>
 80064ca:	898a      	ldrh	r2, [r1, #12]
 80064cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064d0:	d032      	beq.n	8006538 <__ssputs_r+0x80>
 80064d2:	6825      	ldr	r5, [r4, #0]
 80064d4:	6909      	ldr	r1, [r1, #16]
 80064d6:	3301      	adds	r3, #1
 80064d8:	eba5 0901 	sub.w	r9, r5, r1
 80064dc:	6965      	ldr	r5, [r4, #20]
 80064de:	444b      	add	r3, r9
 80064e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064e8:	106d      	asrs	r5, r5, #1
 80064ea:	429d      	cmp	r5, r3
 80064ec:	bf38      	it	cc
 80064ee:	461d      	movcc	r5, r3
 80064f0:	0553      	lsls	r3, r2, #21
 80064f2:	d531      	bpl.n	8006558 <__ssputs_r+0xa0>
 80064f4:	4629      	mov	r1, r5
 80064f6:	f7ff ff85 	bl	8006404 <_malloc_r>
 80064fa:	4606      	mov	r6, r0
 80064fc:	b950      	cbnz	r0, 8006514 <__ssputs_r+0x5c>
 80064fe:	230c      	movs	r3, #12
 8006500:	f04f 30ff 	mov.w	r0, #4294967295
 8006504:	f8ca 3000 	str.w	r3, [sl]
 8006508:	89a3      	ldrh	r3, [r4, #12]
 800650a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800650e:	81a3      	strh	r3, [r4, #12]
 8006510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006514:	464a      	mov	r2, r9
 8006516:	6921      	ldr	r1, [r4, #16]
 8006518:	f7ff fb8a 	bl	8005c30 <memcpy>
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006526:	81a3      	strh	r3, [r4, #12]
 8006528:	6126      	str	r6, [r4, #16]
 800652a:	444e      	add	r6, r9
 800652c:	6026      	str	r6, [r4, #0]
 800652e:	463e      	mov	r6, r7
 8006530:	6165      	str	r5, [r4, #20]
 8006532:	eba5 0509 	sub.w	r5, r5, r9
 8006536:	60a5      	str	r5, [r4, #8]
 8006538:	42be      	cmp	r6, r7
 800653a:	d900      	bls.n	800653e <__ssputs_r+0x86>
 800653c:	463e      	mov	r6, r7
 800653e:	4632      	mov	r2, r6
 8006540:	4641      	mov	r1, r8
 8006542:	6820      	ldr	r0, [r4, #0]
 8006544:	f000 f966 	bl	8006814 <memmove>
 8006548:	68a3      	ldr	r3, [r4, #8]
 800654a:	6822      	ldr	r2, [r4, #0]
 800654c:	1b9b      	subs	r3, r3, r6
 800654e:	4432      	add	r2, r6
 8006550:	2000      	movs	r0, #0
 8006552:	60a3      	str	r3, [r4, #8]
 8006554:	6022      	str	r2, [r4, #0]
 8006556:	e7db      	b.n	8006510 <__ssputs_r+0x58>
 8006558:	462a      	mov	r2, r5
 800655a:	f000 f981 	bl	8006860 <_realloc_r>
 800655e:	4606      	mov	r6, r0
 8006560:	2800      	cmp	r0, #0
 8006562:	d1e1      	bne.n	8006528 <__ssputs_r+0x70>
 8006564:	4650      	mov	r0, sl
 8006566:	6921      	ldr	r1, [r4, #16]
 8006568:	f7ff ff00 	bl	800636c <_free_r>
 800656c:	e7c7      	b.n	80064fe <__ssputs_r+0x46>
	...

08006570 <_svfiprintf_r>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	4698      	mov	r8, r3
 8006576:	898b      	ldrh	r3, [r1, #12]
 8006578:	4607      	mov	r7, r0
 800657a:	061b      	lsls	r3, r3, #24
 800657c:	460d      	mov	r5, r1
 800657e:	4614      	mov	r4, r2
 8006580:	b09d      	sub	sp, #116	; 0x74
 8006582:	d50e      	bpl.n	80065a2 <_svfiprintf_r+0x32>
 8006584:	690b      	ldr	r3, [r1, #16]
 8006586:	b963      	cbnz	r3, 80065a2 <_svfiprintf_r+0x32>
 8006588:	2140      	movs	r1, #64	; 0x40
 800658a:	f7ff ff3b 	bl	8006404 <_malloc_r>
 800658e:	6028      	str	r0, [r5, #0]
 8006590:	6128      	str	r0, [r5, #16]
 8006592:	b920      	cbnz	r0, 800659e <_svfiprintf_r+0x2e>
 8006594:	230c      	movs	r3, #12
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
 800659c:	e0d1      	b.n	8006742 <_svfiprintf_r+0x1d2>
 800659e:	2340      	movs	r3, #64	; 0x40
 80065a0:	616b      	str	r3, [r5, #20]
 80065a2:	2300      	movs	r3, #0
 80065a4:	9309      	str	r3, [sp, #36]	; 0x24
 80065a6:	2320      	movs	r3, #32
 80065a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065ac:	2330      	movs	r3, #48	; 0x30
 80065ae:	f04f 0901 	mov.w	r9, #1
 80065b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80065b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800675c <_svfiprintf_r+0x1ec>
 80065ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065be:	4623      	mov	r3, r4
 80065c0:	469a      	mov	sl, r3
 80065c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065c6:	b10a      	cbz	r2, 80065cc <_svfiprintf_r+0x5c>
 80065c8:	2a25      	cmp	r2, #37	; 0x25
 80065ca:	d1f9      	bne.n	80065c0 <_svfiprintf_r+0x50>
 80065cc:	ebba 0b04 	subs.w	fp, sl, r4
 80065d0:	d00b      	beq.n	80065ea <_svfiprintf_r+0x7a>
 80065d2:	465b      	mov	r3, fp
 80065d4:	4622      	mov	r2, r4
 80065d6:	4629      	mov	r1, r5
 80065d8:	4638      	mov	r0, r7
 80065da:	f7ff ff6d 	bl	80064b8 <__ssputs_r>
 80065de:	3001      	adds	r0, #1
 80065e0:	f000 80aa 	beq.w	8006738 <_svfiprintf_r+0x1c8>
 80065e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065e6:	445a      	add	r2, fp
 80065e8:	9209      	str	r2, [sp, #36]	; 0x24
 80065ea:	f89a 3000 	ldrb.w	r3, [sl]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 80a2 	beq.w	8006738 <_svfiprintf_r+0x1c8>
 80065f4:	2300      	movs	r3, #0
 80065f6:	f04f 32ff 	mov.w	r2, #4294967295
 80065fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065fe:	f10a 0a01 	add.w	sl, sl, #1
 8006602:	9304      	str	r3, [sp, #16]
 8006604:	9307      	str	r3, [sp, #28]
 8006606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800660a:	931a      	str	r3, [sp, #104]	; 0x68
 800660c:	4654      	mov	r4, sl
 800660e:	2205      	movs	r2, #5
 8006610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006614:	4851      	ldr	r0, [pc, #324]	; (800675c <_svfiprintf_r+0x1ec>)
 8006616:	f7ff fafd 	bl	8005c14 <memchr>
 800661a:	9a04      	ldr	r2, [sp, #16]
 800661c:	b9d8      	cbnz	r0, 8006656 <_svfiprintf_r+0xe6>
 800661e:	06d0      	lsls	r0, r2, #27
 8006620:	bf44      	itt	mi
 8006622:	2320      	movmi	r3, #32
 8006624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006628:	0711      	lsls	r1, r2, #28
 800662a:	bf44      	itt	mi
 800662c:	232b      	movmi	r3, #43	; 0x2b
 800662e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006632:	f89a 3000 	ldrb.w	r3, [sl]
 8006636:	2b2a      	cmp	r3, #42	; 0x2a
 8006638:	d015      	beq.n	8006666 <_svfiprintf_r+0xf6>
 800663a:	4654      	mov	r4, sl
 800663c:	2000      	movs	r0, #0
 800663e:	f04f 0c0a 	mov.w	ip, #10
 8006642:	9a07      	ldr	r2, [sp, #28]
 8006644:	4621      	mov	r1, r4
 8006646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800664a:	3b30      	subs	r3, #48	; 0x30
 800664c:	2b09      	cmp	r3, #9
 800664e:	d94e      	bls.n	80066ee <_svfiprintf_r+0x17e>
 8006650:	b1b0      	cbz	r0, 8006680 <_svfiprintf_r+0x110>
 8006652:	9207      	str	r2, [sp, #28]
 8006654:	e014      	b.n	8006680 <_svfiprintf_r+0x110>
 8006656:	eba0 0308 	sub.w	r3, r0, r8
 800665a:	fa09 f303 	lsl.w	r3, r9, r3
 800665e:	4313      	orrs	r3, r2
 8006660:	46a2      	mov	sl, r4
 8006662:	9304      	str	r3, [sp, #16]
 8006664:	e7d2      	b.n	800660c <_svfiprintf_r+0x9c>
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	1d19      	adds	r1, r3, #4
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	9103      	str	r1, [sp, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	bfbb      	ittet	lt
 8006672:	425b      	neglt	r3, r3
 8006674:	f042 0202 	orrlt.w	r2, r2, #2
 8006678:	9307      	strge	r3, [sp, #28]
 800667a:	9307      	strlt	r3, [sp, #28]
 800667c:	bfb8      	it	lt
 800667e:	9204      	strlt	r2, [sp, #16]
 8006680:	7823      	ldrb	r3, [r4, #0]
 8006682:	2b2e      	cmp	r3, #46	; 0x2e
 8006684:	d10c      	bne.n	80066a0 <_svfiprintf_r+0x130>
 8006686:	7863      	ldrb	r3, [r4, #1]
 8006688:	2b2a      	cmp	r3, #42	; 0x2a
 800668a:	d135      	bne.n	80066f8 <_svfiprintf_r+0x188>
 800668c:	9b03      	ldr	r3, [sp, #12]
 800668e:	3402      	adds	r4, #2
 8006690:	1d1a      	adds	r2, r3, #4
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	9203      	str	r2, [sp, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	bfb8      	it	lt
 800669a:	f04f 33ff 	movlt.w	r3, #4294967295
 800669e:	9305      	str	r3, [sp, #20]
 80066a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800676c <_svfiprintf_r+0x1fc>
 80066a4:	2203      	movs	r2, #3
 80066a6:	4650      	mov	r0, sl
 80066a8:	7821      	ldrb	r1, [r4, #0]
 80066aa:	f7ff fab3 	bl	8005c14 <memchr>
 80066ae:	b140      	cbz	r0, 80066c2 <_svfiprintf_r+0x152>
 80066b0:	2340      	movs	r3, #64	; 0x40
 80066b2:	eba0 000a 	sub.w	r0, r0, sl
 80066b6:	fa03 f000 	lsl.w	r0, r3, r0
 80066ba:	9b04      	ldr	r3, [sp, #16]
 80066bc:	3401      	adds	r4, #1
 80066be:	4303      	orrs	r3, r0
 80066c0:	9304      	str	r3, [sp, #16]
 80066c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066c6:	2206      	movs	r2, #6
 80066c8:	4825      	ldr	r0, [pc, #148]	; (8006760 <_svfiprintf_r+0x1f0>)
 80066ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066ce:	f7ff faa1 	bl	8005c14 <memchr>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d038      	beq.n	8006748 <_svfiprintf_r+0x1d8>
 80066d6:	4b23      	ldr	r3, [pc, #140]	; (8006764 <_svfiprintf_r+0x1f4>)
 80066d8:	bb1b      	cbnz	r3, 8006722 <_svfiprintf_r+0x1b2>
 80066da:	9b03      	ldr	r3, [sp, #12]
 80066dc:	3307      	adds	r3, #7
 80066de:	f023 0307 	bic.w	r3, r3, #7
 80066e2:	3308      	adds	r3, #8
 80066e4:	9303      	str	r3, [sp, #12]
 80066e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e8:	4433      	add	r3, r6
 80066ea:	9309      	str	r3, [sp, #36]	; 0x24
 80066ec:	e767      	b.n	80065be <_svfiprintf_r+0x4e>
 80066ee:	460c      	mov	r4, r1
 80066f0:	2001      	movs	r0, #1
 80066f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80066f6:	e7a5      	b.n	8006644 <_svfiprintf_r+0xd4>
 80066f8:	2300      	movs	r3, #0
 80066fa:	f04f 0c0a 	mov.w	ip, #10
 80066fe:	4619      	mov	r1, r3
 8006700:	3401      	adds	r4, #1
 8006702:	9305      	str	r3, [sp, #20]
 8006704:	4620      	mov	r0, r4
 8006706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800670a:	3a30      	subs	r2, #48	; 0x30
 800670c:	2a09      	cmp	r2, #9
 800670e:	d903      	bls.n	8006718 <_svfiprintf_r+0x1a8>
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0c5      	beq.n	80066a0 <_svfiprintf_r+0x130>
 8006714:	9105      	str	r1, [sp, #20]
 8006716:	e7c3      	b.n	80066a0 <_svfiprintf_r+0x130>
 8006718:	4604      	mov	r4, r0
 800671a:	2301      	movs	r3, #1
 800671c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006720:	e7f0      	b.n	8006704 <_svfiprintf_r+0x194>
 8006722:	ab03      	add	r3, sp, #12
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	462a      	mov	r2, r5
 8006728:	4638      	mov	r0, r7
 800672a:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <_svfiprintf_r+0x1f8>)
 800672c:	a904      	add	r1, sp, #16
 800672e:	f7fe f805 	bl	800473c <_printf_float>
 8006732:	1c42      	adds	r2, r0, #1
 8006734:	4606      	mov	r6, r0
 8006736:	d1d6      	bne.n	80066e6 <_svfiprintf_r+0x176>
 8006738:	89ab      	ldrh	r3, [r5, #12]
 800673a:	065b      	lsls	r3, r3, #25
 800673c:	f53f af2c 	bmi.w	8006598 <_svfiprintf_r+0x28>
 8006740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006742:	b01d      	add	sp, #116	; 0x74
 8006744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006748:	ab03      	add	r3, sp, #12
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	462a      	mov	r2, r5
 800674e:	4638      	mov	r0, r7
 8006750:	4b05      	ldr	r3, [pc, #20]	; (8006768 <_svfiprintf_r+0x1f8>)
 8006752:	a904      	add	r1, sp, #16
 8006754:	f7fe fa8e 	bl	8004c74 <_printf_i>
 8006758:	e7eb      	b.n	8006732 <_svfiprintf_r+0x1c2>
 800675a:	bf00      	nop
 800675c:	0800764c 	.word	0x0800764c
 8006760:	08007656 	.word	0x08007656
 8006764:	0800473d 	.word	0x0800473d
 8006768:	080064b9 	.word	0x080064b9
 800676c:	08007652 	.word	0x08007652

08006770 <_sbrk_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	2300      	movs	r3, #0
 8006774:	4d05      	ldr	r5, [pc, #20]	; (800678c <_sbrk_r+0x1c>)
 8006776:	4604      	mov	r4, r0
 8006778:	4608      	mov	r0, r1
 800677a:	602b      	str	r3, [r5, #0]
 800677c:	f7fa ff02 	bl	8001584 <_sbrk>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d102      	bne.n	800678a <_sbrk_r+0x1a>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	b103      	cbz	r3, 800678a <_sbrk_r+0x1a>
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	20000324 	.word	0x20000324

08006790 <__assert_func>:
 8006790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006792:	4614      	mov	r4, r2
 8006794:	461a      	mov	r2, r3
 8006796:	4b09      	ldr	r3, [pc, #36]	; (80067bc <__assert_func+0x2c>)
 8006798:	4605      	mov	r5, r0
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68d8      	ldr	r0, [r3, #12]
 800679e:	b14c      	cbz	r4, 80067b4 <__assert_func+0x24>
 80067a0:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <__assert_func+0x30>)
 80067a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067a6:	9100      	str	r1, [sp, #0]
 80067a8:	462b      	mov	r3, r5
 80067aa:	4906      	ldr	r1, [pc, #24]	; (80067c4 <__assert_func+0x34>)
 80067ac:	f000 f80e 	bl	80067cc <fiprintf>
 80067b0:	f000 faa2 	bl	8006cf8 <abort>
 80067b4:	4b04      	ldr	r3, [pc, #16]	; (80067c8 <__assert_func+0x38>)
 80067b6:	461c      	mov	r4, r3
 80067b8:	e7f3      	b.n	80067a2 <__assert_func+0x12>
 80067ba:	bf00      	nop
 80067bc:	20000014 	.word	0x20000014
 80067c0:	0800765d 	.word	0x0800765d
 80067c4:	0800766a 	.word	0x0800766a
 80067c8:	08007698 	.word	0x08007698

080067cc <fiprintf>:
 80067cc:	b40e      	push	{r1, r2, r3}
 80067ce:	b503      	push	{r0, r1, lr}
 80067d0:	4601      	mov	r1, r0
 80067d2:	ab03      	add	r3, sp, #12
 80067d4:	4805      	ldr	r0, [pc, #20]	; (80067ec <fiprintf+0x20>)
 80067d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80067da:	6800      	ldr	r0, [r0, #0]
 80067dc:	9301      	str	r3, [sp, #4]
 80067de:	f000 f88d 	bl	80068fc <_vfiprintf_r>
 80067e2:	b002      	add	sp, #8
 80067e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80067e8:	b003      	add	sp, #12
 80067ea:	4770      	bx	lr
 80067ec:	20000014 	.word	0x20000014

080067f0 <__ascii_mbtowc>:
 80067f0:	b082      	sub	sp, #8
 80067f2:	b901      	cbnz	r1, 80067f6 <__ascii_mbtowc+0x6>
 80067f4:	a901      	add	r1, sp, #4
 80067f6:	b142      	cbz	r2, 800680a <__ascii_mbtowc+0x1a>
 80067f8:	b14b      	cbz	r3, 800680e <__ascii_mbtowc+0x1e>
 80067fa:	7813      	ldrb	r3, [r2, #0]
 80067fc:	600b      	str	r3, [r1, #0]
 80067fe:	7812      	ldrb	r2, [r2, #0]
 8006800:	1e10      	subs	r0, r2, #0
 8006802:	bf18      	it	ne
 8006804:	2001      	movne	r0, #1
 8006806:	b002      	add	sp, #8
 8006808:	4770      	bx	lr
 800680a:	4610      	mov	r0, r2
 800680c:	e7fb      	b.n	8006806 <__ascii_mbtowc+0x16>
 800680e:	f06f 0001 	mvn.w	r0, #1
 8006812:	e7f8      	b.n	8006806 <__ascii_mbtowc+0x16>

08006814 <memmove>:
 8006814:	4288      	cmp	r0, r1
 8006816:	b510      	push	{r4, lr}
 8006818:	eb01 0402 	add.w	r4, r1, r2
 800681c:	d902      	bls.n	8006824 <memmove+0x10>
 800681e:	4284      	cmp	r4, r0
 8006820:	4623      	mov	r3, r4
 8006822:	d807      	bhi.n	8006834 <memmove+0x20>
 8006824:	1e43      	subs	r3, r0, #1
 8006826:	42a1      	cmp	r1, r4
 8006828:	d008      	beq.n	800683c <memmove+0x28>
 800682a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800682e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006832:	e7f8      	b.n	8006826 <memmove+0x12>
 8006834:	4601      	mov	r1, r0
 8006836:	4402      	add	r2, r0
 8006838:	428a      	cmp	r2, r1
 800683a:	d100      	bne.n	800683e <memmove+0x2a>
 800683c:	bd10      	pop	{r4, pc}
 800683e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006846:	e7f7      	b.n	8006838 <memmove+0x24>

08006848 <__malloc_lock>:
 8006848:	4801      	ldr	r0, [pc, #4]	; (8006850 <__malloc_lock+0x8>)
 800684a:	f000 bc15 	b.w	8007078 <__retarget_lock_acquire_recursive>
 800684e:	bf00      	nop
 8006850:	2000032c 	.word	0x2000032c

08006854 <__malloc_unlock>:
 8006854:	4801      	ldr	r0, [pc, #4]	; (800685c <__malloc_unlock+0x8>)
 8006856:	f000 bc10 	b.w	800707a <__retarget_lock_release_recursive>
 800685a:	bf00      	nop
 800685c:	2000032c 	.word	0x2000032c

08006860 <_realloc_r>:
 8006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006862:	4607      	mov	r7, r0
 8006864:	4614      	mov	r4, r2
 8006866:	460e      	mov	r6, r1
 8006868:	b921      	cbnz	r1, 8006874 <_realloc_r+0x14>
 800686a:	4611      	mov	r1, r2
 800686c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006870:	f7ff bdc8 	b.w	8006404 <_malloc_r>
 8006874:	b922      	cbnz	r2, 8006880 <_realloc_r+0x20>
 8006876:	f7ff fd79 	bl	800636c <_free_r>
 800687a:	4625      	mov	r5, r4
 800687c:	4628      	mov	r0, r5
 800687e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006880:	f000 fc60 	bl	8007144 <_malloc_usable_size_r>
 8006884:	42a0      	cmp	r0, r4
 8006886:	d20f      	bcs.n	80068a8 <_realloc_r+0x48>
 8006888:	4621      	mov	r1, r4
 800688a:	4638      	mov	r0, r7
 800688c:	f7ff fdba 	bl	8006404 <_malloc_r>
 8006890:	4605      	mov	r5, r0
 8006892:	2800      	cmp	r0, #0
 8006894:	d0f2      	beq.n	800687c <_realloc_r+0x1c>
 8006896:	4631      	mov	r1, r6
 8006898:	4622      	mov	r2, r4
 800689a:	f7ff f9c9 	bl	8005c30 <memcpy>
 800689e:	4631      	mov	r1, r6
 80068a0:	4638      	mov	r0, r7
 80068a2:	f7ff fd63 	bl	800636c <_free_r>
 80068a6:	e7e9      	b.n	800687c <_realloc_r+0x1c>
 80068a8:	4635      	mov	r5, r6
 80068aa:	e7e7      	b.n	800687c <_realloc_r+0x1c>

080068ac <__sfputc_r>:
 80068ac:	6893      	ldr	r3, [r2, #8]
 80068ae:	b410      	push	{r4}
 80068b0:	3b01      	subs	r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	6093      	str	r3, [r2, #8]
 80068b6:	da07      	bge.n	80068c8 <__sfputc_r+0x1c>
 80068b8:	6994      	ldr	r4, [r2, #24]
 80068ba:	42a3      	cmp	r3, r4
 80068bc:	db01      	blt.n	80068c2 <__sfputc_r+0x16>
 80068be:	290a      	cmp	r1, #10
 80068c0:	d102      	bne.n	80068c8 <__sfputc_r+0x1c>
 80068c2:	bc10      	pop	{r4}
 80068c4:	f000 b94a 	b.w	8006b5c <__swbuf_r>
 80068c8:	6813      	ldr	r3, [r2, #0]
 80068ca:	1c58      	adds	r0, r3, #1
 80068cc:	6010      	str	r0, [r2, #0]
 80068ce:	7019      	strb	r1, [r3, #0]
 80068d0:	4608      	mov	r0, r1
 80068d2:	bc10      	pop	{r4}
 80068d4:	4770      	bx	lr

080068d6 <__sfputs_r>:
 80068d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d8:	4606      	mov	r6, r0
 80068da:	460f      	mov	r7, r1
 80068dc:	4614      	mov	r4, r2
 80068de:	18d5      	adds	r5, r2, r3
 80068e0:	42ac      	cmp	r4, r5
 80068e2:	d101      	bne.n	80068e8 <__sfputs_r+0x12>
 80068e4:	2000      	movs	r0, #0
 80068e6:	e007      	b.n	80068f8 <__sfputs_r+0x22>
 80068e8:	463a      	mov	r2, r7
 80068ea:	4630      	mov	r0, r6
 80068ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f0:	f7ff ffdc 	bl	80068ac <__sfputc_r>
 80068f4:	1c43      	adds	r3, r0, #1
 80068f6:	d1f3      	bne.n	80068e0 <__sfputs_r+0xa>
 80068f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068fc <_vfiprintf_r>:
 80068fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006900:	460d      	mov	r5, r1
 8006902:	4614      	mov	r4, r2
 8006904:	4698      	mov	r8, r3
 8006906:	4606      	mov	r6, r0
 8006908:	b09d      	sub	sp, #116	; 0x74
 800690a:	b118      	cbz	r0, 8006914 <_vfiprintf_r+0x18>
 800690c:	6983      	ldr	r3, [r0, #24]
 800690e:	b90b      	cbnz	r3, 8006914 <_vfiprintf_r+0x18>
 8006910:	f000 fb14 	bl	8006f3c <__sinit>
 8006914:	4b89      	ldr	r3, [pc, #548]	; (8006b3c <_vfiprintf_r+0x240>)
 8006916:	429d      	cmp	r5, r3
 8006918:	d11b      	bne.n	8006952 <_vfiprintf_r+0x56>
 800691a:	6875      	ldr	r5, [r6, #4]
 800691c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800691e:	07d9      	lsls	r1, r3, #31
 8006920:	d405      	bmi.n	800692e <_vfiprintf_r+0x32>
 8006922:	89ab      	ldrh	r3, [r5, #12]
 8006924:	059a      	lsls	r2, r3, #22
 8006926:	d402      	bmi.n	800692e <_vfiprintf_r+0x32>
 8006928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800692a:	f000 fba5 	bl	8007078 <__retarget_lock_acquire_recursive>
 800692e:	89ab      	ldrh	r3, [r5, #12]
 8006930:	071b      	lsls	r3, r3, #28
 8006932:	d501      	bpl.n	8006938 <_vfiprintf_r+0x3c>
 8006934:	692b      	ldr	r3, [r5, #16]
 8006936:	b9eb      	cbnz	r3, 8006974 <_vfiprintf_r+0x78>
 8006938:	4629      	mov	r1, r5
 800693a:	4630      	mov	r0, r6
 800693c:	f000 f96e 	bl	8006c1c <__swsetup_r>
 8006940:	b1c0      	cbz	r0, 8006974 <_vfiprintf_r+0x78>
 8006942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006944:	07dc      	lsls	r4, r3, #31
 8006946:	d50e      	bpl.n	8006966 <_vfiprintf_r+0x6a>
 8006948:	f04f 30ff 	mov.w	r0, #4294967295
 800694c:	b01d      	add	sp, #116	; 0x74
 800694e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006952:	4b7b      	ldr	r3, [pc, #492]	; (8006b40 <_vfiprintf_r+0x244>)
 8006954:	429d      	cmp	r5, r3
 8006956:	d101      	bne.n	800695c <_vfiprintf_r+0x60>
 8006958:	68b5      	ldr	r5, [r6, #8]
 800695a:	e7df      	b.n	800691c <_vfiprintf_r+0x20>
 800695c:	4b79      	ldr	r3, [pc, #484]	; (8006b44 <_vfiprintf_r+0x248>)
 800695e:	429d      	cmp	r5, r3
 8006960:	bf08      	it	eq
 8006962:	68f5      	ldreq	r5, [r6, #12]
 8006964:	e7da      	b.n	800691c <_vfiprintf_r+0x20>
 8006966:	89ab      	ldrh	r3, [r5, #12]
 8006968:	0598      	lsls	r0, r3, #22
 800696a:	d4ed      	bmi.n	8006948 <_vfiprintf_r+0x4c>
 800696c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800696e:	f000 fb84 	bl	800707a <__retarget_lock_release_recursive>
 8006972:	e7e9      	b.n	8006948 <_vfiprintf_r+0x4c>
 8006974:	2300      	movs	r3, #0
 8006976:	9309      	str	r3, [sp, #36]	; 0x24
 8006978:	2320      	movs	r3, #32
 800697a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800697e:	2330      	movs	r3, #48	; 0x30
 8006980:	f04f 0901 	mov.w	r9, #1
 8006984:	f8cd 800c 	str.w	r8, [sp, #12]
 8006988:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006b48 <_vfiprintf_r+0x24c>
 800698c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006990:	4623      	mov	r3, r4
 8006992:	469a      	mov	sl, r3
 8006994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006998:	b10a      	cbz	r2, 800699e <_vfiprintf_r+0xa2>
 800699a:	2a25      	cmp	r2, #37	; 0x25
 800699c:	d1f9      	bne.n	8006992 <_vfiprintf_r+0x96>
 800699e:	ebba 0b04 	subs.w	fp, sl, r4
 80069a2:	d00b      	beq.n	80069bc <_vfiprintf_r+0xc0>
 80069a4:	465b      	mov	r3, fp
 80069a6:	4622      	mov	r2, r4
 80069a8:	4629      	mov	r1, r5
 80069aa:	4630      	mov	r0, r6
 80069ac:	f7ff ff93 	bl	80068d6 <__sfputs_r>
 80069b0:	3001      	adds	r0, #1
 80069b2:	f000 80aa 	beq.w	8006b0a <_vfiprintf_r+0x20e>
 80069b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069b8:	445a      	add	r2, fp
 80069ba:	9209      	str	r2, [sp, #36]	; 0x24
 80069bc:	f89a 3000 	ldrb.w	r3, [sl]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 80a2 	beq.w	8006b0a <_vfiprintf_r+0x20e>
 80069c6:	2300      	movs	r3, #0
 80069c8:	f04f 32ff 	mov.w	r2, #4294967295
 80069cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069d0:	f10a 0a01 	add.w	sl, sl, #1
 80069d4:	9304      	str	r3, [sp, #16]
 80069d6:	9307      	str	r3, [sp, #28]
 80069d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069dc:	931a      	str	r3, [sp, #104]	; 0x68
 80069de:	4654      	mov	r4, sl
 80069e0:	2205      	movs	r2, #5
 80069e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e6:	4858      	ldr	r0, [pc, #352]	; (8006b48 <_vfiprintf_r+0x24c>)
 80069e8:	f7ff f914 	bl	8005c14 <memchr>
 80069ec:	9a04      	ldr	r2, [sp, #16]
 80069ee:	b9d8      	cbnz	r0, 8006a28 <_vfiprintf_r+0x12c>
 80069f0:	06d1      	lsls	r1, r2, #27
 80069f2:	bf44      	itt	mi
 80069f4:	2320      	movmi	r3, #32
 80069f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069fa:	0713      	lsls	r3, r2, #28
 80069fc:	bf44      	itt	mi
 80069fe:	232b      	movmi	r3, #43	; 0x2b
 8006a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a04:	f89a 3000 	ldrb.w	r3, [sl]
 8006a08:	2b2a      	cmp	r3, #42	; 0x2a
 8006a0a:	d015      	beq.n	8006a38 <_vfiprintf_r+0x13c>
 8006a0c:	4654      	mov	r4, sl
 8006a0e:	2000      	movs	r0, #0
 8006a10:	f04f 0c0a 	mov.w	ip, #10
 8006a14:	9a07      	ldr	r2, [sp, #28]
 8006a16:	4621      	mov	r1, r4
 8006a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a1c:	3b30      	subs	r3, #48	; 0x30
 8006a1e:	2b09      	cmp	r3, #9
 8006a20:	d94e      	bls.n	8006ac0 <_vfiprintf_r+0x1c4>
 8006a22:	b1b0      	cbz	r0, 8006a52 <_vfiprintf_r+0x156>
 8006a24:	9207      	str	r2, [sp, #28]
 8006a26:	e014      	b.n	8006a52 <_vfiprintf_r+0x156>
 8006a28:	eba0 0308 	sub.w	r3, r0, r8
 8006a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8006a30:	4313      	orrs	r3, r2
 8006a32:	46a2      	mov	sl, r4
 8006a34:	9304      	str	r3, [sp, #16]
 8006a36:	e7d2      	b.n	80069de <_vfiprintf_r+0xe2>
 8006a38:	9b03      	ldr	r3, [sp, #12]
 8006a3a:	1d19      	adds	r1, r3, #4
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	9103      	str	r1, [sp, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	bfbb      	ittet	lt
 8006a44:	425b      	neglt	r3, r3
 8006a46:	f042 0202 	orrlt.w	r2, r2, #2
 8006a4a:	9307      	strge	r3, [sp, #28]
 8006a4c:	9307      	strlt	r3, [sp, #28]
 8006a4e:	bfb8      	it	lt
 8006a50:	9204      	strlt	r2, [sp, #16]
 8006a52:	7823      	ldrb	r3, [r4, #0]
 8006a54:	2b2e      	cmp	r3, #46	; 0x2e
 8006a56:	d10c      	bne.n	8006a72 <_vfiprintf_r+0x176>
 8006a58:	7863      	ldrb	r3, [r4, #1]
 8006a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a5c:	d135      	bne.n	8006aca <_vfiprintf_r+0x1ce>
 8006a5e:	9b03      	ldr	r3, [sp, #12]
 8006a60:	3402      	adds	r4, #2
 8006a62:	1d1a      	adds	r2, r3, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	9203      	str	r2, [sp, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bfb8      	it	lt
 8006a6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a70:	9305      	str	r3, [sp, #20]
 8006a72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b58 <_vfiprintf_r+0x25c>
 8006a76:	2203      	movs	r2, #3
 8006a78:	4650      	mov	r0, sl
 8006a7a:	7821      	ldrb	r1, [r4, #0]
 8006a7c:	f7ff f8ca 	bl	8005c14 <memchr>
 8006a80:	b140      	cbz	r0, 8006a94 <_vfiprintf_r+0x198>
 8006a82:	2340      	movs	r3, #64	; 0x40
 8006a84:	eba0 000a 	sub.w	r0, r0, sl
 8006a88:	fa03 f000 	lsl.w	r0, r3, r0
 8006a8c:	9b04      	ldr	r3, [sp, #16]
 8006a8e:	3401      	adds	r4, #1
 8006a90:	4303      	orrs	r3, r0
 8006a92:	9304      	str	r3, [sp, #16]
 8006a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a98:	2206      	movs	r2, #6
 8006a9a:	482c      	ldr	r0, [pc, #176]	; (8006b4c <_vfiprintf_r+0x250>)
 8006a9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006aa0:	f7ff f8b8 	bl	8005c14 <memchr>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d03f      	beq.n	8006b28 <_vfiprintf_r+0x22c>
 8006aa8:	4b29      	ldr	r3, [pc, #164]	; (8006b50 <_vfiprintf_r+0x254>)
 8006aaa:	bb1b      	cbnz	r3, 8006af4 <_vfiprintf_r+0x1f8>
 8006aac:	9b03      	ldr	r3, [sp, #12]
 8006aae:	3307      	adds	r3, #7
 8006ab0:	f023 0307 	bic.w	r3, r3, #7
 8006ab4:	3308      	adds	r3, #8
 8006ab6:	9303      	str	r3, [sp, #12]
 8006ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aba:	443b      	add	r3, r7
 8006abc:	9309      	str	r3, [sp, #36]	; 0x24
 8006abe:	e767      	b.n	8006990 <_vfiprintf_r+0x94>
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	2001      	movs	r0, #1
 8006ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ac8:	e7a5      	b.n	8006a16 <_vfiprintf_r+0x11a>
 8006aca:	2300      	movs	r3, #0
 8006acc:	f04f 0c0a 	mov.w	ip, #10
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	3401      	adds	r4, #1
 8006ad4:	9305      	str	r3, [sp, #20]
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006adc:	3a30      	subs	r2, #48	; 0x30
 8006ade:	2a09      	cmp	r2, #9
 8006ae0:	d903      	bls.n	8006aea <_vfiprintf_r+0x1ee>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0c5      	beq.n	8006a72 <_vfiprintf_r+0x176>
 8006ae6:	9105      	str	r1, [sp, #20]
 8006ae8:	e7c3      	b.n	8006a72 <_vfiprintf_r+0x176>
 8006aea:	4604      	mov	r4, r0
 8006aec:	2301      	movs	r3, #1
 8006aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8006af2:	e7f0      	b.n	8006ad6 <_vfiprintf_r+0x1da>
 8006af4:	ab03      	add	r3, sp, #12
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	462a      	mov	r2, r5
 8006afa:	4630      	mov	r0, r6
 8006afc:	4b15      	ldr	r3, [pc, #84]	; (8006b54 <_vfiprintf_r+0x258>)
 8006afe:	a904      	add	r1, sp, #16
 8006b00:	f7fd fe1c 	bl	800473c <_printf_float>
 8006b04:	4607      	mov	r7, r0
 8006b06:	1c78      	adds	r0, r7, #1
 8006b08:	d1d6      	bne.n	8006ab8 <_vfiprintf_r+0x1bc>
 8006b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b0c:	07d9      	lsls	r1, r3, #31
 8006b0e:	d405      	bmi.n	8006b1c <_vfiprintf_r+0x220>
 8006b10:	89ab      	ldrh	r3, [r5, #12]
 8006b12:	059a      	lsls	r2, r3, #22
 8006b14:	d402      	bmi.n	8006b1c <_vfiprintf_r+0x220>
 8006b16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b18:	f000 faaf 	bl	800707a <__retarget_lock_release_recursive>
 8006b1c:	89ab      	ldrh	r3, [r5, #12]
 8006b1e:	065b      	lsls	r3, r3, #25
 8006b20:	f53f af12 	bmi.w	8006948 <_vfiprintf_r+0x4c>
 8006b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b26:	e711      	b.n	800694c <_vfiprintf_r+0x50>
 8006b28:	ab03      	add	r3, sp, #12
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	462a      	mov	r2, r5
 8006b2e:	4630      	mov	r0, r6
 8006b30:	4b08      	ldr	r3, [pc, #32]	; (8006b54 <_vfiprintf_r+0x258>)
 8006b32:	a904      	add	r1, sp, #16
 8006b34:	f7fe f89e 	bl	8004c74 <_printf_i>
 8006b38:	e7e4      	b.n	8006b04 <_vfiprintf_r+0x208>
 8006b3a:	bf00      	nop
 8006b3c:	080077c4 	.word	0x080077c4
 8006b40:	080077e4 	.word	0x080077e4
 8006b44:	080077a4 	.word	0x080077a4
 8006b48:	0800764c 	.word	0x0800764c
 8006b4c:	08007656 	.word	0x08007656
 8006b50:	0800473d 	.word	0x0800473d
 8006b54:	080068d7 	.word	0x080068d7
 8006b58:	08007652 	.word	0x08007652

08006b5c <__swbuf_r>:
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	460e      	mov	r6, r1
 8006b60:	4614      	mov	r4, r2
 8006b62:	4605      	mov	r5, r0
 8006b64:	b118      	cbz	r0, 8006b6e <__swbuf_r+0x12>
 8006b66:	6983      	ldr	r3, [r0, #24]
 8006b68:	b90b      	cbnz	r3, 8006b6e <__swbuf_r+0x12>
 8006b6a:	f000 f9e7 	bl	8006f3c <__sinit>
 8006b6e:	4b21      	ldr	r3, [pc, #132]	; (8006bf4 <__swbuf_r+0x98>)
 8006b70:	429c      	cmp	r4, r3
 8006b72:	d12b      	bne.n	8006bcc <__swbuf_r+0x70>
 8006b74:	686c      	ldr	r4, [r5, #4]
 8006b76:	69a3      	ldr	r3, [r4, #24]
 8006b78:	60a3      	str	r3, [r4, #8]
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	071a      	lsls	r2, r3, #28
 8006b7e:	d52f      	bpl.n	8006be0 <__swbuf_r+0x84>
 8006b80:	6923      	ldr	r3, [r4, #16]
 8006b82:	b36b      	cbz	r3, 8006be0 <__swbuf_r+0x84>
 8006b84:	6923      	ldr	r3, [r4, #16]
 8006b86:	6820      	ldr	r0, [r4, #0]
 8006b88:	b2f6      	uxtb	r6, r6
 8006b8a:	1ac0      	subs	r0, r0, r3
 8006b8c:	6963      	ldr	r3, [r4, #20]
 8006b8e:	4637      	mov	r7, r6
 8006b90:	4283      	cmp	r3, r0
 8006b92:	dc04      	bgt.n	8006b9e <__swbuf_r+0x42>
 8006b94:	4621      	mov	r1, r4
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 f93c 	bl	8006e14 <_fflush_r>
 8006b9c:	bb30      	cbnz	r0, 8006bec <__swbuf_r+0x90>
 8006b9e:	68a3      	ldr	r3, [r4, #8]
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	60a3      	str	r3, [r4, #8]
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	6022      	str	r2, [r4, #0]
 8006bac:	701e      	strb	r6, [r3, #0]
 8006bae:	6963      	ldr	r3, [r4, #20]
 8006bb0:	4283      	cmp	r3, r0
 8006bb2:	d004      	beq.n	8006bbe <__swbuf_r+0x62>
 8006bb4:	89a3      	ldrh	r3, [r4, #12]
 8006bb6:	07db      	lsls	r3, r3, #31
 8006bb8:	d506      	bpl.n	8006bc8 <__swbuf_r+0x6c>
 8006bba:	2e0a      	cmp	r6, #10
 8006bbc:	d104      	bne.n	8006bc8 <__swbuf_r+0x6c>
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f000 f927 	bl	8006e14 <_fflush_r>
 8006bc6:	b988      	cbnz	r0, 8006bec <__swbuf_r+0x90>
 8006bc8:	4638      	mov	r0, r7
 8006bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <__swbuf_r+0x9c>)
 8006bce:	429c      	cmp	r4, r3
 8006bd0:	d101      	bne.n	8006bd6 <__swbuf_r+0x7a>
 8006bd2:	68ac      	ldr	r4, [r5, #8]
 8006bd4:	e7cf      	b.n	8006b76 <__swbuf_r+0x1a>
 8006bd6:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <__swbuf_r+0xa0>)
 8006bd8:	429c      	cmp	r4, r3
 8006bda:	bf08      	it	eq
 8006bdc:	68ec      	ldreq	r4, [r5, #12]
 8006bde:	e7ca      	b.n	8006b76 <__swbuf_r+0x1a>
 8006be0:	4621      	mov	r1, r4
 8006be2:	4628      	mov	r0, r5
 8006be4:	f000 f81a 	bl	8006c1c <__swsetup_r>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d0cb      	beq.n	8006b84 <__swbuf_r+0x28>
 8006bec:	f04f 37ff 	mov.w	r7, #4294967295
 8006bf0:	e7ea      	b.n	8006bc8 <__swbuf_r+0x6c>
 8006bf2:	bf00      	nop
 8006bf4:	080077c4 	.word	0x080077c4
 8006bf8:	080077e4 	.word	0x080077e4
 8006bfc:	080077a4 	.word	0x080077a4

08006c00 <__ascii_wctomb>:
 8006c00:	4603      	mov	r3, r0
 8006c02:	4608      	mov	r0, r1
 8006c04:	b141      	cbz	r1, 8006c18 <__ascii_wctomb+0x18>
 8006c06:	2aff      	cmp	r2, #255	; 0xff
 8006c08:	d904      	bls.n	8006c14 <__ascii_wctomb+0x14>
 8006c0a:	228a      	movs	r2, #138	; 0x8a
 8006c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	4770      	bx	lr
 8006c14:	2001      	movs	r0, #1
 8006c16:	700a      	strb	r2, [r1, #0]
 8006c18:	4770      	bx	lr
	...

08006c1c <__swsetup_r>:
 8006c1c:	4b32      	ldr	r3, [pc, #200]	; (8006ce8 <__swsetup_r+0xcc>)
 8006c1e:	b570      	push	{r4, r5, r6, lr}
 8006c20:	681d      	ldr	r5, [r3, #0]
 8006c22:	4606      	mov	r6, r0
 8006c24:	460c      	mov	r4, r1
 8006c26:	b125      	cbz	r5, 8006c32 <__swsetup_r+0x16>
 8006c28:	69ab      	ldr	r3, [r5, #24]
 8006c2a:	b913      	cbnz	r3, 8006c32 <__swsetup_r+0x16>
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	f000 f985 	bl	8006f3c <__sinit>
 8006c32:	4b2e      	ldr	r3, [pc, #184]	; (8006cec <__swsetup_r+0xd0>)
 8006c34:	429c      	cmp	r4, r3
 8006c36:	d10f      	bne.n	8006c58 <__swsetup_r+0x3c>
 8006c38:	686c      	ldr	r4, [r5, #4]
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c40:	0719      	lsls	r1, r3, #28
 8006c42:	d42c      	bmi.n	8006c9e <__swsetup_r+0x82>
 8006c44:	06dd      	lsls	r5, r3, #27
 8006c46:	d411      	bmi.n	8006c6c <__swsetup_r+0x50>
 8006c48:	2309      	movs	r3, #9
 8006c4a:	6033      	str	r3, [r6, #0]
 8006c4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c50:	f04f 30ff 	mov.w	r0, #4294967295
 8006c54:	81a3      	strh	r3, [r4, #12]
 8006c56:	e03e      	b.n	8006cd6 <__swsetup_r+0xba>
 8006c58:	4b25      	ldr	r3, [pc, #148]	; (8006cf0 <__swsetup_r+0xd4>)
 8006c5a:	429c      	cmp	r4, r3
 8006c5c:	d101      	bne.n	8006c62 <__swsetup_r+0x46>
 8006c5e:	68ac      	ldr	r4, [r5, #8]
 8006c60:	e7eb      	b.n	8006c3a <__swsetup_r+0x1e>
 8006c62:	4b24      	ldr	r3, [pc, #144]	; (8006cf4 <__swsetup_r+0xd8>)
 8006c64:	429c      	cmp	r4, r3
 8006c66:	bf08      	it	eq
 8006c68:	68ec      	ldreq	r4, [r5, #12]
 8006c6a:	e7e6      	b.n	8006c3a <__swsetup_r+0x1e>
 8006c6c:	0758      	lsls	r0, r3, #29
 8006c6e:	d512      	bpl.n	8006c96 <__swsetup_r+0x7a>
 8006c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c72:	b141      	cbz	r1, 8006c86 <__swsetup_r+0x6a>
 8006c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c78:	4299      	cmp	r1, r3
 8006c7a:	d002      	beq.n	8006c82 <__swsetup_r+0x66>
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	f7ff fb75 	bl	800636c <_free_r>
 8006c82:	2300      	movs	r3, #0
 8006c84:	6363      	str	r3, [r4, #52]	; 0x34
 8006c86:	89a3      	ldrh	r3, [r4, #12]
 8006c88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c8c:	81a3      	strh	r3, [r4, #12]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	6063      	str	r3, [r4, #4]
 8006c92:	6923      	ldr	r3, [r4, #16]
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	f043 0308 	orr.w	r3, r3, #8
 8006c9c:	81a3      	strh	r3, [r4, #12]
 8006c9e:	6923      	ldr	r3, [r4, #16]
 8006ca0:	b94b      	cbnz	r3, 8006cb6 <__swsetup_r+0x9a>
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cac:	d003      	beq.n	8006cb6 <__swsetup_r+0x9a>
 8006cae:	4621      	mov	r1, r4
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f000 fa07 	bl	80070c4 <__smakebuf_r>
 8006cb6:	89a0      	ldrh	r0, [r4, #12]
 8006cb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cbc:	f010 0301 	ands.w	r3, r0, #1
 8006cc0:	d00a      	beq.n	8006cd8 <__swsetup_r+0xbc>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60a3      	str	r3, [r4, #8]
 8006cc6:	6963      	ldr	r3, [r4, #20]
 8006cc8:	425b      	negs	r3, r3
 8006cca:	61a3      	str	r3, [r4, #24]
 8006ccc:	6923      	ldr	r3, [r4, #16]
 8006cce:	b943      	cbnz	r3, 8006ce2 <__swsetup_r+0xc6>
 8006cd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006cd4:	d1ba      	bne.n	8006c4c <__swsetup_r+0x30>
 8006cd6:	bd70      	pop	{r4, r5, r6, pc}
 8006cd8:	0781      	lsls	r1, r0, #30
 8006cda:	bf58      	it	pl
 8006cdc:	6963      	ldrpl	r3, [r4, #20]
 8006cde:	60a3      	str	r3, [r4, #8]
 8006ce0:	e7f4      	b.n	8006ccc <__swsetup_r+0xb0>
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	e7f7      	b.n	8006cd6 <__swsetup_r+0xba>
 8006ce6:	bf00      	nop
 8006ce8:	20000014 	.word	0x20000014
 8006cec:	080077c4 	.word	0x080077c4
 8006cf0:	080077e4 	.word	0x080077e4
 8006cf4:	080077a4 	.word	0x080077a4

08006cf8 <abort>:
 8006cf8:	2006      	movs	r0, #6
 8006cfa:	b508      	push	{r3, lr}
 8006cfc:	f000 fa52 	bl	80071a4 <raise>
 8006d00:	2001      	movs	r0, #1
 8006d02:	f7fa fbcc 	bl	800149e <_exit>
	...

08006d08 <__sflush_r>:
 8006d08:	898a      	ldrh	r2, [r1, #12]
 8006d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0e:	4605      	mov	r5, r0
 8006d10:	0710      	lsls	r0, r2, #28
 8006d12:	460c      	mov	r4, r1
 8006d14:	d458      	bmi.n	8006dc8 <__sflush_r+0xc0>
 8006d16:	684b      	ldr	r3, [r1, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	dc05      	bgt.n	8006d28 <__sflush_r+0x20>
 8006d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	dc02      	bgt.n	8006d28 <__sflush_r+0x20>
 8006d22:	2000      	movs	r0, #0
 8006d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d2a:	2e00      	cmp	r6, #0
 8006d2c:	d0f9      	beq.n	8006d22 <__sflush_r+0x1a>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d34:	682f      	ldr	r7, [r5, #0]
 8006d36:	602b      	str	r3, [r5, #0]
 8006d38:	d032      	beq.n	8006da0 <__sflush_r+0x98>
 8006d3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	075a      	lsls	r2, r3, #29
 8006d40:	d505      	bpl.n	8006d4e <__sflush_r+0x46>
 8006d42:	6863      	ldr	r3, [r4, #4]
 8006d44:	1ac0      	subs	r0, r0, r3
 8006d46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d48:	b10b      	cbz	r3, 8006d4e <__sflush_r+0x46>
 8006d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d4c:	1ac0      	subs	r0, r0, r3
 8006d4e:	2300      	movs	r3, #0
 8006d50:	4602      	mov	r2, r0
 8006d52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d54:	4628      	mov	r0, r5
 8006d56:	6a21      	ldr	r1, [r4, #32]
 8006d58:	47b0      	blx	r6
 8006d5a:	1c43      	adds	r3, r0, #1
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	d106      	bne.n	8006d6e <__sflush_r+0x66>
 8006d60:	6829      	ldr	r1, [r5, #0]
 8006d62:	291d      	cmp	r1, #29
 8006d64:	d82c      	bhi.n	8006dc0 <__sflush_r+0xb8>
 8006d66:	4a2a      	ldr	r2, [pc, #168]	; (8006e10 <__sflush_r+0x108>)
 8006d68:	40ca      	lsrs	r2, r1
 8006d6a:	07d6      	lsls	r6, r2, #31
 8006d6c:	d528      	bpl.n	8006dc0 <__sflush_r+0xb8>
 8006d6e:	2200      	movs	r2, #0
 8006d70:	6062      	str	r2, [r4, #4]
 8006d72:	6922      	ldr	r2, [r4, #16]
 8006d74:	04d9      	lsls	r1, r3, #19
 8006d76:	6022      	str	r2, [r4, #0]
 8006d78:	d504      	bpl.n	8006d84 <__sflush_r+0x7c>
 8006d7a:	1c42      	adds	r2, r0, #1
 8006d7c:	d101      	bne.n	8006d82 <__sflush_r+0x7a>
 8006d7e:	682b      	ldr	r3, [r5, #0]
 8006d80:	b903      	cbnz	r3, 8006d84 <__sflush_r+0x7c>
 8006d82:	6560      	str	r0, [r4, #84]	; 0x54
 8006d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d86:	602f      	str	r7, [r5, #0]
 8006d88:	2900      	cmp	r1, #0
 8006d8a:	d0ca      	beq.n	8006d22 <__sflush_r+0x1a>
 8006d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d90:	4299      	cmp	r1, r3
 8006d92:	d002      	beq.n	8006d9a <__sflush_r+0x92>
 8006d94:	4628      	mov	r0, r5
 8006d96:	f7ff fae9 	bl	800636c <_free_r>
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	6360      	str	r0, [r4, #52]	; 0x34
 8006d9e:	e7c1      	b.n	8006d24 <__sflush_r+0x1c>
 8006da0:	6a21      	ldr	r1, [r4, #32]
 8006da2:	2301      	movs	r3, #1
 8006da4:	4628      	mov	r0, r5
 8006da6:	47b0      	blx	r6
 8006da8:	1c41      	adds	r1, r0, #1
 8006daa:	d1c7      	bne.n	8006d3c <__sflush_r+0x34>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0c4      	beq.n	8006d3c <__sflush_r+0x34>
 8006db2:	2b1d      	cmp	r3, #29
 8006db4:	d001      	beq.n	8006dba <__sflush_r+0xb2>
 8006db6:	2b16      	cmp	r3, #22
 8006db8:	d101      	bne.n	8006dbe <__sflush_r+0xb6>
 8006dba:	602f      	str	r7, [r5, #0]
 8006dbc:	e7b1      	b.n	8006d22 <__sflush_r+0x1a>
 8006dbe:	89a3      	ldrh	r3, [r4, #12]
 8006dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc4:	81a3      	strh	r3, [r4, #12]
 8006dc6:	e7ad      	b.n	8006d24 <__sflush_r+0x1c>
 8006dc8:	690f      	ldr	r7, [r1, #16]
 8006dca:	2f00      	cmp	r7, #0
 8006dcc:	d0a9      	beq.n	8006d22 <__sflush_r+0x1a>
 8006dce:	0793      	lsls	r3, r2, #30
 8006dd0:	bf18      	it	ne
 8006dd2:	2300      	movne	r3, #0
 8006dd4:	680e      	ldr	r6, [r1, #0]
 8006dd6:	bf08      	it	eq
 8006dd8:	694b      	ldreq	r3, [r1, #20]
 8006dda:	eba6 0807 	sub.w	r8, r6, r7
 8006dde:	600f      	str	r7, [r1, #0]
 8006de0:	608b      	str	r3, [r1, #8]
 8006de2:	f1b8 0f00 	cmp.w	r8, #0
 8006de6:	dd9c      	ble.n	8006d22 <__sflush_r+0x1a>
 8006de8:	4643      	mov	r3, r8
 8006dea:	463a      	mov	r2, r7
 8006dec:	4628      	mov	r0, r5
 8006dee:	6a21      	ldr	r1, [r4, #32]
 8006df0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006df2:	47b0      	blx	r6
 8006df4:	2800      	cmp	r0, #0
 8006df6:	dc06      	bgt.n	8006e06 <__sflush_r+0xfe>
 8006df8:	89a3      	ldrh	r3, [r4, #12]
 8006dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e02:	81a3      	strh	r3, [r4, #12]
 8006e04:	e78e      	b.n	8006d24 <__sflush_r+0x1c>
 8006e06:	4407      	add	r7, r0
 8006e08:	eba8 0800 	sub.w	r8, r8, r0
 8006e0c:	e7e9      	b.n	8006de2 <__sflush_r+0xda>
 8006e0e:	bf00      	nop
 8006e10:	20400001 	.word	0x20400001

08006e14 <_fflush_r>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	690b      	ldr	r3, [r1, #16]
 8006e18:	4605      	mov	r5, r0
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	b913      	cbnz	r3, 8006e24 <_fflush_r+0x10>
 8006e1e:	2500      	movs	r5, #0
 8006e20:	4628      	mov	r0, r5
 8006e22:	bd38      	pop	{r3, r4, r5, pc}
 8006e24:	b118      	cbz	r0, 8006e2e <_fflush_r+0x1a>
 8006e26:	6983      	ldr	r3, [r0, #24]
 8006e28:	b90b      	cbnz	r3, 8006e2e <_fflush_r+0x1a>
 8006e2a:	f000 f887 	bl	8006f3c <__sinit>
 8006e2e:	4b14      	ldr	r3, [pc, #80]	; (8006e80 <_fflush_r+0x6c>)
 8006e30:	429c      	cmp	r4, r3
 8006e32:	d11b      	bne.n	8006e6c <_fflush_r+0x58>
 8006e34:	686c      	ldr	r4, [r5, #4]
 8006e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0ef      	beq.n	8006e1e <_fflush_r+0xa>
 8006e3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e40:	07d0      	lsls	r0, r2, #31
 8006e42:	d404      	bmi.n	8006e4e <_fflush_r+0x3a>
 8006e44:	0599      	lsls	r1, r3, #22
 8006e46:	d402      	bmi.n	8006e4e <_fflush_r+0x3a>
 8006e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e4a:	f000 f915 	bl	8007078 <__retarget_lock_acquire_recursive>
 8006e4e:	4628      	mov	r0, r5
 8006e50:	4621      	mov	r1, r4
 8006e52:	f7ff ff59 	bl	8006d08 <__sflush_r>
 8006e56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e58:	4605      	mov	r5, r0
 8006e5a:	07da      	lsls	r2, r3, #31
 8006e5c:	d4e0      	bmi.n	8006e20 <_fflush_r+0xc>
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	059b      	lsls	r3, r3, #22
 8006e62:	d4dd      	bmi.n	8006e20 <_fflush_r+0xc>
 8006e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e66:	f000 f908 	bl	800707a <__retarget_lock_release_recursive>
 8006e6a:	e7d9      	b.n	8006e20 <_fflush_r+0xc>
 8006e6c:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <_fflush_r+0x70>)
 8006e6e:	429c      	cmp	r4, r3
 8006e70:	d101      	bne.n	8006e76 <_fflush_r+0x62>
 8006e72:	68ac      	ldr	r4, [r5, #8]
 8006e74:	e7df      	b.n	8006e36 <_fflush_r+0x22>
 8006e76:	4b04      	ldr	r3, [pc, #16]	; (8006e88 <_fflush_r+0x74>)
 8006e78:	429c      	cmp	r4, r3
 8006e7a:	bf08      	it	eq
 8006e7c:	68ec      	ldreq	r4, [r5, #12]
 8006e7e:	e7da      	b.n	8006e36 <_fflush_r+0x22>
 8006e80:	080077c4 	.word	0x080077c4
 8006e84:	080077e4 	.word	0x080077e4
 8006e88:	080077a4 	.word	0x080077a4

08006e8c <std>:
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	b510      	push	{r4, lr}
 8006e90:	4604      	mov	r4, r0
 8006e92:	e9c0 3300 	strd	r3, r3, [r0]
 8006e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e9a:	6083      	str	r3, [r0, #8]
 8006e9c:	8181      	strh	r1, [r0, #12]
 8006e9e:	6643      	str	r3, [r0, #100]	; 0x64
 8006ea0:	81c2      	strh	r2, [r0, #14]
 8006ea2:	6183      	str	r3, [r0, #24]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	2208      	movs	r2, #8
 8006ea8:	305c      	adds	r0, #92	; 0x5c
 8006eaa:	f7fd fba1 	bl	80045f0 <memset>
 8006eae:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <std+0x38>)
 8006eb0:	6224      	str	r4, [r4, #32]
 8006eb2:	6263      	str	r3, [r4, #36]	; 0x24
 8006eb4:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <std+0x3c>)
 8006eb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eb8:	4b04      	ldr	r3, [pc, #16]	; (8006ecc <std+0x40>)
 8006eba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <std+0x44>)
 8006ebe:	6323      	str	r3, [r4, #48]	; 0x30
 8006ec0:	bd10      	pop	{r4, pc}
 8006ec2:	bf00      	nop
 8006ec4:	080071dd 	.word	0x080071dd
 8006ec8:	080071ff 	.word	0x080071ff
 8006ecc:	08007237 	.word	0x08007237
 8006ed0:	0800725b 	.word	0x0800725b

08006ed4 <_cleanup_r>:
 8006ed4:	4901      	ldr	r1, [pc, #4]	; (8006edc <_cleanup_r+0x8>)
 8006ed6:	f000 b8af 	b.w	8007038 <_fwalk_reent>
 8006eda:	bf00      	nop
 8006edc:	08006e15 	.word	0x08006e15

08006ee0 <__sfmoreglue>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	2568      	movs	r5, #104	; 0x68
 8006ee4:	1e4a      	subs	r2, r1, #1
 8006ee6:	4355      	muls	r5, r2
 8006ee8:	460e      	mov	r6, r1
 8006eea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006eee:	f7ff fa89 	bl	8006404 <_malloc_r>
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	b140      	cbz	r0, 8006f08 <__sfmoreglue+0x28>
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	e9c0 1600 	strd	r1, r6, [r0]
 8006efc:	300c      	adds	r0, #12
 8006efe:	60a0      	str	r0, [r4, #8]
 8006f00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f04:	f7fd fb74 	bl	80045f0 <memset>
 8006f08:	4620      	mov	r0, r4
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}

08006f0c <__sfp_lock_acquire>:
 8006f0c:	4801      	ldr	r0, [pc, #4]	; (8006f14 <__sfp_lock_acquire+0x8>)
 8006f0e:	f000 b8b3 	b.w	8007078 <__retarget_lock_acquire_recursive>
 8006f12:	bf00      	nop
 8006f14:	20000330 	.word	0x20000330

08006f18 <__sfp_lock_release>:
 8006f18:	4801      	ldr	r0, [pc, #4]	; (8006f20 <__sfp_lock_release+0x8>)
 8006f1a:	f000 b8ae 	b.w	800707a <__retarget_lock_release_recursive>
 8006f1e:	bf00      	nop
 8006f20:	20000330 	.word	0x20000330

08006f24 <__sinit_lock_acquire>:
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <__sinit_lock_acquire+0x8>)
 8006f26:	f000 b8a7 	b.w	8007078 <__retarget_lock_acquire_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	2000032b 	.word	0x2000032b

08006f30 <__sinit_lock_release>:
 8006f30:	4801      	ldr	r0, [pc, #4]	; (8006f38 <__sinit_lock_release+0x8>)
 8006f32:	f000 b8a2 	b.w	800707a <__retarget_lock_release_recursive>
 8006f36:	bf00      	nop
 8006f38:	2000032b 	.word	0x2000032b

08006f3c <__sinit>:
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	4604      	mov	r4, r0
 8006f40:	f7ff fff0 	bl	8006f24 <__sinit_lock_acquire>
 8006f44:	69a3      	ldr	r3, [r4, #24]
 8006f46:	b11b      	cbz	r3, 8006f50 <__sinit+0x14>
 8006f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f4c:	f7ff bff0 	b.w	8006f30 <__sinit_lock_release>
 8006f50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f54:	6523      	str	r3, [r4, #80]	; 0x50
 8006f56:	4b13      	ldr	r3, [pc, #76]	; (8006fa4 <__sinit+0x68>)
 8006f58:	4a13      	ldr	r2, [pc, #76]	; (8006fa8 <__sinit+0x6c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f5e:	42a3      	cmp	r3, r4
 8006f60:	bf08      	it	eq
 8006f62:	2301      	moveq	r3, #1
 8006f64:	4620      	mov	r0, r4
 8006f66:	bf08      	it	eq
 8006f68:	61a3      	streq	r3, [r4, #24]
 8006f6a:	f000 f81f 	bl	8006fac <__sfp>
 8006f6e:	6060      	str	r0, [r4, #4]
 8006f70:	4620      	mov	r0, r4
 8006f72:	f000 f81b 	bl	8006fac <__sfp>
 8006f76:	60a0      	str	r0, [r4, #8]
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 f817 	bl	8006fac <__sfp>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2104      	movs	r1, #4
 8006f82:	60e0      	str	r0, [r4, #12]
 8006f84:	6860      	ldr	r0, [r4, #4]
 8006f86:	f7ff ff81 	bl	8006e8c <std>
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	2109      	movs	r1, #9
 8006f8e:	68a0      	ldr	r0, [r4, #8]
 8006f90:	f7ff ff7c 	bl	8006e8c <std>
 8006f94:	2202      	movs	r2, #2
 8006f96:	2112      	movs	r1, #18
 8006f98:	68e0      	ldr	r0, [r4, #12]
 8006f9a:	f7ff ff77 	bl	8006e8c <std>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	61a3      	str	r3, [r4, #24]
 8006fa2:	e7d1      	b.n	8006f48 <__sinit+0xc>
 8006fa4:	08007420 	.word	0x08007420
 8006fa8:	08006ed5 	.word	0x08006ed5

08006fac <__sfp>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	4607      	mov	r7, r0
 8006fb0:	f7ff ffac 	bl	8006f0c <__sfp_lock_acquire>
 8006fb4:	4b1e      	ldr	r3, [pc, #120]	; (8007030 <__sfp+0x84>)
 8006fb6:	681e      	ldr	r6, [r3, #0]
 8006fb8:	69b3      	ldr	r3, [r6, #24]
 8006fba:	b913      	cbnz	r3, 8006fc2 <__sfp+0x16>
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f7ff ffbd 	bl	8006f3c <__sinit>
 8006fc2:	3648      	adds	r6, #72	; 0x48
 8006fc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	d503      	bpl.n	8006fd4 <__sfp+0x28>
 8006fcc:	6833      	ldr	r3, [r6, #0]
 8006fce:	b30b      	cbz	r3, 8007014 <__sfp+0x68>
 8006fd0:	6836      	ldr	r6, [r6, #0]
 8006fd2:	e7f7      	b.n	8006fc4 <__sfp+0x18>
 8006fd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fd8:	b9d5      	cbnz	r5, 8007010 <__sfp+0x64>
 8006fda:	4b16      	ldr	r3, [pc, #88]	; (8007034 <__sfp+0x88>)
 8006fdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fe0:	60e3      	str	r3, [r4, #12]
 8006fe2:	6665      	str	r5, [r4, #100]	; 0x64
 8006fe4:	f000 f847 	bl	8007076 <__retarget_lock_init_recursive>
 8006fe8:	f7ff ff96 	bl	8006f18 <__sfp_lock_release>
 8006fec:	2208      	movs	r2, #8
 8006fee:	4629      	mov	r1, r5
 8006ff0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ff4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ff8:	6025      	str	r5, [r4, #0]
 8006ffa:	61a5      	str	r5, [r4, #24]
 8006ffc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007000:	f7fd faf6 	bl	80045f0 <memset>
 8007004:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007008:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800700c:	4620      	mov	r0, r4
 800700e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007010:	3468      	adds	r4, #104	; 0x68
 8007012:	e7d9      	b.n	8006fc8 <__sfp+0x1c>
 8007014:	2104      	movs	r1, #4
 8007016:	4638      	mov	r0, r7
 8007018:	f7ff ff62 	bl	8006ee0 <__sfmoreglue>
 800701c:	4604      	mov	r4, r0
 800701e:	6030      	str	r0, [r6, #0]
 8007020:	2800      	cmp	r0, #0
 8007022:	d1d5      	bne.n	8006fd0 <__sfp+0x24>
 8007024:	f7ff ff78 	bl	8006f18 <__sfp_lock_release>
 8007028:	230c      	movs	r3, #12
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	e7ee      	b.n	800700c <__sfp+0x60>
 800702e:	bf00      	nop
 8007030:	08007420 	.word	0x08007420
 8007034:	ffff0001 	.word	0xffff0001

08007038 <_fwalk_reent>:
 8007038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800703c:	4606      	mov	r6, r0
 800703e:	4688      	mov	r8, r1
 8007040:	2700      	movs	r7, #0
 8007042:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007046:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800704a:	f1b9 0901 	subs.w	r9, r9, #1
 800704e:	d505      	bpl.n	800705c <_fwalk_reent+0x24>
 8007050:	6824      	ldr	r4, [r4, #0]
 8007052:	2c00      	cmp	r4, #0
 8007054:	d1f7      	bne.n	8007046 <_fwalk_reent+0xe>
 8007056:	4638      	mov	r0, r7
 8007058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800705c:	89ab      	ldrh	r3, [r5, #12]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d907      	bls.n	8007072 <_fwalk_reent+0x3a>
 8007062:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007066:	3301      	adds	r3, #1
 8007068:	d003      	beq.n	8007072 <_fwalk_reent+0x3a>
 800706a:	4629      	mov	r1, r5
 800706c:	4630      	mov	r0, r6
 800706e:	47c0      	blx	r8
 8007070:	4307      	orrs	r7, r0
 8007072:	3568      	adds	r5, #104	; 0x68
 8007074:	e7e9      	b.n	800704a <_fwalk_reent+0x12>

08007076 <__retarget_lock_init_recursive>:
 8007076:	4770      	bx	lr

08007078 <__retarget_lock_acquire_recursive>:
 8007078:	4770      	bx	lr

0800707a <__retarget_lock_release_recursive>:
 800707a:	4770      	bx	lr

0800707c <__swhatbuf_r>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	460e      	mov	r6, r1
 8007080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007084:	4614      	mov	r4, r2
 8007086:	2900      	cmp	r1, #0
 8007088:	461d      	mov	r5, r3
 800708a:	b096      	sub	sp, #88	; 0x58
 800708c:	da07      	bge.n	800709e <__swhatbuf_r+0x22>
 800708e:	2300      	movs	r3, #0
 8007090:	602b      	str	r3, [r5, #0]
 8007092:	89b3      	ldrh	r3, [r6, #12]
 8007094:	061a      	lsls	r2, r3, #24
 8007096:	d410      	bmi.n	80070ba <__swhatbuf_r+0x3e>
 8007098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800709c:	e00e      	b.n	80070bc <__swhatbuf_r+0x40>
 800709e:	466a      	mov	r2, sp
 80070a0:	f000 f902 	bl	80072a8 <_fstat_r>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	dbf2      	blt.n	800708e <__swhatbuf_r+0x12>
 80070a8:	9a01      	ldr	r2, [sp, #4]
 80070aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070b2:	425a      	negs	r2, r3
 80070b4:	415a      	adcs	r2, r3
 80070b6:	602a      	str	r2, [r5, #0]
 80070b8:	e7ee      	b.n	8007098 <__swhatbuf_r+0x1c>
 80070ba:	2340      	movs	r3, #64	; 0x40
 80070bc:	2000      	movs	r0, #0
 80070be:	6023      	str	r3, [r4, #0]
 80070c0:	b016      	add	sp, #88	; 0x58
 80070c2:	bd70      	pop	{r4, r5, r6, pc}

080070c4 <__smakebuf_r>:
 80070c4:	898b      	ldrh	r3, [r1, #12]
 80070c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070c8:	079d      	lsls	r5, r3, #30
 80070ca:	4606      	mov	r6, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	d507      	bpl.n	80070e0 <__smakebuf_r+0x1c>
 80070d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	6123      	str	r3, [r4, #16]
 80070d8:	2301      	movs	r3, #1
 80070da:	6163      	str	r3, [r4, #20]
 80070dc:	b002      	add	sp, #8
 80070de:	bd70      	pop	{r4, r5, r6, pc}
 80070e0:	466a      	mov	r2, sp
 80070e2:	ab01      	add	r3, sp, #4
 80070e4:	f7ff ffca 	bl	800707c <__swhatbuf_r>
 80070e8:	9900      	ldr	r1, [sp, #0]
 80070ea:	4605      	mov	r5, r0
 80070ec:	4630      	mov	r0, r6
 80070ee:	f7ff f989 	bl	8006404 <_malloc_r>
 80070f2:	b948      	cbnz	r0, 8007108 <__smakebuf_r+0x44>
 80070f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070f8:	059a      	lsls	r2, r3, #22
 80070fa:	d4ef      	bmi.n	80070dc <__smakebuf_r+0x18>
 80070fc:	f023 0303 	bic.w	r3, r3, #3
 8007100:	f043 0302 	orr.w	r3, r3, #2
 8007104:	81a3      	strh	r3, [r4, #12]
 8007106:	e7e3      	b.n	80070d0 <__smakebuf_r+0xc>
 8007108:	4b0d      	ldr	r3, [pc, #52]	; (8007140 <__smakebuf_r+0x7c>)
 800710a:	62b3      	str	r3, [r6, #40]	; 0x28
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	6020      	str	r0, [r4, #0]
 8007110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007114:	81a3      	strh	r3, [r4, #12]
 8007116:	9b00      	ldr	r3, [sp, #0]
 8007118:	6120      	str	r0, [r4, #16]
 800711a:	6163      	str	r3, [r4, #20]
 800711c:	9b01      	ldr	r3, [sp, #4]
 800711e:	b15b      	cbz	r3, 8007138 <__smakebuf_r+0x74>
 8007120:	4630      	mov	r0, r6
 8007122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007126:	f000 f8d1 	bl	80072cc <_isatty_r>
 800712a:	b128      	cbz	r0, 8007138 <__smakebuf_r+0x74>
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	f023 0303 	bic.w	r3, r3, #3
 8007132:	f043 0301 	orr.w	r3, r3, #1
 8007136:	81a3      	strh	r3, [r4, #12]
 8007138:	89a0      	ldrh	r0, [r4, #12]
 800713a:	4305      	orrs	r5, r0
 800713c:	81a5      	strh	r5, [r4, #12]
 800713e:	e7cd      	b.n	80070dc <__smakebuf_r+0x18>
 8007140:	08006ed5 	.word	0x08006ed5

08007144 <_malloc_usable_size_r>:
 8007144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007148:	1f18      	subs	r0, r3, #4
 800714a:	2b00      	cmp	r3, #0
 800714c:	bfbc      	itt	lt
 800714e:	580b      	ldrlt	r3, [r1, r0]
 8007150:	18c0      	addlt	r0, r0, r3
 8007152:	4770      	bx	lr

08007154 <_raise_r>:
 8007154:	291f      	cmp	r1, #31
 8007156:	b538      	push	{r3, r4, r5, lr}
 8007158:	4604      	mov	r4, r0
 800715a:	460d      	mov	r5, r1
 800715c:	d904      	bls.n	8007168 <_raise_r+0x14>
 800715e:	2316      	movs	r3, #22
 8007160:	6003      	str	r3, [r0, #0]
 8007162:	f04f 30ff 	mov.w	r0, #4294967295
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800716a:	b112      	cbz	r2, 8007172 <_raise_r+0x1e>
 800716c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007170:	b94b      	cbnz	r3, 8007186 <_raise_r+0x32>
 8007172:	4620      	mov	r0, r4
 8007174:	f000 f830 	bl	80071d8 <_getpid_r>
 8007178:	462a      	mov	r2, r5
 800717a:	4601      	mov	r1, r0
 800717c:	4620      	mov	r0, r4
 800717e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007182:	f000 b817 	b.w	80071b4 <_kill_r>
 8007186:	2b01      	cmp	r3, #1
 8007188:	d00a      	beq.n	80071a0 <_raise_r+0x4c>
 800718a:	1c59      	adds	r1, r3, #1
 800718c:	d103      	bne.n	8007196 <_raise_r+0x42>
 800718e:	2316      	movs	r3, #22
 8007190:	6003      	str	r3, [r0, #0]
 8007192:	2001      	movs	r0, #1
 8007194:	e7e7      	b.n	8007166 <_raise_r+0x12>
 8007196:	2400      	movs	r4, #0
 8007198:	4628      	mov	r0, r5
 800719a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800719e:	4798      	blx	r3
 80071a0:	2000      	movs	r0, #0
 80071a2:	e7e0      	b.n	8007166 <_raise_r+0x12>

080071a4 <raise>:
 80071a4:	4b02      	ldr	r3, [pc, #8]	; (80071b0 <raise+0xc>)
 80071a6:	4601      	mov	r1, r0
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	f7ff bfd3 	b.w	8007154 <_raise_r>
 80071ae:	bf00      	nop
 80071b0:	20000014 	.word	0x20000014

080071b4 <_kill_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	2300      	movs	r3, #0
 80071b8:	4d06      	ldr	r5, [pc, #24]	; (80071d4 <_kill_r+0x20>)
 80071ba:	4604      	mov	r4, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	4611      	mov	r1, r2
 80071c0:	602b      	str	r3, [r5, #0]
 80071c2:	f7fa f95c 	bl	800147e <_kill>
 80071c6:	1c43      	adds	r3, r0, #1
 80071c8:	d102      	bne.n	80071d0 <_kill_r+0x1c>
 80071ca:	682b      	ldr	r3, [r5, #0]
 80071cc:	b103      	cbz	r3, 80071d0 <_kill_r+0x1c>
 80071ce:	6023      	str	r3, [r4, #0]
 80071d0:	bd38      	pop	{r3, r4, r5, pc}
 80071d2:	bf00      	nop
 80071d4:	20000324 	.word	0x20000324

080071d8 <_getpid_r>:
 80071d8:	f7fa b94a 	b.w	8001470 <_getpid>

080071dc <__sread>:
 80071dc:	b510      	push	{r4, lr}
 80071de:	460c      	mov	r4, r1
 80071e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e4:	f000 f894 	bl	8007310 <_read_r>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	bfab      	itete	ge
 80071ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071ee:	89a3      	ldrhlt	r3, [r4, #12]
 80071f0:	181b      	addge	r3, r3, r0
 80071f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071f6:	bfac      	ite	ge
 80071f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80071fa:	81a3      	strhlt	r3, [r4, #12]
 80071fc:	bd10      	pop	{r4, pc}

080071fe <__swrite>:
 80071fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007202:	461f      	mov	r7, r3
 8007204:	898b      	ldrh	r3, [r1, #12]
 8007206:	4605      	mov	r5, r0
 8007208:	05db      	lsls	r3, r3, #23
 800720a:	460c      	mov	r4, r1
 800720c:	4616      	mov	r6, r2
 800720e:	d505      	bpl.n	800721c <__swrite+0x1e>
 8007210:	2302      	movs	r3, #2
 8007212:	2200      	movs	r2, #0
 8007214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007218:	f000 f868 	bl	80072ec <_lseek_r>
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	4632      	mov	r2, r6
 8007220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007224:	81a3      	strh	r3, [r4, #12]
 8007226:	4628      	mov	r0, r5
 8007228:	463b      	mov	r3, r7
 800722a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800722e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007232:	f000 b817 	b.w	8007264 <_write_r>

08007236 <__sseek>:
 8007236:	b510      	push	{r4, lr}
 8007238:	460c      	mov	r4, r1
 800723a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800723e:	f000 f855 	bl	80072ec <_lseek_r>
 8007242:	1c43      	adds	r3, r0, #1
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	bf15      	itete	ne
 8007248:	6560      	strne	r0, [r4, #84]	; 0x54
 800724a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800724e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007252:	81a3      	strheq	r3, [r4, #12]
 8007254:	bf18      	it	ne
 8007256:	81a3      	strhne	r3, [r4, #12]
 8007258:	bd10      	pop	{r4, pc}

0800725a <__sclose>:
 800725a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800725e:	f000 b813 	b.w	8007288 <_close_r>
	...

08007264 <_write_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4604      	mov	r4, r0
 8007268:	4608      	mov	r0, r1
 800726a:	4611      	mov	r1, r2
 800726c:	2200      	movs	r2, #0
 800726e:	4d05      	ldr	r5, [pc, #20]	; (8007284 <_write_r+0x20>)
 8007270:	602a      	str	r2, [r5, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f7fa f93a 	bl	80014ec <_write>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_write_r+0x1e>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_write_r+0x1e>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	20000324 	.word	0x20000324

08007288 <_close_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	2300      	movs	r3, #0
 800728c:	4d05      	ldr	r5, [pc, #20]	; (80072a4 <_close_r+0x1c>)
 800728e:	4604      	mov	r4, r0
 8007290:	4608      	mov	r0, r1
 8007292:	602b      	str	r3, [r5, #0]
 8007294:	f7fa f946 	bl	8001524 <_close>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d102      	bne.n	80072a2 <_close_r+0x1a>
 800729c:	682b      	ldr	r3, [r5, #0]
 800729e:	b103      	cbz	r3, 80072a2 <_close_r+0x1a>
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
 80072a4:	20000324 	.word	0x20000324

080072a8 <_fstat_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	2300      	movs	r3, #0
 80072ac:	4d06      	ldr	r5, [pc, #24]	; (80072c8 <_fstat_r+0x20>)
 80072ae:	4604      	mov	r4, r0
 80072b0:	4608      	mov	r0, r1
 80072b2:	4611      	mov	r1, r2
 80072b4:	602b      	str	r3, [r5, #0]
 80072b6:	f7fa f940 	bl	800153a <_fstat>
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	d102      	bne.n	80072c4 <_fstat_r+0x1c>
 80072be:	682b      	ldr	r3, [r5, #0]
 80072c0:	b103      	cbz	r3, 80072c4 <_fstat_r+0x1c>
 80072c2:	6023      	str	r3, [r4, #0]
 80072c4:	bd38      	pop	{r3, r4, r5, pc}
 80072c6:	bf00      	nop
 80072c8:	20000324 	.word	0x20000324

080072cc <_isatty_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	2300      	movs	r3, #0
 80072d0:	4d05      	ldr	r5, [pc, #20]	; (80072e8 <_isatty_r+0x1c>)
 80072d2:	4604      	mov	r4, r0
 80072d4:	4608      	mov	r0, r1
 80072d6:	602b      	str	r3, [r5, #0]
 80072d8:	f7fa f93e 	bl	8001558 <_isatty>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d102      	bne.n	80072e6 <_isatty_r+0x1a>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	b103      	cbz	r3, 80072e6 <_isatty_r+0x1a>
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	20000324 	.word	0x20000324

080072ec <_lseek_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4604      	mov	r4, r0
 80072f0:	4608      	mov	r0, r1
 80072f2:	4611      	mov	r1, r2
 80072f4:	2200      	movs	r2, #0
 80072f6:	4d05      	ldr	r5, [pc, #20]	; (800730c <_lseek_r+0x20>)
 80072f8:	602a      	str	r2, [r5, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	f7fa f936 	bl	800156c <_lseek>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d102      	bne.n	800730a <_lseek_r+0x1e>
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	b103      	cbz	r3, 800730a <_lseek_r+0x1e>
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	20000324 	.word	0x20000324

08007310 <_read_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4604      	mov	r4, r0
 8007314:	4608      	mov	r0, r1
 8007316:	4611      	mov	r1, r2
 8007318:	2200      	movs	r2, #0
 800731a:	4d05      	ldr	r5, [pc, #20]	; (8007330 <_read_r+0x20>)
 800731c:	602a      	str	r2, [r5, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	f7fa f8c7 	bl	80014b2 <_read>
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	d102      	bne.n	800732e <_read_r+0x1e>
 8007328:	682b      	ldr	r3, [r5, #0]
 800732a:	b103      	cbz	r3, 800732e <_read_r+0x1e>
 800732c:	6023      	str	r3, [r4, #0]
 800732e:	bd38      	pop	{r3, r4, r5, pc}
 8007330:	20000324 	.word	0x20000324

08007334 <_init>:
 8007334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007336:	bf00      	nop
 8007338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733a:	bc08      	pop	{r3}
 800733c:	469e      	mov	lr, r3
 800733e:	4770      	bx	lr

08007340 <_fini>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	bf00      	nop
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr
